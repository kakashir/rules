From f1d7d9780 to d180aa14f
KVM mailing list update from f1d7d9780 to d180aa14f

Top 15 contributor Email domains (Based on Email Body)

      3 kernel.org

Top 15 contributors (Based on Email Body)

      3  Marc Zyngier <maz@kernel.org>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: arm64: AT + SR accessor fixes
[PATCH 0/2] KVM: arm64: AT + SR accessor fixes
Author: Marc Zyngier <maz@kernel.org>

Volodymyr having reported[1] a couple of rather interesting bugs while
running Xen under KVM, here's a couple of patches to plug these
issues:

- a fix for ATS12 stopping the walk at S1 under the wrong conditions

- a much larger fix for the vcpu_{read,write}_sys_reg() accessors,
  fixing the fate of TPIDR*_EL{0,1} and PAR_EL1, and overall becoming
  much easier to work with

The latter is a pretty large change, but is worth it IMO as it makes
everything much more straightforward.

Volodymyr, I'd very much welcome your feedback on those, as despite my
best effort, I didn't manage to even boot Debian's packaging of Xen
(Grub just refuses to run *anything* after Xen being installed -- I
guess it's not tested at all).

[1] https://lore.kernel.org/r/20250806141707.3479194-1-volodymyr_babchuk@epam.com

Marc Zyngier (2):
  KVM: arm64: nv: Fix ATS12 handling of single-stage translation
  KVM: arm64: Fix vcpu_{read,write}_sys_reg() accessors

 arch/arm64/include/asm/kvm_host.h |   4 +-
 arch/arm64/kvm/at.c               |   6 +-
 arch/arm64/kvm/sys_regs.c         | 243 +++++++++++++++---------------
 3 files changed, 130 insertions(+), 123 deletions(-)

----------------------------------------------------------------------

New:  KVM: arm64: nv: Fix ATS12 handling of single-stage translation
[PATCH 1/2] KVM: arm64: nv: Fix ATS12 handling of single-stage translation
Author: Marc Zyngier <maz@kernel.org>

Volodymyr reports that using a Xen DomU as a nested guest (where
HCR_EL2.E2H == 0), ATS12 results in a translation that stops at
the L2's S1, which isn't something you'd normally expects.

Comparing the code against the spec proves to be illuminating,
and suggests that the author of such code must have been tired,
cross-eyed, drunk, or maybe all of the above.

The gist of it is that, apart from HCR_EL2.VM or HCR_EL2.DC being
0, only the use of the EL2&0 translation regime limits the walk
to S1 only, and that we must finish the S2 walk in any other case.
Which solves the above issue, as E2H==0 indicates that ATS12 walks
the EL1&0 translation regime.

Explicitly checking for EL2&0 fixes this.

Reported-by: Volodymyr Babchuk <volodymyr_babchuk@epam.com>
Suggested-by: Oliver Upton <oliver.upton@linux.dev>
Signed-off-by: Marc Zyngier <maz@kernel.org>
Fixes: be04cebf3e788 ("KVM: arm64: nv: Add emulation of AT S12E{0,1}{R,W}")
Link: https://lore.kernel.org/r/20250806141707.3479194-2-volodymyr_babchuk@epam.com
---
 arch/arm64/kvm/at.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

