From 82095394c to 9b05fc67d
KVM mailing list update from 82095394c to 9b05fc67d

Top 15 contributor Email domains (Based on Email Body)

     18 nutanix.com
      4 amd.com
      2 linux.dev
      2 antgroup.com
      1 linux.ibm.com
      1 arm.com

Top 15 contributors (Based on Email Body)

     18  Jon Kohler <jon@nutanix.com>
      4  Ashish Kalra <ashish.kalra@amd.com>
      2  Thorsten Blum <thorsten.blum@linux.dev>
      2  Hou Wenlong <houwenlong.hwl@antgroup.com>
      1  Wathsala Vithanage <wathsala.vithanage@arm.com>
      1  Gautam Menghani <gautam@linux.ibm.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: TDX: Replace kmalloc + copy_from_user with memdup_user in tdx_td_init
[PATCH] KVM: TDX: Replace kmalloc + copy_from_user with memdup_user in tdx_td_init
Author: Thorsten Blum <thorsten.blum@linux.dev>

Use get_user() to retrieve the number of entries instead of allocating
memory for 'init_vm' with the maximum size, copying 'cmd->data' to it,
only to then read the actual entry count 'cpuid.nent' from the copy.

Return -E2BIG early if 'nr_user_entries' exceeds KVM_MAX_CPUID_ENTRIES.

Use memdup_user() to allocate just enough memory to fit all entries and
to copy 'cmd->data' from userspace. Use struct_size() instead of
manually calculating the number of bytes to allocate and copy.

No functional changes intended.

Signed-off-by: Thorsten Blum <thorsten.blum@linux.dev>
---
Compile-tested only.
---
 arch/x86/kvm/vmx/tdx.c | 32 ++++++++++++--------------------
 1 file changed, 12 insertions(+), 20 deletions(-)

----------------------------------------------------------------------

New:  x86/sev: Add new dump_rmp parameter to snp_leak_pages() API
[PATCH v6 1/3] x86/sev: Add new dump_rmp parameter to snp_leak_pages() API
Author: Ashish Kalra <Ashish.Kalra@amd.com>


When leaking certain page types, such as Hypervisor Fixed (HV_FIXED)
pages, it does not make sense to dump RMP contents for the 2MB range of
the page(s) being leaked. In the case of HV_FIXED pages, this is not an
error situation where the surrounding 2MB page RMP entries can provide
debug information.

Add new __snp_leak_pages() API with dump_rmp bool parameter to support
continue adding pages to the snp_leaked_pages_list but not issue
dump_rmpentry().

Make snp_leak_pages() a wrapper for the common case which also allows
existing users to continue to dump RMP entries.

Suggested-by: Thomas Lendacky <Thomas.Lendacky@amd.com>
Suggested-by: Sean Christopherson <seanjc@google.com>
Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Acked-by: Borislav Petkov (AMD) <bp@alien8.de>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 arch/x86/include/asm/sev.h | 7 ++++++-
 arch/x86/virt/svm/sev.c    | 7 ++++---
 2 files changed, 10 insertions(+), 4 deletions(-)

----------------------------------------------------------------------

New:  crypto: ccp - Add AMD Seamless Firmware Servicing (SFS) driver
[PATCH v6 0/3] crypto: ccp - Add AMD Seamless Firmware Servicing (SFS) driver
Author: Ashish Kalra <Ashish.Kalra@amd.com>


AMD Seamless Firmware Servicing (SFS) is a secure method to allow
non-persistent updates to running firmware and settings without
requiring BIOS reflash and/or system reset.

SFS does not address anything that runs on the x86 processors and
it can be used to update ASP firmware, modules, register settings
and update firmware for other microprocessors like TMPM, etc.

SFS driver support adds ioctl support to communicate the SFS
commands to the ASP/PSP by using the TEE mailbox interface.

The Seamless Firmware Servicing (SFS) driver is added as a
PSP sub-device.

Includes pre-patch to add new generic SEV API interface to allocate/free
hypervisor fixed pages which abstracts hypervisor fixed page allocation
and free for PSP sub devices. The API internally uses SNP_INIT_EX to
transition pages to HV-Fixed page state.

For detailed information, please look at the SFS specifications:
https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/58604.pdf

v6:
- Rebase on top of the tip/master branch.

v5:
- Print pathname for firmware_request_nowarn() failure message.
- Changed all dev_warn() to dev_warn_ratelimited() for all ioctl
  error mesages.
- Add Reviewed-by's for all patches.

v4:
- Ensure that sev_cmd_mutex is acquired before the snp_initialized check
  in snp_alloc_hv_fixed_pages().
- Restore memory attributes back to the default "write-back" type in
  sfs_dev_destroy() and cleanup path for the error handling in
  sfs_dev_init().

v3:
- As not dumping the RMP entry is the rare case, crafting the APIs to
reflect that, i.e. make snp_leak_pages() a wrapper for the common case
to allow existing users to continue to dump RMP entries by calling
new __snp_leak_pages() API with dump_rmp bool parameter set to true.
The new parameter also adds support to continue adding pages to the
snp_leaked_pages_list but not issue dump_rmpentry().
- Fix kernel test robot build warning for uninitialized "ret" variable.

v2:
- Change API interface from adding/removing HV_Fixed pages to
  allocate/free HV_Fixed pages.
- Move to guard() for all mutexes/spinlocks.
- Handle case of SFS capability bit being set on multiple PSPs, add
  protection based on sev_dev_init() and sev_misc_init().
- Add new sfs_command structure and use it for programming both the
  GetFirmareVersions and UpdatePackage command.
- Use sfs_user_get_fw_versions and sfs_user_update_package structures
  for copy_to_/copy_from_user for the iotcls.
- Fix payload_path buffer size to prevent buffer overrun/stack
  corruption issues and also sanitize user provided payload_name to
  ensure it is null-terminated and use snprintf() to setup payload_path.
- Add new quiet parameter to snp_leak_pages() API and additionally change 
  all existing users of this API to pass quiet=false parameter
  maintaining current behavior.
- Remove mutex_init() and mutex_destroy() calls for statically declared
  mutex.
- Fix comments and commit logs.

Ashish Kalra (3):
  x86/sev: Add new dump_rmp parameter to snp_leak_pages() API
  crypto: ccp - Add new HV-Fixed page allocation/free API.
  crypto: ccp - Add AMD Seamless Firmware Servicing (SFS) driver

 arch/x86/include/asm/sev.h          |   7 +-
 arch/x86/virt/svm/sev.c             |   7 +-
 drivers/crypto/ccp/Makefile         |   3 +-
 drivers/crypto/ccp/psp-dev.c        |  20 ++
 drivers/crypto/ccp/psp-dev.h        |   8 +-
 drivers/crypto/ccp/sev-dev.c        | 182 ++++++++++++++++
 drivers/crypto/ccp/sev-dev.h        |   3 +
 drivers/crypto/ccp/sfs.c            | 311 ++++++++++++++++++++++++++++
 drivers/crypto/ccp/sfs.h            |  47 +++++
 include/linux/psp-platform-access.h |   2 +
 include/uapi/linux/psp-sfs.h        |  87 ++++++++
 11 files changed, 671 insertions(+), 6 deletions(-)

----------------------------------------------------------------------

New:  vfio/pci: add PCIe TPH device ioctl
[RFC PATCH v3 1/1] vfio/pci: add PCIe TPH device ioctl
Author: Wathsala Vithanage <wathsala.vithanage@arm.com>

This patch introduces VFIO_DEVICE_PCI_TPH IOCTL to enable configuring of
TPH from the user space. It provides an interface to user space drivers
and VMMs to enable/disable TPH capability on PCIe devices and set
steering tags in MSI-X or steering-tag table entries or read steering
tags from the kernel to use them in device-specific mode.

Signed-off-by: Wathsala Vithanage <wathsala.vithanage@arm.com>
---
 drivers/vfio/pci/vfio_pci_core.c | 153 +++++++++++++++++++++++++++++++
 include/uapi/linux/vfio.h        |  83 +++++++++++++++++
 2 files changed, 236 insertions(+)

----------------------------------------------------------------------

New:  lib: add linux vmx.h clone from 6.16
[kvm-unit-tests PATCH 01/17] lib: add linux vmx.h clone from 6.16
Author: Jon Kohler <jon@nutanix.com>

Add Linux's arch/x86/include/asm/vmx.h from [1] into lib/linux/vmx.h.

This copy will replace most (if not all) of the existing vmx.h in follow
up commits, and will allow kvm-unit-tests to be directly aligned with
how Linux defines vmx.h.

[1] e6a8578 ("KVM: TDX: Detect unexpected SEPT violations due to pending SPTEs")

Signed-off-by: Jon Kohler <jon@nutanix.com>

---
 lib/linux/vmx.h | 672 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 672 insertions(+)

----------------------------------------------------------------------

New:  x86/vmx: align with Linux kernel VMX definitions
[kvm-unit-tests PATCH 00/17] x86/vmx: align with Linux kernel VMX definitions
Author: Jon Kohler <jon@nutanix.com>

This series modernizes VMX definitions to align with the canonical ones
within Linux kernel source. Currently, kvm-unit-tests uses custom VMX
constant definitions that have grown organically and have diverged from
the kernel, increasing the overhead to grok from one code base to
another.

This alignment provides several benefits:
- Reduces maintenance overhead by using authoritative definitions
- Eliminates potential bugs from definition mismatches
- Makes the test suite more consistent with kernel code
- Simplifies future updates when new VMX features are added

Given the lines touched, I've broken this up into two groups within the
series:

Group 1: Import various headers from Linux kernel 6.16 (P01-04)

Headers were brought in with minimal adaptation outside of minor tweaks
for includes, etc.

Group 2: Mechanically replace existing constants with equivalents (P05-17)

Replace custom VMX constant definitions in x86/vmx.h with Linux kernel
equivalents from lib/linux/vmx.h. This systematic replacement covers:

- Pin-based VM-execution controls (PIN_* -> PIN_BASED_*)
- CPU-based VM-execution controls (CPU_* -> CPU_BASED_*, SECONDARY_EXEC_*)
- VM-exit controls (EXI_* -> VM_EXIT_*)
- VM-entry controls (ENT_* -> VM_ENTRY_*)
- VMCS field names (custom enum -> standard Linux enum)
- VMX exit reasons (VMX_* -> EXIT_REASON_*)
- Interrupt/exception type definitions

All functional behavior is preserved - only the constant names and
values change to match Linux kernel definitions. All existing VMX tests
pass with no functional changes.

There is still a bit of bulk in x86/vmx.h, which can be addressed in
future patches as needed.

Jon Kohler (17):
  lib: add linux vmx.h clone from 6.16
  lib: add linux trapnr.h clone from 6.16
  lib: add vmxfeatures.h clone from 6.16
  lib: define __aligned() in compiler.h
  x86/vmx: basic integration for new vmx.h
  x86/vmx: switch to new vmx.h EPT violation defs
  x86/vmx: switch to new vmx.h EPT RWX defs
  x86/vmx: switch to new vmx.h EPT access and dirty defs
  x86/vmx: switch to new vmx.h EPT capability and memory type defs
  x86/vmx: switch to new vmx.h primary processor-based VM-execution
    controls
  x86/vmx: switch to new vmx.h secondary execution control bit
  x86/vmx: switch to new vmx.h secondary execution controls
  x86/vmx: switch to new vmx.h pin based VM-execution controls
  x86/vmx: switch to new vmx.h exit controls
  x86/vmx: switch to new vmx.h entry controls
  x86/vmx: switch to new vmx.h interrupt defs
  x86/vmx: align exit reasons with Linux uapi

 lib/linux/compiler.h    |    1 +
 lib/linux/trapnr.h      |   44 ++
 lib/linux/vmx.h         |  672 ++++++++++++++++++
 lib/linux/vmxfeatures.h |   93 +++
 lib/x86/msr.h           |   14 +
 x86/vmx.c               |  230 +++---
 x86/vmx.h               |  356 ++--------
 x86/vmx_tests.c         | 1489 ++++++++++++++++++++++-----------------
 8 files changed, 1876 insertions(+), 1023 deletions(-)

----------------------------------------------------------------------

New:  KVM: s390: Remove unused return variable in kvm_arch_vcpu_ioctl_set_fpu
[PATCH] KVM: s390: Remove unused return variable in kvm_arch_vcpu_ioctl_set_fpu
Author: Thorsten Blum <thorsten.blum@linux.dev>

kvm_arch_vcpu_ioctl_set_fpu() always returns 0 and the local return
variable 'ret' is not used anymore. Remove it.

Signed-off-by: Thorsten Blum <thorsten.blum@linux.dev>
---
 arch/s390/kvm/kvm-s390.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

----------------------------------------------------------------------

New:  KVM: Disable IRQs in kvm_online_cpu()/kvm_offline_cpu()
[PATCH v3 1/2] KVM: Disable IRQs in kvm_online_cpu()/kvm_offline_cpu()
Author: Hou Wenlong <houwenlong.hwl@antgroup.com>

After the commit aaf12a7b4323 ("KVM: Rename and move
CPUHP_AP_KVM_STARTING to ONLINE section"), KVM's hotplug callbacks have
been moved into the ONLINE section, where IRQs and preemption are
enabled according to the documentation. However, if IRQs are not
guaranteed to be disabled, it could theoretically be a bug, because
virtualization_enabled may be stale (with respect to the actual state of
the hardware) when read from IRQ context, making the callback
potentially reentrant. Therefore, disable IRQs in kvm_online_cpu() and
kvm_offline_cpu() to ensure that all paths for
kvm_enable_virtualization_cpu() and kvm_disable_virtualization_cpu() are
in an IRQ-disabled state.

Suggested-by: Sean Christopherson <seanjc@google.com>
Signed-off-by: Hou Wenlong <houwenlong.hwl@antgroup.com>
---
 virt/kvm/kvm_main.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

