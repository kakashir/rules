From ad404db2f to f31eea711
KVM mailing list update from ad404db2f to f31eea711

Top 15 contributor Email domains (Based on Email Body)

      9 amd.com
      5 amazon.co.uk
      3 gmail.com
      1 fb.com
      1 casper.infradead.org

Top 15 contributors (Based on Email Body)

      9  John Allen <john.allen@amd.com>
      5  Fred Griffoul <fgriffo@amazon.co.uk>
      2  Nicholas Piggin <npiggin@gmail.com>
      1  Sukrut Heroorkar <hsukrut3@gmail.com>
      1  Fred Griffoul <griffoul@casper.infradead.org>
      1  Alex Mastro <amastro@fb.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: nVMX: Implement cache for L1 MSR bitmap
[PATCH 1/5] KVM: nVMX: Implement cache for L1 MSR bitmap
Author: Fred Griffoul <griffoul@infradead.org>


Optimize L1 MSR bitmap access by replacing map/unmap operations with a
persistent gfn_to_pfn_cache. This optimization reduces overhead during
L2 VM-entry where nested_vmx_prepare_msr_bitmap() merges L1's MSR
intercepts with L0's requirements.

Current implementation using kvm_vcpu_map_readonly() and
kvm_vcpu_unmap() creates significant performance impact, particularly
with unmanaged guest memory.

New implementation:
- Initializes a pfn cache when entering VMX operation.
- Maintains persistent access throughout operation.
- Deactivates cache when VMX operation ends.

Signed-off-by: Fred Griffoul <fgriffo@amazon.co.uk>
---
 arch/x86/kvm/vmx/nested.c | 42 +++++++++++++++++++++++++++++++++++----
 arch/x86/kvm/vmx/vmx.h    |  2 ++
 2 files changed, 40 insertions(+), 4 deletions(-)

----------------------------------------------------------------------

New:  KVM: Improve nested VMX performance 
[PATCH 0/5] KVM: Improve nested VMX performance 
Author: Fred Griffoul <griffoul@infradead.org>


This patch series addresses performance issues in nested VMX when
handling unmanaged guest memory. Unmanaged guest memory refers to memory
not directly mapped by the kernel (no struct page), such as memory
passed with the mem= parameter or guest_memfd for non-Confidential
Computing (CoCo) VMs.

Current Problem:

During nested VMX operations, the system frequently accesses specific
guest pages during L2 VM entry/exit cycles. The current workflow:

1. kvm_vcpu_map() invokes memremap() for unmanaged memory.
2. The system either directly accesses mapped memory via nested VMX or
   passes it to the L2 guest through vmcs02.
3. kvm_vcpu_unmap() invokes memunmap()

This repeated map/unmap cycle creates significant performance overhead
due to expensive remapping operations.

Solution approach:

Our solution replaces kvm_host_map with gfn_to_pfn_cache in nested VMX.
It addresses two distinct types of guest pages.

First, we handle the L1 MSR bitmap page, which requires read-only access
for folding L1 and L0 MSR bitmap. We implement this conversion to
gfn_to_pfn_cache in patch 1.

Second, we tackle system pages, including APIC access, virtual APIC, and
posted interrupt descriptor pages. These pages are more complex as
they're accessed by both nested VMX code _and_ passed to the L2 guest in
vmcs02 fields. This requires to restore and complete the
"guest-uses-pfn" support in pfncache through patches 2 and 3, followed
by implementing kvm_host_map replacement with caches in patch 4.

Testing:

Patch 5 introduces a new selftest to verify cache invalidation and
memslot update functionality.

The changes are available in a git repository at:

git://git.infradead.org/users/griffoul/linux.git tags/nvmx-gpc-v1

Suggested-by: dwmw@amazon.co.uk

Fred Griffoul (5):
  KVM: nVMX: Implement cache for L1 MSR bitmap
  KVM: pfncache: Restore guest-uses-pfn support
  KVM: x86: Add nested state validation for pfncache support
  KVM: nVMX: Implement cache for L1 APIC pages
  KVM: selftests: Add nested VMX APIC cache invalidation test

 arch/x86/include/asm/kvm_host.h               |   1 +
 arch/x86/kvm/vmx/nested.c                     | 213 +++++++++---
 arch/x86/kvm/vmx/vmx.h                        |  10 +-
 arch/x86/kvm/x86.c                            |  14 +-
 include/linux/kvm_host.h                      |  34 +-
 include/linux/kvm_types.h                     |   1 +
 tools/testing/selftests/kvm/Makefile.kvm      |   1 +
 .../selftests/kvm/x86/vmx_apic_update_test.c  | 302 ++++++++++++++++++
 virt/kvm/kvm_main.c                           |   3 +-
 virt/kvm/kvm_mm.h                             |   6 +-
 virt/kvm/pfncache.c                           |  43 ++-
 11 files changed, 575 insertions(+), 53 deletions(-)

----------------------------------------------------------------------

New:  selftests/kvm: remove stale TODO in xapic_state_test
[PATCH] selftests/kvm: remove stale TODO in xapic_state_test
Author: Sukrut Heroorkar <hsukrut3@gmail.com>

The TODO about using the number of vCPUs instead of vcpu.id + 1
was already addressed by commit 376bc1b458c9 ("KVM: selftests: Don't
assume vcpu->id is '0' in xAPIC state test"). The comment is now
stale and can be removed.

Signed-off-by: Sukrut Heroorkar <hsukrut3@gmail.com>
---
 tools/testing/selftests/kvm/x86/xapic_state_test.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  x86/boot: Move boot_*msr helpers to asm/shared/msr.h
[PATCH v2 1/2] x86/boot: Move boot_*msr helpers to asm/shared/msr.h
Author: John Allen <john.allen@amd.com>

The boot_rdmsr and boot_wrmsr helpers used to reduce the need for inline
assembly in the boot kernel can also be useful in code shared by boot
and run-time kernel code. Move these helpers to asm/shared/msr.h and
rename to raw_rdmsr and raw_wrmsr to indicate that these may also be
used outside of the boot kernel.

Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Signed-off-by: John Allen <john.allen@amd.com>
---
 arch/x86/boot/compressed/sev.c    |  7 ++++---
 arch/x86/boot/compressed/sev.h    |  6 +++---
 arch/x86/boot/cpucheck.c          | 16 ++++++++--------
 arch/x86/boot/msr.h               | 26 --------------------------
 arch/x86/include/asm/shared/msr.h | 15 +++++++++++++++
 5 files changed, 30 insertions(+), 40 deletions(-)

----------------------------------------------------------------------

New:  Support for SEV-ES guest shadow stack
[PATCH v2 0/2] Support for SEV-ES guest shadow stack
Author: John Allen <john.allen@amd.com>

For shadow stack support in SVM when using SEV-ES, the guest kernel
needs to save XSS to the GHCB in order for the hypervisor to determine
the XSAVES save area size.

This series can be applied independently of the hypervisor series in
order to support non-KVM hypervisors.
---
v2:
  - Update changelog for patch 2/2

John Allen (2):
  x86/boot: Move boot_*msr helpers to asm/shared/msr.h
  x86/sev-es: Include XSS value in GHCB CPUID request

 arch/x86/boot/compressed/sev.c    |  7 ++++---
 arch/x86/boot/compressed/sev.h    |  6 +++---
 arch/x86/boot/cpucheck.c          | 16 ++++++++--------
 arch/x86/boot/msr.h               | 26 --------------------------
 arch/x86/coco/sev/vc-shared.c     | 11 +++++++++++
 arch/x86/include/asm/shared/msr.h | 15 +++++++++++++++
 arch/x86/include/asm/svm.h        |  1 +
 7 files changed, 42 insertions(+), 40 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: SVM: Emulate reads and writes to shadow stack MSRs
[PATCH v4 1/5] KVM: x86: SVM: Emulate reads and writes to shadow stack MSRs
Author: John Allen <john.allen@amd.com>

Emulate shadow stack MSR access by reading and writing to the
corresponding fields in the VMCB.

Signed-off-by: John Allen <john.allen@amd.com>
---
 arch/x86/kvm/svm/svm.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

----------------------------------------------------------------------

New:  Enable Shadow Stack Virtualization for SVM 
[PATCH v4 0/5] Enable Shadow Stack Virtualization for SVM 
Author: John Allen <john.allen@amd.com>

AMD Zen3 and newer processors support shadow stack, a feature designed
to protect against ROP (return-oriented programming) attacks in which an
attacker manipulates return addresses on the call stack in order to
execute arbitrary code. To prevent this, shadow stacks can be allocated
that are only used by control transfer and return instructions. When a
CALL instruction is issued, it writes the return address to both the
program stack and the shadow stack. When the subsequent RET instruction
is issued, it pops the return address from both stacks and compares
them. If the addresses don't match, a control-protection exception is
raised.

Shadow stack and a related feature, Indirect Branch Tracking (IBT), are
collectively referred to as Control-flow Enforcement Technology (CET).
However, current AMD processors only support shadow stack and not IBT.

This series adds support for shadow stack in SVM guests and builds upon
the support added in the CET guest support patch series [1]. Additional
patches are required to support shadow stack enabled guests in qemu [2].

[1]: CET guest support patches (v13)
https://lore.kernel.org/all/20250821133132.72322-1-chao.gao@intel.com/

[2]: CET qemu patches
https://lore.kernel.org/all/20230720111445.99509-1-weijiang.yang@intel.com/

[3]:  Previous SVM support patches (v3)
https://lore.kernel.org/all/20250806204510.59083-1-john.allen@amd.com/

---

RFC v2:
  - Rebased on v3 of the Intel CET virtualization series, dropping the
    patch that moved cet_is_msr_accessible to common code as that has
    been pulled into the Intel series.
  - Minor change removing curly brackets around if statement introduced
    in patch 6/6.
RFC v3:
  - Rebased on v5 of the Intel CET virtualization series.
  - Add patch changing the name of vmplX_ssp SEV-ES save area fields to
    plX_ssp.
  - Merge this series intended for KVM with the separate guest kernel
    patch (now patch 7/8).
  - Update MSR passthrough code to conditionally pass through shadow
    stack MSRS based on both host and guest support.
  - Don't save PL0_SSP, PL1_SSP, and PL2_SSP MSRs on SEV-ES VMRUN as
    these are currently unused.
v1:
  - Remove RFC tag from series
  - Rebase on v6 of the Intel CET virtualization series
  - Use KVM-governed feature to track SHSTK for SVM
v2:
  - Add new patch renaming boot_*msr to raw_*msr. Utilize raw_rdmsr when
    reading XSS on SEV-ES cpuid instructions.
  - Omit unnecessary patch for saving shadow stack msrs on SEV-ES VMRUN
  - Omit passing through of XSS for SEV-ES as support has already been
    properly implemented in a26b7cd22546 ("KVM: SEV: Do not intercept
    accesses to MSR_IA32_XSS for SEV-ES guests") 
v3:
  - Rebased on v11 of the Intel CET Virtualization series.
  - Split guest kernel patches into a separate series as these are
    independent of this series and are needed to support non-KVM
    hypervisors.
v4:
  - Rebased on v13 of the Intel CET Virtualization series.
  - Add SEV-ES save area fields to dump_vmcb.
  - Don't pass through MSR_IA32_INT_SSP_TAB.
  - Don't remove clearing of IBT capability.

John Allen (5):
  KVM: x86: SVM: Emulate reads and writes to shadow stack MSRs
  KVM: x86: SVM: Update dump_vmcb with shadow stack save area additions
  KVM: x86: SVM: Pass through shadow stack MSRs
  KVM: SVM: Add MSR_IA32_XSS to the GHCB for hypervisor kernel
  KVM: SVM: Enable shadow stack virtualization for SVM

 arch/x86/kvm/svm/sev.c |  5 +++++
 arch/x86/kvm/svm/svm.c | 43 +++++++++++++++++++++++++++++++++++++++---
 arch/x86/kvm/svm/svm.h |  1 +
 3 files changed, 46 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  vfio: return -ENOTTY for unsupported device feature
[PATCH] vfio: return -ENOTTY for unsupported device feature
Author: Alex Mastro <amastro@fb.com>

The two implementers of vfio_device_ops.device_feature,
vfio_cdx_ioctl_feature and vfio_pci_core_ioctl_feature, return
-ENOTTY in the fallthrough case when the feature is unsupported. For
consistency, the base case, vfio_ioctl_device_feature, should do the
same when device_feature == NULL, indicating an implementation has no
feature extensions.

Signed-off-by: Alex Mastro <amastro@fb.com>
---
The commit message makes the main points, but I'm assuming that it was
intended for ENOTTY and not EINVAL to be the errno to indicate "this
feature is not supported".
---
 drivers/vfio/vfio_main.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  build: work around secondary expansion limitation with some Make versions
[PATCH 1/2] build: work around secondary expansion limitation with some Make versions
Author: Nicholas Piggin <npiggin@gmail.com>

GNU Make 4.2.1 as shipped in Ubuntu 20.04 has a problem with secondary
expansion and variable names containing the '/' character. Make 4.3 and
4.4 don't have the problem.

Instead of using the variable name from riscv/sbi-deps and matching it
from the riscv/sbi.* target name, name the variable sbi-deps and match
it by stripping the riscv/ directory name off the riscv/sbi.* target
name.

Reported-by: Joel Stanley <joel@jms.id.au>
Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
---
 riscv/Makefile | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

