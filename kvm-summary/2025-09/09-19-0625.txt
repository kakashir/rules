From 9dae7b43b to 002d7bd6b
KVM mailing list update from 9dae7b43b to 002d7bd6b

Top 15 contributor Email domains (Based on Email Body)

      9 kernel.org
      2 antgroup.com
      1 redhat.com
      1 nutanix.com
      1 linux.intel.com
      1 linutronix.de
      1 iscas.ac.cn
      1 amd.com

Top 15 contributors (Based on Email Body)

      9  "Naveen N Rao (AMD)" <naveen@kernel.org>
      2  Hou Wenlong <houwenlong.hwl@antgroup.com>
      1  Zhe Qiao <qiaozhe@iscas.ac.cn>
      1  =?UTF-8?q?C=C3=A9dric=20Le=20Goater?= <clg@redhat.com>
      1  Tony Lindgren <tony.lindgren@linux.intel.com>
      1  Sebastian Andrzej Siewior <bigeasy@linutronix.de>
      1  Khushit Shah <khushit.shah@nutanix.com>
      1  Ashish Kalra <ashish.kalra@amd.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  accel/kvm: Fix kvm_convert_memory calls crossing memory regions
[PATCH] accel/kvm: Fix kvm_convert_memory calls crossing memory regions
Author: Ashish Kalra <Ashish.Kalra@amd.com>


Page conversion call can span multiple memory regions, potentially
resulting in a conversion failure if the memory range being converted
extends beyond the boundaries of the referenced memory region.

Handle the case of page conversion call straddling across memory
regions.

Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
---
 accel/kvm/kvm-all.c | 23 ++++++++++++++++++++---
 1 file changed, 20 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  vhost: Take a reference on the task that is reference in
[PATCH] vhost: Take a reference on the task that is reference in
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

vhost_task_create() creates a task and keeps a reference to its
task_struct. That task may exit early via a signal and its task_struct
will be released.
A pending vhost_task_wake() will then attempt to wake the task and
access a task_struct which is no longer there.

Acquire a reference on the task_struct while creating the thread and
release the reference while the struct vhost_task itself is removed.
If the task exits early due to a signal, then the vhost_task_wake() will
still access a valid task_struct. The wake is safe and will be skipped
in this case.

Fixes: f9010dbdce911 ("fork, vhost: Use CLONE_THREAD to fix freezer/ps regression")
Reported-by: Sean Christopherson <seanjc@google.com>
Closes: https://lore.kernel.org/all/aKkLEtoDXKxAAWju@google.com/
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 kernel/vhost_task.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: x86: skip userspace IOAPIC EOI exit when Directed EOI is enabled
[PATCH] KVM: x86: skip userspace IOAPIC EOI exit when Directed EOI is enabled
Author: Jon Kohler <jon@nutanix.com>


Problem:
We observed Windows w/ HyperV getting stuck during boot because of
level triggered interrupt storm. This is because KVM currently
does not respect Directed EOI bit set by guest in split-irqchip
mode.

We observed the following ACTUAL sequence on Windows guests with
Directed EOI enabled:
  1. Guest issues an APIC EOI.
  2. The interrupt is injected into L2 and serviced.
  3. Guest issues an IOAPIC EOI.

But, with the current behavior in split-irqchip mode:
  1. Guest issues an APIC EOI.
  2. KVM exits to userspace and QEMU's ioapic_service reasserts the
     interrupt because the line is not yet deasserted.
  3. Steps 1 and 2 keeps looping, and hence no progress is made.
(logs at the bug linked below).

This is because in split-irqchip mode, KVM requests a userspace IOAPIC
EOI exit on every APIC EOI. However, if the guest sets the Directed EOI
bit in the APIC Spurious Interrupt Vector Register (SPIV, bit 12), per
the x2APIC specification, the APIC does not broadcast EOIs to the IOAPIC.
In this case, it is the guest's responsibility to explicitly EOI the
IOAPIC by writing to its EOI register.

kernel-irqchip mode already handles this similarly in
kvm_ioapic_update_eoi_one().

Link: https://lore.kernel.org/kvm/7D497EF1-607D-4D37-98E7-DAF95F099342@nutanix.com/

Signed-off-by: Khushit Shah <khushit.shah@nutanix.com>
---
 arch/x86/kvm/lapic.c | 4 ++++
 1 file changed, 4 insertions(+)

----------------------------------------------------------------------

New:  vfio: Dump migration features under debugfs
[PATCH] vfio: Dump migration features under debugfs
Author: Cédric Le Goater <clg@redhat.com>

A debugfs directory was recently added for VFIO devices. Add a new
"features" file under the migration sub-directory to expose which
features the device supports.

Signed-off-by: Cédric Le Goater <clg@redhat.com>
---
 drivers/vfio/debugfs.c                 | 19 +++++++++++++++++++
 Documentation/ABI/testing/debugfs-vfio |  6 ++++++
 2 files changed, 25 insertions(+)

----------------------------------------------------------------------

New:  target/i386: SEV: Generalize handling of SVM_SEV_FEAT_SNP_ACTIVE
[PATCH 1/8] target/i386: SEV: Generalize handling of SVM_SEV_FEAT_SNP_ACTIVE
Author: Naveen N Rao (AMD) <naveen@kernel.org>

Align with IGVM files providing sev features with
SVM_SEV_FEAT_SNP_ACTIVE set by setting the same when creating a
sev-snp-guest object.

Since KVM sets this feature itself, SVM_SEV_FEAT_SNP_ACTIVE is unset
before KVM_SEV_INIT2 ioctl is invoked. Move that out of IGVM-specific
section to common code.

While at it, convert the existing SVM_SEV_FEAT_SNP_ACTIVE definition to
use the BIT() macro for consistency with upcoming feature flags.

Signed-off-by: Naveen N Rao (AMD) <naveen@kernel.org>
---
 target/i386/sev.h |  2 +-
 target/i386/sev.c | 24 +++++++++++++++++-------
 2 files changed, 18 insertions(+), 8 deletions(-)

----------------------------------------------------------------------

New:  target/i386: SEV: Add support for enabling VMSA SEV features
[PATCH 0/8] target/i386: SEV: Add support for enabling VMSA SEV features
Author: Naveen N Rao (AMD) <naveen@kernel.org>

This series adds support for enabling VMSA SEV features for SEV-ES and
SEV-SNP guests. Since that is already supported for IGVM files, some of
that code is moved to generic path and reused.

Debug-swap is already supported in KVM today, while patches for enabling
Secure TSC have been accepted for the upcoming kernel release.

Changes since RFC (http://lkml.kernel.org/r/cover.1757589490.git.naveen@kernel.org):
- Split the first patch up into the initial three patches (Tom)
- Fix up indents in qom.json (Markus)
- Drop Secure-AVIC flag enablement pending KVM enablement (Tom)
- Collect Tom's reviewed-by tag for patch 4


- Naveen

Naveen N Rao (AMD) (8):
  target/i386: SEV: Generalize handling of SVM_SEV_FEAT_SNP_ACTIVE
  target/i386: SEV: Ensure SEV features are only set through qemu cli or
    IGVM
  target/i386: SEV: Consolidate SEV feature validation to common init
    path
  target/i386: SEV: Validate that SEV-ES is enabled when VMSA features
    are used
  target/i386: SEV: Add support for enabling debug-swap SEV feature
  target/i386: SEV: Enable use of KVM_SEV_INIT2 for SEV-ES guests
  target/i386: SEV: Add support for enabling Secure TSC SEV feature
  target/i386: SEV: Add support for setting TSC frequency for Secure TSC

 target/i386/sev.h |   4 +-
 target/i386/sev.c | 126 ++++++++++++++++++++++++++++++++++++++++------
 qapi/qom.json     |  16 +++++-
 3 files changed, 128 insertions(+), 18 deletions(-)

----------------------------------------------------------------------

New:  RISCV: KVM: Add support for userspace to suspend a vCPU
[PATCH] RISCV: KVM: Add support for userspace to suspend a vCPU
Author: Zhe Qiao <qiaozhe@iscas.ac.cn>

Add RISC-V architecture support for the KVM_MP_STATE_SUSPENDED vCPU
state, indicating that a vCPU is in suspended mode. While suspended,
the vCPU will block execution until a wakeup event is detected.

Introduce a new system event type, KVM_SYSTEM_EVENT_WAKEUP, to notify
userspace when KVM has recognized such a wakeup event. It is then
userspace’s responsibility to either make the vCPU runnable again or
keep it suspended until the next wakeup event occurs.

Signed-off-by: Zhe Qiao <qiaozhe@iscas.ac.cn>
---
 arch/riscv/include/asm/kvm_host.h |  2 ++
 arch/riscv/kvm/vcpu.c             | 37 +++++++++++++++++++++++++++++++
 2 files changed, 39 insertions(+)

----------------------------------------------------------------------

New:  KVM: TDX: Fix uninitialized error code for __tdx_bringup()
[PATCH v2 1/1] KVM: TDX: Fix uninitialized error code for __tdx_bringup()
Author: Tony Lindgren <tony.lindgren@linux.intel.com>

Fix a Smatch static checker warning reported by Dan:

	arch/x86/kvm/vmx/tdx.c:3464 __tdx_bringup()
	warn: missing error code 'r'

Initialize r to -EINVAL before tdx_get_sysinfo() to simplify the code and
to prevent similar issues from sneaking in later on as suggested by Kai.

Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
Fixes: 61bb28279623 ("KVM: TDX: Get system-wide info about TDX module on initialization")
Suggested-by: Kai Huang <kai.huang@intel.com>
Reviewed-by: Kai Huang <kai.huang@intel.com>
Signed-off-by: Tony Lindgren <tony.lindgren@linux.intel.com>
---

This can wait for the merge window, not urgent

---
 arch/x86/kvm/vmx/tdx.c | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Add helper to retrieve cached value of user return MSR
[PATCH 1/2] KVM: x86: Add helper to retrieve cached value of user return MSR
Author: Hou Wenlong <houwenlong.hwl@antgroup.com>

In the user return MSR support, the cached value is always the hardware
value of the specific MSR. Therefore, add a helper to retrieve the
cached value, which can replace the need for RDMSR, for example, to
allow SEV-ES guests to restore the correct host hardware value without
using RDMSR.

Signed-off-by: Hou Wenlong <houwenlong.hwl@antgroup.com>
---
 arch/x86/include/asm/kvm_host.h | 1 +
 arch/x86/kvm/x86.c              | 8 ++++++++
 2 files changed, 9 insertions(+)

----------------------------------------------------------------------

