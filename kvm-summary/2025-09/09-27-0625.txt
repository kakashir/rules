From 5106a86ab to 35100a4f0
KVM mailing list update from 5106a86ab to 35100a4f0

Top 15 contributor Email domains (Based on Email Body)

      7 google.com
      6 arm.com
      2 chromium.org

Top 15 contributors (Based on Email Body)

      6  Steven Price <steven.price@arm.com>
      6  Sean Christopherson <seanjc@google.com>
      2  Dmytro Maluka <dmaluka@chromium.org>
      1  Ackerley Tng <ackerleytng@google.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: guest_memfd: Add DEFAULT_SHARED flag, reject user
[PATCH 1/6] KVM: guest_memfd: Add DEFAULT_SHARED flag, reject user
Author: Sean Christopherson <seanjc@google.com>

Add a guest_memfd flag to allow userspace to state that the underlying
memory should be configured to be shared by default, and reject user page
faults if the guest_memfd instance's memory isn't shared by default.
Because KVM doesn't yet support in-place private<=>shared conversions, all
guest_memfd memory effectively follows the default state.

Alternatively, KVM could deduce the default state based on MMAP, which for
all intents and purposes is what KVM currently does.  However, implicitly
deriving the default state based on MMAP will result in a messy ABI when
support for in-place conversions is added.

For x86 CoCo VMs, which don't yet support MMAP, memory is currently private
by default (otherwise the memory would be unusable).  If MMAP implies
memory is shared by default, then the default state for CoCo VMs will vary
based on MMAP, and from userspace's perspective, will change when in-place
conversion support is added.  I.e. to maintain guest<=>host ABI, userspace
would need to immediately convert all memory from shared=>private, which
is both ugly and inefficient.  The inefficiency could be avoided by adding
a flag to state that memory is _private_ by default, irrespective of MMAP,
but that would lead to an equally messy and hard to document ABI.

Bite the bullet and immediately add a flag to control the default state so
that the effective behavior is explicit and straightforward.

Fixes: 3d3a04fad25a ("KVM: Allow and advertise support for host mmap() on guest_memfd files")
Cc: David Hildenbrand <david@redhat.com>
Cc: Fuad Tabba <tabba@google.com>
Signed-off-by: Sean Christopherson <seanjc@google.com>
---
 Documentation/virt/kvm/api.rst                 | 10 ++++++++--
 include/uapi/linux/kvm.h                       |  3 ++-
 tools/testing/selftests/kvm/guest_memfd_test.c |  5 +++--
 virt/kvm/guest_memfd.c                         |  6 +++++-
 4 files changed, 18 insertions(+), 6 deletions(-)

----------------------------------------------------------------------

New:  KVM: Avoid a lurking guest_memfd ABI mess
[PATCH 0/6] KVM: Avoid a lurking guest_memfd ABI mess
Author: Sean Christopherson <seanjc@google.com>

Add a guest_memfd flag, DEFAULT_SHARED, to let userspace explicitly state
whether the underlying memory should default to private vs. shared.  As-is,
the default state is implicitly derived from the MMAP flag: guest_memfd
without MMAP is private, and with MMAP is shared.  That implicit behavior
is going to create a mess of an ABI once in-place conversion support comes
along.

If the default state is implicit, then x86 CoCo VMs will end up with defaul=
t
state that varies based on whether or not a guest_memfd instance is
configured for mmap() support.  To avoid breaking guest<=3D>host ABI for Co=
Co
VMs when utilizing in-place conversion, i.e. MMAP, userspace would need to
immediately convert all memory from shared=3D>private.

Ackerley's RFC for in-place conversion fudged around this by adding a flag
to let userspace set the default to _private_, but that will result in a
messy and hard to document ABI.  For x86 CoCo VMs, memory would be private
by default, unless MMAP but not INIT_PRIVATE is specified.  For everything
else, memory would be shared by default, sort of?  Because without MMAP,
the memory would be inaccessible, leading to Schr=C3=B6dinger's cat situati=
on.

Since odds are very good we'll end up with a flag of some kind, add one now
(for 6.18) so that the default state is explicit and simple: without
DEFAULT_SHARED =3D=3D private, with DEFAULT_SHARED =3D=3D shared.

As a bonus, this allows for adding test coverage that KVM rejects faults to
private memory.

Ackerley Tng (1):
  KVM: selftests: Add test coverage for guest_memfd without
    GUEST_MEMFD_FLAG_MMAP

Sean Christopherson (5):
  KVM: guest_memfd: Add DEFAULT_SHARED flag, reject user page faults if
    not set
  KVM: selftests: Stash the host page size in a global in the
    guest_memfd test
  KVM: selftests: Create a new guest_memfd for each testcase
  KVM: selftests: Add wrappers for mmap() and munmap() to assert success
  KVM: selftests: Verify that faulting in private guest_memfd memory
    fails

 Documentation/virt/kvm/api.rst                |  10 +-
 include/uapi/linux/kvm.h                      |   3 +-
 .../testing/selftests/kvm/guest_memfd_test.c  | 162 +++++++++++-------
 .../testing/selftests/kvm/include/kvm_util.h  |  25 +++
 tools/testing/selftests/kvm/lib/kvm_util.c    |  44 ++---
 tools/testing/selftests/kvm/mmu_stress_test.c |   5 +-
 .../selftests/kvm/s390/ucontrol_test.c        |  16 +-
 .../selftests/kvm/set_memory_region_test.c    |  17 +-
 virt/kvm/guest_memfd.c                        |   6 +-
 9 files changed, 169 insertions(+), 119 deletions(-)

----------------------------------------------------------------------

New:  KVM: VMX: Remove stale vmx_set_dr6() declaration
[PATCH] KVM: VMX: Remove stale vmx_set_dr6() declaration
Author: Dmytro Maluka <dmaluka@chromium.org>

Remove leftover after commit 80c64c7afea1 ("KVM: x86: Drop
kvm_x86_ops.set_dr6() in favor of a new KVM_RUN flag") which removed
vmx_set_dr6().

Signed-off-by: Dmytro Maluka <dmaluka@chromium.org>
---
 arch/x86/kvm/vmx/x86_ops.h | 1 -
 1 file changed, 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: x86/mmu: Skip MMIO SPTE invalidation if enable_mmio_caching=0
[PATCH] KVM: x86/mmu: Skip MMIO SPTE invalidation if enable_mmio_caching=0
Author: Dmytro Maluka <dmaluka@chromium.org>

If MMIO caching is disabled, there are no MMIO SPTEs to invalidate, so
the costly zapping of all pages is unnecessary even in the unlikely case
when the MMIO generation number has wrapped.

Signed-off-by: Dmytro Maluka <dmaluka@chromium.org>
---
 arch/x86/kvm/mmu/mmu.c | 3 +++
 1 file changed, 3 insertions(+)

----------------------------------------------------------------------

New:  arm64: RME: Add SMC definitions introduced in RMM v1.1
[RFC PATCH 1/5] arm64: RME: Add SMC definitions introduced in RMM v1.1
Author: Steven Price <steven.price@arm.com>

RMM v1.1 adds a bunch of new SMCs for planes and device assignment.
Add the new SMC definitions including wrapper functions.

The definitions are based on DEN0137 version 1.1-alp14.

Signed-off-by: Steven Price <steven.price@arm.com>
---
 arch/arm64/include/asm/rmi_cmds.h | 1104 +++++++++++++++++++++++++++--
 arch/arm64/include/asm/rmi_smc.h  |  121 +++-
 2 files changed, 1146 insertions(+), 79 deletions(-)

----------------------------------------------------------------------

New:  Arm CCA planes support
[RFC PATCH 0/5] Arm CCA planes support
Author: Steven Price <steven.price@arm.com>

The Arm CCA (Confidential Compute Architecture) RMM version 1.1
specification[1] adds support for a concept of "planes". This allows a
realm to be divided into multiple execution environments with memory
separation between them (while still sharing the same IPA to PA
translations). There's an overview on the Arm website[2].

The TF-RMM project[3] recently merged support for planes to their "main"
branch and this an early preview of the corresponding Linux changes to
support the feature. Note you need to enable the (experimental) RMM_V1_1
configuration option to enable this feature.

This series is based on the v10 posting of the CCA host support
series[4] and is also available as a git tree:

  https://gitlab.arm.com/linux-arm/linux-cca.git/ cca/planes/rfc-v1

A hacked up version of kvmtool to launch a realm guest with an extra
plan is available here:

  https://gitlab.arm.com/linux-arm/kvmtool-cca.git/ cca/planes/rfc-v1

Note:
   The kvmtool support is a hack - it simply (unconditionally) enables a
   single extra plane (for a total of two planes: P0 and P1). This
   should obviously be a configuration option and should support other
   numbers of planes. But it gives an easy way of testing the support
   for auxiliary RTTs while running a single guest image (i.e. leaving
   P1 empty).

This series was written against the RMM v1.1 alp14 specification. Those
who are following things closely will know we're up to alp16, however
there are no major changes affecting planes between these two versions.
The spec is still alpha, so there may well be changes in the future.

[1] https://developer.arm.com/-/cdn-downloads/permalink/Architectures/Armv9/DEN0137_1.1-alp14.zip
[2] https://developer.arm.com/documentation/den0125/400/Arm-CCA-Extensions#md239-arm-cca-extensions__realm-planes
[3] https://www.trustedfirmware.org/projects/tf-rmm/
[4] https://lore.kernel.org/r/20250820145606.180644-1-steven.price%40arm.com

Steven Price (5):
  arm64: RME: Add SMC definitions introduced in RMM v1.1
  arm64: RME: Handle auxiliary RTT trees
  arm64: RME: Support RMI_EXIT_S2AP_CHANGE
  arm64: rme: Allocate AUX RTT PGDs and VMIDs
  arm64: RME: Support num_aux_places & rtt_tree_pp realm parameters

 arch/arm64/include/asm/kvm_rme.h  |   13 +-
 arch/arm64/include/asm/rmi_cmds.h | 1104 +++++++++++++++++++++++++++--
 arch/arm64/include/asm/rmi_smc.h  |  121 +++-
 arch/arm64/include/uapi/asm/kvm.h |   12 +
 arch/arm64/kvm/mmu.c              |   15 +-
 arch/arm64/kvm/rme-exit.c         |   33 +-
 arch/arm64/kvm/rme.c              |  441 +++++++++++-
 7 files changed, 1618 insertions(+), 121 deletions(-)

----------------------------------------------------------------------

