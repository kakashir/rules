From 5bd0fc4df to ebb5a7ce3
KVM mailing list update from 5bd0fc4df to ebb5a7ce3

Top 15 contributor Email domains (Based on Email Body)

     11 amazon.co.uk
      2 redhat.com
      2 linux.alibaba.com
      2 antgroup.com
      1 seu.edu.cn
      1 quicinc.com=0A=
      1 linux.dev
      1 arm.com

Top 15 contributors (Based on Email Body)

     11  "Roy, Patrick" <roypat@amazon.co.uk>
      2  Jason Wang <jasowang@redhat.com>
      2  Hou Wenlong <houwenlong.hwl@antgroup.com>
      1  Zilin Guan <zilin@seu.edu.cn>
      1  Steven Price <steven.price@arm.com>
      1  Itaru Kitayama <itaru.kitayama@linux.dev>
      1  fangyu.yu@linux.alibaba.com
      1  Fangyu Yu <fangyu.yu@linux.alibaba.com>
      1  Elliot Berman <quic_eberman@quicinc.com>=0A=

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  vfio/pds: replace bitmap_free with vfree
[PATCH] vfio/pds: replace bitmap_free with vfree
Author: Zilin Guan <zilin@seu.edu.cn>

host_ack_bmp is allocated with vzalloc but is currently freed via
bitmap_free (which ends up using kfree).  This is incorrect as
allocation and deallocation functions should be paired.

Using mismatched alloc/free may lead to undefined behavior, memory leaks,
or system instability.

This patch fixes the mismatch by freeing host_ack_bmp with vfree to
match the vzalloc allocation.

Signed-off-by: Zilin Guan <zilin@seu.edu.cn>
---
 drivers/vfio/pci/pds/dirty.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  RISC-V: KVM: Fix guest page fault within HLV* instructions
[PATCH] RISC-V: KVM: Fix guest page fault within HLV* instructions
Author: fangyu.yu <fangyu.yu@linux.alibaba.com>

>
>When executing HLV* instructions at the HS mode, a guest page fault
>may occur when a g-stage page table migration between triggering the
>virtual instruction exception and executing the HLV* instruction.
>
>This may be a corner case, and one simpler way to handle this is to
>re-execute the instruction where the virtual  instruction exception
>occurred, and the guest page fault will be automatically handled.
>
>Fixes: 9f7013265112 ("RISC-V: KVM: Handle MMIO exits for VCPU")
>Signed-off-by: Fangyu Yu <fangyu.yu@linux.alibaba.com>
>---
> arch/riscv/kvm/vcpu_insn.c | 21 ++++++++++++++++++---
> 1 file changed, 18 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  RISC-V: KVM: Fix guest page fault within HLV* instructions
[PATCH] RISC-V: KVM: Fix guest page fault within HLV* instructions
Author: fangyu.yu <fangyu.yu@linux.alibaba.com>


When executing HLV* instructions at the HS mode, a guest page fault
may occur when a g-stage page table migration between triggering the
virtual instruction exception and executing the HLV* instruction.

This may be a corner case, and one simpler way to handle this is to
re-execute the instruction where the virtual  instruction exception
occurred, and the guest page fault will be automatically handled.

Fixes: 9f7013265112 ("RISC-V: KVM: Handle MMIO exits for VCPU")
Signed-off-by: Fangyu Yu <fangyu.yu@linux.alibaba.com>
---
 arch/riscv/kvm/vcpu_insn.c | 21 ++++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  filemap: Pass address_space mapping to
[PATCH v6 01/11] filemap: Pass address_space mapping to
Author: Roy, Patrick <roypat@amazon.co.uk>

=0A=
When guest_memfd removes memory from the host kernel's direct map,=0A=
direct map entries must be restored before the memory is freed again. To=0A=
do so, ->free_folio() needs to know whether a gmem folio was direct map=0A=
removed in the first place though. While possible to keep track of this=0A=
information on each individual folio (e.g. via page flags), direct map=0A=
removal is an all-or-nothing property of the entire guest_memfd, so it=0A=
is less error prone to just check the flag stored in the gmem inode's=0A=
private data.  However, by the time ->free_folio() is called,=0A=
folio->mapping might be cleared. To still allow access to the address=0A=
space from which the folio was just removed, pass it in as an additional=0A=
argument to ->free_folio, as the mapping is well-known to all callers.=0A=
=0A=
Link: https://lore.kernel.org/all/15f665b4-2d33-41ca-ac50-fafe24ade32f@redh=
at.com/=0A=
Suggested-by: David Hildenbrand <david@redhat.com>=0A=
Acked-by: David Hildenbrand <david@redhat.com>=0A=
Signed-off-by: Elliot Berman <quic_eberman@quicinc.com>=0A=
[patrick: rewrite shortlog for new usecase]=0A=
Signed-off-by: Patrick Roy <roypat@amazon.co.uk>=0A=
---=0A=
 Documentation/filesystems/locking.rst |  2 +-=0A=
 fs/nfs/dir.c                          | 11 ++++++-----=0A=
 fs/orangefs/inode.c                   |  3 ++-=0A=
 include/linux/fs.h                    |  2 +-=0A=
 mm/filemap.c                          |  9 +++++----=0A=
 mm/secretmem.c                        |  3 ++-=0A=
 mm/vmscan.c                           |  4 ++--=0A=
 virt/kvm/guest_memfd.c                |  3 ++-=0A=
 8 files changed, 21 insertions(+), 16 deletions(-)=0A=

----------------------------------------------------------------------

New:  Direct Map Removal Support for guest_memfd
[PATCH v6 00/11] Direct Map Removal Support for guest_memfd
Author: Roy, Patrick <roypat@amazon.co.uk>

[ based on kvm/next ]=0A=
=0A=
Unmapping virtual machine guest memory from the host kernel's direct map is=
 a=0A=
successful mitigation against Spectre-style transient execution issues: If =
the=0A=
kernel page tables do not contain entries pointing to guest memory, then an=
y=0A=
attempted speculative read through the direct map will necessarily be block=
ed=0A=
by the MMU before any observable microarchitectural side-effects happen. Th=
is=0A=
means that Spectre-gadgets and similar cannot be used to target virtual mac=
hine=0A=
memory. Roughly 60% of speculative execution issues fall into this category=
 [1,=0A=
Table 1].=0A=
=0A=
This patch series extends guest_memfd with the ability to remove its memory=
=0A=
from the host kernel's direct map, to be able to attain the above protectio=
n=0A=
for KVM guests running inside guest_memfd.=0A=
=0A=
Additionally, a Firecracker branch with support for these VMs can be found =
on=0A=
GitHub [2].=0A=
=0A=
For more details, please refer to the v5 cover letter [v5]. No=0A=
substantial changes in design have taken place since.=0A=
=0A=
=3D=3D=3D Changes Since v5 =3D=3D=3D =0A=
=0A=
- Fix up error handling for set_direct_map_[in]valid_noflush() (Mike)=0A=
- Fix capability check for KVM_GUEST_MEMFD_NO_DIRECT_MAP (Mike)=0A=
- Make secretmem_aops static in mm/secretmem.c (Mike)=0A=
- Fixup some more comments in gup.c that referred to secretmem=0A=
  specifically to instead point to AS_NO_DIRECT_MAP (Mike)=0A=
- New patch (PATCH 4/11) to avoid ifdeffery in kvm_gmem_free_folio() (Mike)=
=0A=
- vma_is_no_direct_map() -> vma_has_no_direct_map() rename (David)=0A=
- Squash some patches (David)=0A=
- Fix up const-ness of parameters to new functions in pagemap.h (Fuad)=0A=
=0A=
[1]: https://download.vusec.net/papers/quarantine_raid23.pdf=0A=
[2]: https://github.com/firecracker-microvm/firecracker/tree/feature/secret=
-hiding=0A=
[RFCv1]: https://lore.kernel.org/kvm/20240709132041.3625501-1-roypat@amazon=
.co.uk/=0A=
[RFCv2]: https://lore.kernel.org/kvm/20240910163038.1298452-1-roypat@amazon=
.co.uk/=0A=
[RFCv3]: https://lore.kernel.org/kvm/20241030134912.515725-1-roypat@amazon.=
co.uk/=0A=
[v4]: https://lore.kernel.org/kvm/20250221160728.1584559-1-roypat@amazon.co=
.uk/=0A=
[v5]: https://lore.kernel.org/kvm/20250828093902.2719-1-roypat@amazon.co.uk=
/=0A=
=0A=
Elliot Berman (1):=0A=
  filemap: Pass address_space mapping to ->free_folio()=0A=
=0A=
Patrick Roy (10):=0A=
  arch: export set_direct_map_valid_noflush to KVM module=0A=
  mm: introduce AS_NO_DIRECT_MAP=0A=
  KVM: guest_memfd: Add stub for kvm_arch_gmem_invalidate=0A=
  KVM: guest_memfd: Add flag to remove from direct map=0A=
  KVM: selftests: load elf via bounce buffer=0A=
  KVM: selftests: set KVM_MEM_GUEST_MEMFD in vm_mem_add() if guest_memfd=0A=
    !=3D -1=0A=
  KVM: selftests: Add guest_memfd based vm_mem_backing_src_types=0A=
  KVM: selftests: stuff vm_mem_backing_src_type into vm_shape=0A=
  KVM: selftests: cover GUEST_MEMFD_FLAG_NO_DIRECT_MAP in existing=0A=
    selftests=0A=
  KVM: selftests: Test guest execution from direct map removed gmem=0A=
=0A=
 Documentation/filesystems/locking.rst         |  2 +-=0A=
 Documentation/virt/kvm/api.rst                |  5 ++=0A=
 arch/arm64/include/asm/kvm_host.h             | 12 ++++=0A=
 arch/arm64/mm/pageattr.c                      |  1 +=0A=
 arch/loongarch/mm/pageattr.c                  |  1 +=0A=
 arch/riscv/mm/pageattr.c                      |  1 +=0A=
 arch/s390/mm/pageattr.c                       |  1 +=0A=
 arch/x86/mm/pat/set_memory.c                  |  1 +=0A=
 fs/nfs/dir.c                                  | 11 ++--=0A=
 fs/orangefs/inode.c                           |  3 +-=0A=
 include/linux/fs.h                            |  2 +-=0A=
 include/linux/kvm_host.h                      |  9 +++=0A=
 include/linux/pagemap.h                       | 16 +++++=0A=
 include/linux/secretmem.h                     | 18 ------=0A=
 include/uapi/linux/kvm.h                      |  2 +=0A=
 lib/buildid.c                                 |  4 +-=0A=
 mm/filemap.c                                  |  9 +--=0A=
 mm/gup.c                                      | 19 ++----=0A=
 mm/mlock.c                                    |  2 +-=0A=
 mm/secretmem.c                                | 11 ++--=0A=
 mm/vmscan.c                                   |  4 +-=0A=
 .../testing/selftests/kvm/guest_memfd_test.c  |  2 +=0A=
 .../testing/selftests/kvm/include/kvm_util.h  | 37 ++++++++---=0A=
 .../testing/selftests/kvm/include/test_util.h |  8 +++=0A=
 tools/testing/selftests/kvm/lib/elf.c         |  8 +--=0A=
 tools/testing/selftests/kvm/lib/io.c          | 23 +++++++=0A=
 tools/testing/selftests/kvm/lib/kvm_util.c    | 61 +++++++++++--------=0A=
 tools/testing/selftests/kvm/lib/test_util.c   |  8 +++=0A=
 tools/testing/selftests/kvm/lib/x86/sev.c     |  1 +=0A=
 .../selftests/kvm/pre_fault_memory_test.c     |  1 +=0A=
 .../selftests/kvm/set_memory_region_test.c    | 50 +++++++++++++--=0A=
 .../kvm/x86/private_mem_conversions_test.c    |  7 ++-=0A=
 virt/kvm/guest_memfd.c                        | 56 ++++++++++++++---=0A=
 virt/kvm/kvm_main.c                           |  5 ++=0A=
 34 files changed, 288 insertions(+), 113 deletions(-)=0A=

----------------------------------------------------------------------

New:  PMCR_EL0.N is RAZ/WI. At least a build failes in Ubuntu
[PATCH] PMCR_EL0.N is RAZ/WI. At least a build failes in Ubuntu
Author: Itaru Kitayama <itaru.kitayama@linux.dev>

Signed-off-by: Itaru Kitayama <itaru.kitayama@fujitsu.com>
---
Seen a build failure with old Ubuntu 22.04 LTS, while the latest release
has no build issue, a write to the bit fields is RAZ/WI, remove the
function.
---
 tools/testing/selftests/kvm/arm64/vpmu_counter_access.c | 6 ------
 1 file changed, 6 deletions(-)

----------------------------------------------------------------------

New:  vhost-net: unbreak busy polling
[PATCH net 1/2] vhost-net: unbreak busy polling
Author: Jason Wang <jasowang@redhat.com>

Commit 67a873df0c41 ("vhost: basic in order support") pass the number
of used elem to vhost_net_rx_peek_head_len() to make sure it can
signal the used correctly before trying to do busy polling. But it
forgets to clear the count, this would cause the count run out of sync
with handle_rx() and break the busy polling.

Fixing this by passing the pointer of the count and clearing it after
the signaling the used.

Cc: stable@vger.kernel.org
Fixes: 67a873df0c41 ("vhost: basic in order support")
Signed-off-by: Jason Wang <jasowang@redhat.com>
---
 drivers/vhost/net.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Remove outdated comments and code in kvm_on_user_return()
[PATCH] KVM: x86: Remove outdated comments and code in kvm_on_user_return()
Author: Hou Wenlong <houwenlong.hwl@antgroup.com>

The commit a377ac1cd9d7b ("x86/entry: Move user return notifier out of
loop") moved fire_user_return_notifiers() into the section with
interrupts disabled, so the callback kvm_on_user_return() cannot be
interrupted by kvm_arch_disable_virtualization_cpu() now. Therefore,
remove the outdated comments and local_irq_save()/local_irq_restore()
code in kvm_on_user_return().

Signed-off-by: Hou Wenlong <houwenlong.hwl@antgroup.com>
---
 arch/x86/kvm/x86.c | 16 +++++-----------
 1 file changed, 5 insertions(+), 11 deletions(-)

----------------------------------------------------------------------

