From 43f10d1dc to 47ba97068
KVM mailing list update from 43f10d1dc to 47ba97068

Top 15 contributor Email domains (Based on Email Body)

     21 google.com
     20 linaro.org
     14 redhat.com
      6 kernel.org
      2 intel.com
      2 glider.be
      1 linux.ibm.com
      1 kylinos.cn
      1 huawei.com

Top 15 contributors (Based on Email Body)

     17  Sagi Shahar <sagis@google.com>
     15  Richard Henderson <richard.henderson@linaro.org>
      8  Thomas Huth <thuth@redhat.com>
      6  "Naveen N Rao (AMD)" <naveen@kernel.org>
      2  Stefan Hajnoczi <stefanha@redhat.com>
      2  Paolo Bonzini <pbonzini@redhat.com>
      2  Manos Pitsidianakis <manos.pitsidianakis@linaro.org>
      2  Isaku Yamahata <isaku.yamahata@intel.com>
      2  Geert Uytterhoeven <geert+renesas@glider.be>
      2  Erdem Aktas <erdemaktas@google.com>
      2  Ackerley Tng <ackerleytng@google.com>
      1  Xin Wang <wangxinxin.wang@huawei.com>
      1  =?UTF-8?q?Alex=20Benn=C3=A9e?= <alex.bennee@linaro.org>
      1  Peter Maydell <peter.maydell@linaro.org>
      1  Marc-André Lureau <marcandre.lureau@redhat.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: SVM: Stop warning if x2AVIC feature bit alone is enabled
[RFC PATCH v2 1/5] KVM: SVM: Stop warning if x2AVIC feature bit alone is enabled
Author: Naveen N Rao (AMD) <naveen@kernel.org>

A platform can choose to disable AVIC by turning off the AVIC CPUID
feature bit, while keeping x2AVIC CPUID feature bit enabled to indicate
AVIC support for the x2APIC MSR interface. Since this is a valid
configuration, stop printing a warning.

Signed-off-by: Naveen N Rao (AMD) <naveen@kernel.org>
---
 arch/x86/kvm/svm/avic.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

----------------------------------------------------------------------

New:  KVM: SVM: Enable AVIC by default on Zen 4+
[RFC PATCH v2 0/5] KVM: SVM: Enable AVIC by default on Zen 4+
Author: Naveen N Rao (AMD) <naveen@kernel.org>

This is v2 of the RFC posted here:
http://lkml.kernel.org/r/20250626145122.2228258-1-naveen@kernel.org

I have split up the patches and incorporated feedback on the RFC. This 
still depends on at least two other fixes:
- Reducing SVM IRQ Window inhibit lock contention: 
  http://lkml.kernel.org/r/cover.1752819570.git.naveen@kernel.org
- Fixing TPR handling when AVIC is active: 
  http://lkml.kernel.org/r/cover.1756139678.git.maciej.szmigiero@oracle.com


- Naveen


Naveen N Rao (AMD) (5):
  KVM: SVM: Stop warning if x2AVIC feature bit alone is enabled
  KVM: SVM: Simplify the message printed with 'force_avic'
  KVM: SVM: Move all AVIC setup to avic_hardware_setup()
  KVM: SVM: Move 'force_avic' module parameter to svm.c
  KVM: SVM: Enable AVIC by default from Zen 4

 arch/x86/kvm/svm/svm.h  |  3 ++-
 arch/x86/kvm/svm/avic.c | 48 ++++++++++++++++++-----------------------
 arch/x86/kvm/svm/svm.c  | 22 +++++++++++++------
 3 files changed, 38 insertions(+), 35 deletions(-)

----------------------------------------------------------------------

New:  uio: uio_pdrv_genirq: Remove dummy PM handling
[PATCH] uio: uio_pdrv_genirq: Remove dummy PM handling
Author: Geert Uytterhoeven <geert+renesas@glider.be>

Since commit 63d00be69348fda4 ("PM: runtime: Allow unassigned
->runtime_suspend|resume callbacks"), unassigned
.runtime_{suspend,resume}() callbacks are treated the same as dummy
callbacks that just return zero.

As the Runtime PM callbacks were the only driver-specific PM handling,
all PM handling can be removed.

Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
---
Compile-tested only.
---
 drivers/uio/uio_pdrv_genirq.c | 23 -----------------------
 1 file changed, 23 deletions(-)

----------------------------------------------------------------------

New:  uio: uio_dmem_genirq: Remove dummy PM handling
[PATCH] uio: uio_dmem_genirq: Remove dummy PM handling
Author: Geert Uytterhoeven <geert+renesas@glider.be>

Since commit 63d00be69348fda4 ("PM: runtime: Allow unassigned
->runtime_suspend|resume callbacks"), unassigned
.runtime_{suspend,resume}() callbacks are treated the same as dummy
callbacks that just return zero.

As the Runtime PM callbacks were the only driver-specific PM handling,
all PM handling can be removed.

Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
---
Compile-tested only.
---
 drivers/uio/uio_dmem_genirq.c | 23 -----------------------
 1 file changed, 23 deletions(-)

----------------------------------------------------------------------

New:  KVM: s390: improve interrupt cpu for wakeup
[PATCH] KVM: s390: improve interrupt cpu for wakeup
Author: Christian Borntraeger <borntraeger@linux.ibm.com>

Turns out that picking an idle CPU for floating interrupts has some
negative side effects. The guest will keep the IO workload on its CPU
and rather use an IPI from the interrupt CPU instead of moving workload.
For example a guest with 2 vCPUss and 1 fio process might run that fio on
vcpu1. If after diag500 both vCPUs are idle then vcpu0 is woken up. The
guest will then do an IPI from vcpu0 to vcpu1.

So lets change the heuristics and prefer the last CPU that went to
sleep. This one is likely still in halt polling and can be woken up
quickly.

This patch shows significant improvements in terms of bandwidth or
cpu consumption for fio and uperf workloads and seems to be a net
win.

Signed-off-by: Christian Borntraeger <borntraeger@linux.ibm.com>
---
 arch/s390/include/asm/kvm_host.h |  2 +-
 arch/s390/kvm/interrupt.c        | 20 +++++++++-----------
 2 files changed, 10 insertions(+), 12 deletions(-)

----------------------------------------------------------------------

New:  arm_load_dtb cleanups
[PATCH v2 000/281] arm_load_dtb cleanups
Author: Alex Bennée <alex.bennee@linaro.org>


----------------------------------------------------------------------

New:  target/i386: Add support for save/load of exception error code
[PATCH v2 001/281] target/i386: Add support for save/load of exception error code
Author: Alex Bennée <alex.bennee@linaro.org>


For now, qemu save/load CPU exception info(such as exception_nr and
has_error_code), while the exception error_code is ignored. This will
cause the dest hypervisor reinject a vCPU exception with error_code(0),
potentially causing a guest kernel panic.

For instance, if src VM stopped with an user-mode write #PF (error_code 6),
the dest hypervisor will reinject an #PF with error_code(0) when vCPU resume,
then guest kernel panic as:
  BUG: unable to handle page fault for address: 00007f80319cb010
  #PF: supervisor read access in user mode
  #PF: error_code(0x0000) - not-present page
  RIP: 0033:0x40115d

To fix it, support save/load exception error_code.

Signed-off-by: Xin Wang <wangxinxin.wang@huawei.com>
Link: https://lore.kernel.org/r/20250819145834.3998-1-wangxinxin.wang@huawei.com
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 target/i386/machine.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

----------------------------------------------------------------------

New:  KVM: selftests: Allocate pgd in virt_map() as necessary
[PATCH v10 01/21] KVM: selftests: Allocate pgd in virt_map() as necessary
Author: Sagi Shahar <sagis@google.com>

If virt_map() is called before any call to ____vm_vaddr_alloc() it
will create the mapping using an invalid pgd.

Add call to virt_pgd_alloc() as part of virt_map() before creating the
mapping, similarly to ____vm_vaddr_alloc()

Reviewed-by: Ira Weiny <ira.weiny@intel.com>
Reviewed-by: Binbin Wu <binbin.wu@linux.intel.com>
Signed-off-by: Sagi Shahar <sagis@google.com>
---
 tools/testing/selftests/kvm/lib/kvm_util.c | 1 +
 1 file changed, 1 insertion(+)

----------------------------------------------------------------------

New:  TDX KVM selftests
[PATCH v10 00/21] TDX KVM selftests
Author: Sagi Shahar <sagis@google.com>

This is v10 of the TDX selftests.

This series is based on v6.17-rc4 and has a dependency on
"KVM: TDX: Force split irqchip for TDX at irqchip creation time" [1]

Changes from v9 [2]:
- Rebased on top of v6.17-rc4.
- Addressed the comments from v9.
- Removed special handling for split irqchip in the test code in favor
  for the kvm fix in [1].
- Removed outdated support for VM memory not backed by guest_memfd.
- Split "KVM: selftests: Hook TDX support to vm and vcpu creation" into
  4 separate patches.

[1] https://lore.kernel.org/lkml/20250904062007.622530-1-sagis@google.com/
[2] https://lore.kernel.org/lkml/20250821042915.3712925-1-sagis@google.com/

Ackerley Tng (2):
  KVM: selftests: Add helpers to init TDX memory and finalize VM
  KVM: selftests: Add ucall support for TDX

Erdem Aktas (2):
  KVM: selftests: Add TDX boot code
  KVM: selftests: Add support for TDX TDCALL from guest

Isaku Yamahata (2):
  KVM: selftests: Update kvm_init_vm_address_properties() for TDX
  KVM: selftests: TDX: Use KVM_TDX_CAPABILITIES to validate TDs'
    attribute configuration

Sagi Shahar (15):
  KVM: selftests: Allocate pgd in virt_map() as necessary
  KVM: selftests: Expose functions to get default sregs values
  KVM: selftests: Expose function to allocate guest vCPU stack
  KVM: selftests: Expose segment definitons to assembly files
  KVM: selftests: Add kbuild definitons
  KVM: selftests: Define structs to pass parameters to TDX boot code
  KVM: selftests: Set up TDX boot code region
  KVM: selftests: Set up TDX boot parameters region
  KVM: selftests: Add helper to initialize TDX VM
  KVM: selftests: Call TDX init when creating a new TDX vm
  KVM: selftests: Setup memory regions for TDX on vm creation
  KVM: selftests: Call KVM_TDX_INIT_VCPU when creating a new TDX vcpu
  KVM: selftests: Set entry point for TDX guest code
  KVM: selftests: Add wrapper for TDX MMIO from guest
  KVM: selftests: Add TDX lifecycle test

 tools/include/linux/kbuild.h                  |  18 +
 tools/testing/selftests/kvm/Makefile.kvm      |  32 ++
 .../selftests/kvm/include/x86/processor.h     |  35 ++
 .../selftests/kvm/include/x86/processor_asm.h |  12 +
 .../selftests/kvm/include/x86/tdx/td_boot.h   |  74 ++++
 .../kvm/include/x86/tdx/td_boot_asm.h         |  16 +
 .../selftests/kvm/include/x86/tdx/tdcall.h    |  34 ++
 .../selftests/kvm/include/x86/tdx/tdx.h       |  14 +
 .../selftests/kvm/include/x86/tdx/tdx_util.h  |  86 +++++
 .../testing/selftests/kvm/include/x86/ucall.h |   4 +-
 tools/testing/selftests/kvm/lib/kvm_util.c    |  10 +-
 .../testing/selftests/kvm/lib/x86/processor.c |  91 +++--
 .../selftests/kvm/lib/x86/tdx/td_boot.S       |  60 +++
 .../kvm/lib/x86/tdx/td_boot_offsets.c         |  21 ++
 .../selftests/kvm/lib/x86/tdx/tdcall.S        |  93 +++++
 .../kvm/lib/x86/tdx/tdcall_offsets.c          |  16 +
 tools/testing/selftests/kvm/lib/x86/tdx/tdx.c |  23 ++
 .../selftests/kvm/lib/x86/tdx/tdx_util.c      | 354 ++++++++++++++++++
 tools/testing/selftests/kvm/lib/x86/ucall.c   |  45 ++-
 tools/testing/selftests/kvm/x86/tdx_vm_test.c |  31 ++
 20 files changed, 1032 insertions(+), 37 deletions(-)

----------------------------------------------------------------------

New:  LoongArch: KVM: remove unused returns.
[PATCH] LoongArch: KVM: remove unused returns.
Author: cuitao <cuitao@kylinos.cn>

The default branch has already handled all undefined cases,
so the final return statement is redundant.

Signed-off-by: cuitao <cuitao@kylinos.cn>
---
 arch/loongarch/kvm/exit.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

----------------------------------------------------------------------

