From 9fa663072 to 731b1ebaa
KVM mailing list update from 9fa663072 to 731b1ebaa

Top 15 contributor Email domains (Based on Email Body)

     19 linaro.org
     11 bytedance.com
      2 amazon.com=0A=
      1 linux.alibaba.com
      1 amazon.de
      1 amazon.co.uk

Top 15 contributors (Based on Email Body)

     19  =?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <philmd@linaro.org>
     11  Xu Lu <luxu.kernel@bytedance.com>
      2  Nikita Kalyazin <kalyazin@amazon.com>=0A=
      1  Maximilian Dittgen <mdittgen@amazon.de>
      1  "Kalyazin, Nikita" <kalyazin@amazon.co.uk>
      1  Fangyu Yu <fangyu.yu@linux.alibaba.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: guest_memfd: add generic population via write
[PATCH v6 1/2] KVM: guest_memfd: add generic population via write
Author: Kalyazin, Nikita <kalyazin@amazon.co.uk>

=0A=
write syscall populates guest_memfd with user-supplied data in a generic=0A=
way, ie no vendor-specific preparation is performed.  If the request is=0A=
not page-aligned, the remaining bytes are initialised to 0.=0A=
=0A=
write is only supported for non-CoCo setups where guest memory is not=0A=
hardware-encrypted.=0A=
=0A=
Signed-off-by: Nikita Kalyazin <kalyazin@amazon.com>=0A=
---=0A=
 virt/kvm/guest_memfd.c | 48 ++++++++++++++++++++++++++++++++++++++++++=0A=
 1 file changed, 48 insertions(+)=0A=

----------------------------------------------------------------------

New:  KVM: guest_memfd: use write for population
[PATCH v6 0/2] KVM: guest_memfd: use write for population
Author: Kalyazin, Nikita <kalyazin@amazon.co.uk>

[ based on kvm/next ]=0A=
=0A=
Implement guest_memfd population via the write syscall.=0A=
This is useful in non-CoCo use cases where the host can access guest=0A=
memory.  Even though the same can also be achieved via userspace mapping=0A=
and memcpying from userspace, write provides a more performant option=0A=
because it does not need to set page tables and it does not cause a page=0A=
fault for every page like memcpy would.  Note that memcpy cannot be=0A=
accelerated via MADV_POPULATE_WRITE as it is not supported by=0A=
guest_memfd and relies on GUP.=0A=
=0A=
Populating 512MiB of guest_memfd on a x86 machine:=0A=
 - via memcpy: 436 ms=0A=
 - via write:  202 ms (-54%)=0A=
=0A=
The write syscall support is conditional on kvm_gmem_supports_mmap.=0A=
When in-place shared/private conversion is supported, write should only=0A=
be allowed on shared pages.=0A=
=0A=
v6:=0A=
 - Make write support conditional on mmap support instead of relying on=0A=
   the up-to-date flag to decide whether writing to a page is allowed=0A=
 - James: Remove depenendencies on folio_test_large=0A=
 - James: Remove page alignment restriction=0A=
 - James: Formatting fixes=0A=
=0A=
v5:=0A=
 - https://lore.kernel.org/kvm/20250902111951.58315-1-kalyazin@amazon.com/=
=0A=
 - Replace the call to the unexported filemap_remove_folio with=0A=
   zeroing the bytes that could not be copied=0A=
 - Fix checkpatch findings=0A=
=0A=
v4:=0A=
 - https://lore.kernel.org/kvm/20250828153049.3922-1-kalyazin@amazon.com=0A=
 - Switch from implementing the write callback to write_iter=0A=
 - Remove conditional compilation=0A=
=0A=
v3:=0A=
 - https://lore.kernel.org/kvm/20250303130838.28812-1-kalyazin@amazon.com=
=0A=
 - David/Mike D: Only compile support for the write syscall if=0A=
   CONFIG_KVM_GMEM_SHARED_MEM (now gone) is enabled.=0A=
v2:=0A=
 - https://lore.kernel.org/kvm/20241129123929.64790-1-kalyazin@amazon.com=
=0A=
 - Switch from an ioctl to the write syscall to implement population=0A=
=0A=
v1:=0A=
 - https://lore.kernel.org/kvm/20241024095429.54052-1-kalyazin@amazon.com=
=0A=
=0A=
Nikita Kalyazin (2):=0A=
  KVM: guest_memfd: add generic population via write=0A=
  KVM: selftests: update guest_memfd write tests=0A=
=0A=
 .../testing/selftests/kvm/guest_memfd_test.c  | 51 ++++++++++++++++---=0A=
 virt/kvm/guest_memfd.c                        | 49 ++++++++++++++++++=0A=
 2 files changed, 94 insertions(+), 6 deletions(-)=0A=

----------------------------------------------------------------------

New:  RISC-V: KVM: Remove automatic I/O mapping for VM_PFNMAP
[PATCH] RISC-V: KVM: Remove automatic I/O mapping for VM_PFNMAP
Author: fangyu.yu <fangyu.yu@linux.alibaba.com>


As of commit aac6db75a9fc ("vfio/pci: Use unmap_mapping_range()"),
vm_pgoff may no longer guaranteed to hold the PFN for VM_PFNMAP
regions. Using vma->vm_pgoff to derive the HPA here may therefore
produce incorrect mappings.

Instead, I/O mappings for such regions can be established on-demand
during g-stage page faults, making the upfront ioremap in this path
is unnecessary.

Fixes: 9d05c1fee837 ("RISC-V: KVM: Implement stage2 page table programming")
Signed-off-by: Fangyu Yu <fangyu.yu@linux.alibaba.com>
---
 arch/riscv/kvm/mmu.c | 20 +-------------------
 1 file changed, 1 insertion(+), 19 deletions(-)

----------------------------------------------------------------------

New:  hw/ppc/spapr: Remove deprecated pseries-3.0 machine
[PATCH 01/18] hw/ppc/spapr: Remove deprecated pseries-3.0 machine
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

This machine has been supported for a period of more than 6 years.
According to our versioned machine support policy (see commit
ce80c4fa6ff "docs: document special exception for machine type
deprecation & removal") it can now be removed.

Signed-off-by: Philippe Mathieu-Daudé <philmd@linaro.org>
---
 hw/ppc/spapr.c | 18 ------------------
 1 file changed, 18 deletions(-)

----------------------------------------------------------------------

New:  hw/ppc/spapr: Remove deprecated pseries-3.0 -> pseries-4.2 machines
[PATCH 00/18] hw/ppc/spapr: Remove deprecated pseries-3.0 -> pseries-4.2 machines
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

Remove the deprecated pseries-3.0 up to pseries-4.2 machines,
which are older than 6 years. Remove resulting dead code.

Philippe Mathieu-Daudé (18):
  hw/ppc/spapr: Remove deprecated pseries-3.0 machine
  hw/ppc/spapr: Remove SpaprMachineClass::spapr_irq_xics_legacy field
  hw/ppc/spapr: Remove SpaprMachineClass::legacy_irq_allocation field
  hw/ppc/spapr: Remove SpaprMachineClass::nr_xirqs field
  hw/ppc/spapr: Remove deprecated pseries-3.1 machine
  hw/ppc/spapr: Remove SpaprMachineClass::broken_host_serial_model field
  target/ppc/kvm: Remove kvmppc_get_host_serial() as unused
  target/ppc/kvm: Remove kvmppc_get_host_model() as unused
  hw/ppc/spapr: Remove SpaprMachineClass::dr_phb_enabled field
  hw/ppc/spapr: Remove SpaprMachineClass::update_dt_enabled field
  hw/ppc/spapr: Remove deprecated pseries-4.0 machine
  hw/ppc/spapr: Remove SpaprMachineClass::pre_4_1_migration field
  hw/ppc/spapr: Remove SpaprMachineClass::phb_placement callback
  hw/ppc/spapr: Remove deprecated pseries-4.1 machine
  hw/ppc/spapr: Remove SpaprMachineClass::smp_threads_vsmt field
  hw/ppc/spapr: Remove SpaprMachineClass::linux_pci_probe field
  hw/ppc/spapr: Remove deprecated pseries-4.2 machine
  hw/ppc/spapr: Remove SpaprMachineClass::rma_limit field

 include/hw/ppc/spapr.h     |  16 --
 include/hw/ppc/spapr_irq.h |   1 -
 target/ppc/kvm_ppc.h       |  12 --
 hw/ppc/spapr.c             | 298 ++++++++-----------------------------
 hw/ppc/spapr_caps.c        |   6 -
 hw/ppc/spapr_events.c      |  20 +--
 hw/ppc/spapr_hcall.c       |   5 -
 hw/ppc/spapr_irq.c         |  36 +----
 hw/ppc/spapr_pci.c         |  32 +---
 hw/ppc/spapr_vio.c         |   9 --
 target/ppc/kvm.c           |  11 --
 11 files changed, 75 insertions(+), 371 deletions(-)

----------------------------------------------------------------------

New:  riscv: Add ISA extension parsing for Zalasr
[PATCH v4 01/10] riscv: Add ISA extension parsing for Zalasr
Author: Xu Lu <luxu.kernel@bytedance.com>

Add parsing for Zalasr ISA extension.

Signed-off-by: Xu Lu <luxu.kernel@bytedance.com>
---
 arch/riscv/include/asm/hwcap.h | 1 +
 arch/riscv/kernel/cpufeature.c | 1 +
 2 files changed, 2 insertions(+)

----------------------------------------------------------------------

New:  riscv: Add Zalasr ISA extension support
[PATCH v4 00/10] riscv: Add Zalasr ISA extension support
Author: Xu Lu <luxu.kernel@bytedance.com>

This patch adds support for the Zalasr ISA extension, which supplies the
real load acquire/store release instructions.

The specification can be found here:
https://github.com/riscv/riscv-zalasr/blob/main/chapter2.adoc

This patch seires has been tested with ltp on Qemu with Brensan's zalasr
support patch[1].

Some false positive spacing error happens during patch checking. Thus I
CCed maintainers of checkpatch.pl as well.

[1] https://lore.kernel.org/all/CAGPSXwJEdtqW=nx71oufZp64nK6tK=0rytVEcz4F-gfvCOXk2w@mail.gmail.com/

v4:
 - Apply acquire/release semantics to arch_atomic operations. Thanks
 to Andrea.

v3:
 - Apply acquire/release semantics to arch_xchg/arch_cmpxchg operations
 so as to ensure FENCE.TSO ordering between operations which precede the
 UNLOCK+LOCK sequence and operations which follow the sequence. Thanks
 to Andrea.
 - Support hwprobe of Zalasr.
 - Allow Zalasr extensions for Guest/VM.

v2:
 - Adjust the order of Zalasr and Zalrsc in dt-bindings. Thanks to
 Conor.

Xu Lu (10):
  riscv: Add ISA extension parsing for Zalasr
  dt-bindings: riscv: Add Zalasr ISA extension description
  riscv: hwprobe: Export Zalasr extension
  riscv: Introduce Zalasr instructions
  riscv: Apply Zalasr to smp_load_acquire/smp_store_release
  riscv: Apply acquire/release semantics to arch_xchg/arch_cmpxchg
    operations
  riscv: Apply acquire/release semantics to arch_atomic operations
  riscv: Remove arch specific __atomic_acquire/release_fence
  RISC-V: KVM: Allow Zalasr extensions for Guest/VM
  RISC-V: KVM: selftests: Add Zalasr extensions to get-reg-list test

 Documentation/arch/riscv/hwprobe.rst          |   5 +-
 .../devicetree/bindings/riscv/extensions.yaml |   5 +
 arch/riscv/include/asm/atomic.h               |  70 ++++++++-
 arch/riscv/include/asm/barrier.h              |  91 +++++++++--
 arch/riscv/include/asm/cmpxchg.h              | 144 +++++++++---------
 arch/riscv/include/asm/fence.h                |   4 -
 arch/riscv/include/asm/hwcap.h                |   1 +
 arch/riscv/include/asm/insn-def.h             |  79 ++++++++++
 arch/riscv/include/uapi/asm/hwprobe.h         |   1 +
 arch/riscv/include/uapi/asm/kvm.h             |   1 +
 arch/riscv/kernel/cpufeature.c                |   1 +
 arch/riscv/kernel/sys_hwprobe.c               |   1 +
 arch/riscv/kvm/vcpu_onereg.c                  |   2 +
 .../selftests/kvm/riscv/get-reg-list.c        |   4 +
 14 files changed, 314 insertions(+), 95 deletions(-)

----------------------------------------------------------------------

