From 223745367 to 3f2959cdb
KVM mailing list update from 223745367 to 3f2959cdb

Top 15 contributor Email domains (Based on Email Body)

     18 intel.com
      8 inspur.com
      4 zytor.com
      3 amd.com
      2 loongson.cn
      1 arm.com

Top 15 contributors (Based on Email Body)

     18  Xin Li <xin3.li@intel.com>
      8  Chu Guangqing <chuguangqing@inspur.com>
      4  "Xin Li (Intel)" <xin@zytor.com>
      3  John Allen <john.allen@amd.com>
      2  Bibo Mao <maobibo@loongson.cn>
      1  Leonardo Bras <leo.bras@arm.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  x86/boot: Move boot_*msr helpers to asm/shared/msr.h
[PATCH v4 1/2] x86/boot: Move boot_*msr helpers to asm/shared/msr.h
Author: John Allen <john.allen@amd.com>

The boot_rdmsr and boot_wrmsr helpers used to reduce the need for inline
assembly in the boot kernel can also be useful in code shared by boot
and run-time kernel code. Move these helpers to asm/shared/msr.h and
rename to raw_rdmsr and raw_wrmsr to indicate that these may also be
used outside of the boot kernel.

Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Signed-off-by: John Allen <john.allen@amd.com>
---
 arch/x86/boot/compressed/sev.c    |  7 ++++---
 arch/x86/boot/compressed/sev.h    |  6 +++---
 arch/x86/boot/cpucheck.c          | 16 ++++++++--------
 arch/x86/boot/msr.h               | 26 --------------------------
 arch/x86/include/asm/shared/msr.h | 15 +++++++++++++++
 5 files changed, 30 insertions(+), 40 deletions(-)

----------------------------------------------------------------------

New:  Support for SEV-ES guest shadow stack
[PATCH v4 0/2] Support for SEV-ES guest shadow stack
Author: John Allen <john.allen@amd.com>

For shadow stack support in SVM when using SEV-ES, the guest kernel
needs to save XSS to the GHCB in order for the hypervisor to determine
the XSAVES save area size.
---
v4:
  - Use CPUID_LEAF_XSTATE instead of open coding 0xd.
v3:
  - Only CPUID.0xD.1 consumes XSS. Limit including XSS in GHCB for this
    case.
v2:
  - Update changelog for patch 2/2

John Allen (2):
  x86/boot: Move boot_*msr helpers to asm/shared/msr.h
  x86/sev-es: Include XSS value in GHCB CPUID request

 arch/x86/boot/compressed/sev.c    |  7 ++++---
 arch/x86/boot/compressed/sev.h    |  6 +++---
 arch/x86/boot/cpucheck.c          | 16 ++++++++--------
 arch/x86/boot/msr.h               | 26 --------------------------
 arch/x86/coco/sev/vc-shared.c     | 13 +++++++++++++
 arch/x86/include/asm/shared/msr.h | 15 +++++++++++++++
 arch/x86/include/asm/svm.h        |  1 +
 7 files changed, 44 insertions(+), 40 deletions(-)

----------------------------------------------------------------------

New:  doc/kvm/api: Fix VM exit code for full dirty ring
[PATCH 1/1] doc/kvm/api: Fix VM exit code for full dirty ring
Author: Leonardo Bras <leo.bras@arm.com>

While reading the documentation, I saw a exit code I could not grep for, to
figure out it has a slightly different name.

Fix that name in documentation so it points to the right exit code.

Signed-off-by: Leonardo Bras <leo.bras@arm.com>
---
 Documentation/virt/kvm/api.rst | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  LoongArch: KVM: Use 64-bit register definition with eiointc
[PATCH] LoongArch: KVM: Use 64-bit register definition with eiointc
Author: Bibo Mao <maobibo@loongson.cn>

With in-kernel emulated eiointc driver, hardware register can be
accessed by different size, there is reg_u8/reg_u16/reg_u32/reg_u64
union type with eiointc register.

Here use 64-bit type with register definition and remove union type
since most registers are accessed with 64-bit method. And it makes
eiointc emulated driver simpler.

Signed-off-by: Bibo Mao <maobibo@loongson.cn>
---
 arch/loongarch/include/asm/kvm_eiointc.h | 55 +++------------
 arch/loongarch/kvm/intc/eiointc.c        | 89 +++++++++++++-----------
 2 files changed, 57 insertions(+), 87 deletions(-)

----------------------------------------------------------------------

New:  LoongArch: KVM: Fix max supported vCPUs set with eiointc
[PATCH] LoongArch: KVM: Fix max supported vCPUs set with eiointc
Author: Bibo Mao <maobibo@loongson.cn>

VM fails to boot with 256 vCPUs, the detailed command is
qemu-system-loongarch64 -smp 256 and there is error reported as follows:
  KVM_LOONGARCH_EXTIOI_INIT_NUM_CPU failed: Invalid argument

There is typo issue in function kvm_eiointc_ctrl_access() when set
max supported vCPUs.

Cc: stable@vger.kernel.org
Fixes: 47256c4c8b1b ("LoongArch: KVM: Avoid copy_*_user() with lock hold in kvm_eiointc_ctrl_access()")

Signed-off-by: Bibo Mao <maobibo@loongson.cn>
---
 arch/loongarch/kvm/intc/eiointc.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  Some spelling error fixes in samples directory
[PATCH v2 0/1] Some spelling error fixes in samples directory
Author: Chu Guangqing <chuguangqing@inspur.com>

Fixes for some spelling errors in samples directory

Chu Guangqing (1):
  samples/bpf: Fix spelling typo in samples/bpf

 samples/bpf/do_hbm_test.sh  | 2 +-
 samples/bpf/hbm.c           | 4 ++--
 samples/bpf/tcp_cong_kern.c | 2 +-
 samples/bpf/tracex1.bpf.c   | 2 +-
 samples/vfio-mdev/mtty.c    | 2 +-
 5 files changed, 6 insertions(+), 6 deletions(-)

----------------------------------------------------------------------

New:  samples/bpf: Fix spelling typo in samples/bpf
[PATCH v2 1/1] samples/bpf: Fix spelling typo in samples/bpf
Author: Chu Guangqing <chuguangqing@inspur.com>

do_hbm_test.sh:
The comment incorrectly used "upcomming" instead of "upcoming".

hbm.c
The comment incorrectly used "Managment" instead of "Management".
The comment incorrectly used "Currrently" instead of "Currently".

tcp_cong_kern.c
The comment incorrectly used "deteremined" instead of "determined".

tracex1.bpf.c
The comment incorrectly used "loobpack" instead of "loopback".

mtty.c
The comment incorrectly used "atleast" instead of "at least".

Signed-off-by: Chu Guangqing <chuguangqing@inspur.com>
---
 samples/bpf/do_hbm_test.sh  | 2 +-
 samples/bpf/hbm.c           | 4 ++--
 samples/bpf/tcp_cong_kern.c | 2 +-
 samples/bpf/tracex1.bpf.c   | 2 +-
 samples/vfio-mdev/mtty.c    | 2 +-
 5 files changed, 6 insertions(+), 6 deletions(-)

----------------------------------------------------------------------

Exist: [PATCH v2 0/1] Some spelling error fixes in samples directory
 Skip: [PATCH 0/5] Some spelling error fixes in samples directory
New:  samples/bpf: Fix a spelling typo in do_hbm_test.sh
[PATCH 1/5] samples/bpf: Fix a spelling typo in do_hbm_test.sh
Author: Chu Guangqing <chuguangqing@inspur.com>

The comment incorrectly used "upcomming" instead of "upcoming".

Signed-off-by: Chu Guangqing <chuguangqing@inspur.com>
---
 samples/bpf/do_hbm_test.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: VMX: Add support for the secondary VM exit controls
[PATCH v8 01/21] KVM: VMX: Add support for the secondary VM exit controls
Author: Xin Li (Intel) <xin@zytor.com>


Always load the secondary VM exit controls to prepare for FRED enabling.

Signed-off-by: Xin Li <xin3.li@intel.com>
Signed-off-by: Xin Li (Intel) <xin@zytor.com>
Tested-by: Xuelian Guo <xuelian.guo@intel.com>
---

Change in v5:
* Add TB from Xuelian Guo.

Changes in v4:
* Fix clearing VM_EXIT_ACTIVATE_SECONDARY_CONTROLS (Chao Gao).
* Check VM exit/entry consistency based on the new macro from Sean
  Christopherson.

Change in v3:
* Do FRED controls consistency checks in the VM exit/entry consistency
  check framework (Sean Christopherson).

Change in v2:
* Always load the secondary VM exit controls (Sean Christopherson).
---
 arch/x86/include/asm/msr-index.h |  1 +
 arch/x86/include/asm/vmx.h       |  3 +++
 arch/x86/kvm/vmx/capabilities.h  |  9 ++++++++-
 arch/x86/kvm/vmx/vmcs.h          |  1 +
 arch/x86/kvm/vmx/vmx.c           | 29 +++++++++++++++++++++++++++--
 arch/x86/kvm/vmx/vmx.h           |  7 ++++++-
 6 files changed, 46 insertions(+), 4 deletions(-)

----------------------------------------------------------------------

New:  Enable FRED with KVM VMX
[PATCH v8 00/21] Enable FRED with KVM VMX
Author: Xin Li (Intel) <xin@zytor.com>

This patch set enables the Intel flexible return and event delivery
(FRED) architecture with KVM VMX to allow guests to utilize FRED.

The FRED architecture defines simple new transitions that change
privilege level (ring transitions). The FRED architecture was
designed with the following goals:

1) Improve overall performance and response time by replacing event
   delivery through the interrupt descriptor table (IDT event
   delivery) and event return by the IRET instruction with lower
   latency transitions.

2) Improve software robustness by ensuring that event delivery
   establishes the full supervisor context and that event return
   establishes the full user context.

The new transitions defined by the FRED architecture are FRED event
delivery and, for returning from events, two FRED return instructions.
FRED event delivery can effect a transition from ring 3 to ring 0, but
it is used also to deliver events incident to ring 0. One FRED
instruction (ERETU) effects a return from ring 0 to ring 3, while the
other (ERETS) returns while remaining in ring 0. Collectively, FRED
event delivery and the FRED return instructions are FRED transitions.


Intel VMX architecture is extended to run FRED guests, and the major
changes are:

1) New VMCS fields for FRED context management, which includes two new
event data VMCS fields, eight new guest FRED context VMCS fields and
eight new host FRED context VMCS fields.

2) VMX nested-exception support for proper virtualization of stack
levels introduced with FRED architecture.

Search for the latest FRED spec in most search engines with this search
pattern:

  site:intel.com FRED (flexible return and event delivery) specification


Although FRED and CET supervisor shadow stacks are independent CPU
features, FRED unconditionally includes FRED shadow stack pointer
MSRs IA32_FRED_SSP[0123], and IA32_FRED_SSP0 is just an alias of the
CET MSR IA32_PL0_SSP.  IOW, the state management of MSR IA32_PL0_SSP
becomes an overlap area, and Sean requested that FRED virtualization
to land after CET virtualization [1].

Since CET virtualization has landed with the release of v6.18-rc1, I'm
submitting v8 of FRED virtualization.

Changes in v8:
* Rebased on v6.18-rc1.
* Relocate secondary_vm_exit_controls to the last u64 padding field in
  vmcs12 (Isaku).
* Make the newly added FRED fields 64-bit aligned in vmcs12 (Isaku).
* Remove changes to Documentation/virt/kvm/x86/nested-vmx.rst.
* Update KVM_CAP_EXCEPTION_NESTED_FLAG, as the number used in v7 is
  occupied by another new cap.


Following is the link to v7 of this patch set:
https://lore.kernel.org/lkml/20250829153149.2871901-1-xin@zytor.com/


[1]: https://lore.kernel.org/kvm/ZvQaNRhrsSJTYji3@google.com/


Xin Li (18):
  KVM: VMX: Add support for the secondary VM exit controls
  KVM: VMX: Initialize VM entry/exit FRED controls in vmcs_config
  KVM: VMX: Disable FRED if FRED consistency checks fail
  KVM: VMX: Initialize VMCS FRED fields
  KVM: VMX: Set FRED MSR intercepts
  KVM: VMX: Save/restore guest FRED RSP0
  KVM: VMX: Add support for saving and restoring FRED MSRs
  KVM: x86: Add a helper to detect if FRED is enabled for a vCPU
  KVM: VMX: Virtualize FRED event_data
  KVM: VMX: Virtualize FRED nested exception tracking
  KVM: x86: Mark CR4.FRED as not reserved
  KVM: VMX: Dump FRED context in dump_vmcs()
  KVM: x86: Advertise support for FRED
  KVM: nVMX: Add support for the secondary VM exit controls
  KVM: nVMX: Add FRED VMCS fields to nested VMX context handling
  KVM: nVMX: Add FRED-related VMCS field checks
  KVM: nVMX: Add prerequisites to SHADOW_FIELD_R[OW] macros
  KVM: nVMX: Allow VMX FRED controls

Xin Li (Intel) (3):
  x86/cea: Prefix event stack names with ESTACK_
  x86/cea: Export API for per-CPU exception stacks for KVM
  KVM: x86: Save/restore the nested flag of an exception

 Documentation/virt/kvm/api.rst        |  21 +-
 arch/x86/coco/sev/noinstr.c           |   4 +-
 arch/x86/coco/sev/vc-handle.c         |   2 +-
 arch/x86/include/asm/cpu_entry_area.h |  75 +++---
 arch/x86/include/asm/kvm_host.h       |  13 +-
 arch/x86/include/asm/msr-index.h      |   1 +
 arch/x86/include/asm/vmx.h            |  48 +++-
 arch/x86/include/uapi/asm/kvm.h       |   4 +-
 arch/x86/kernel/cpu/common.c          |  10 +-
 arch/x86/kernel/dumpstack_64.c        |  14 +-
 arch/x86/kernel/fred.c                |   6 +-
 arch/x86/kernel/traps.c               |   2 +-
 arch/x86/kvm/cpuid.c                  |   1 +
 arch/x86/kvm/kvm_cache_regs.h         |  15 ++
 arch/x86/kvm/svm/svm.c                |   2 +-
 arch/x86/kvm/vmx/capabilities.h       |  25 +-
 arch/x86/kvm/vmx/nested.c             | 338 ++++++++++++++++++++++----
 arch/x86/kvm/vmx/nested.h             |  22 ++
 arch/x86/kvm/vmx/vmcs.h               |   1 +
 arch/x86/kvm/vmx/vmcs12.c             |  19 ++
 arch/x86/kvm/vmx/vmcs12.h             |  40 ++-
 arch/x86/kvm/vmx/vmcs_shadow_fields.h |  37 ++-
 arch/x86/kvm/vmx/vmx.c                | 247 +++++++++++++++++--
 arch/x86/kvm/vmx/vmx.h                |  54 +++-
 arch/x86/kvm/x86.c                    | 131 +++++++++-
 arch/x86/kvm/x86.h                    |   8 +-
 arch/x86/mm/cpu_entry_area.c          |  37 ++-
 arch/x86/mm/fault.c                   |   2 +-
 include/uapi/linux/kvm.h              |   1 +
 29 files changed, 1036 insertions(+), 144 deletions(-)

----------------------------------------------------------------------

