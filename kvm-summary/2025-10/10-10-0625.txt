From 2d38d5b9d to 5771ebbd3
KVM mailing list update from 2d38d5b9d to 5771ebbd3

Top 15 contributor Email domains (Based on Email Body)

     13 google.com
      5 arm.com
      2 redhat.com
      1 oracle.com
      1 loongson.cn

Top 15 contributors (Based on Email Body)

     13  David Matlack <dmatlack@google.com>
      5  Sascha Bischoff <Sascha.Bischoff@arm.com>
      2  "Michael S. Tsirkin" <mst@redhat.com>
      1  Song Gao <gaosong@loongson.cn>
      1  Dongli Zhang <dongli.zhang@oracle.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  arm64/sysreg: Fix checks for incomplete sysreg
[PATCH v2 1/4] arm64/sysreg: Fix checks for incomplete sysreg
Author: Sascha Bischoff <Sascha.Bischoff@arm.com>

The checks for incomplete sysreg definitions were checking if the
next_bit was greater than 0, which is incorrect and missed occasions
where bit 0 hasn't been defined for a sysreg. The reason is that
next_bit is -1 when all bits have been processed (LSB - 1).

Change the checks to use >=3D 0, instead. Also, set next_bit in Mapping
to -1 instead of 0 to match these new checks.

There are no changes to the generated sysreg definitons as part of
this change, and conveniently no definitions lack definitions for bit
0.

Signed-off-by: Sascha Bischoff <sascha.bischoff@arm.com>
---
 arch/arm64/tools/gen-sysreg.awk | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

----------------------------------------------------------------------

New:  arm64/sysreg: Introduce Prefix descriptor and
[PATCH v2 0/4] arm64/sysreg: Introduce Prefix descriptor and
Author: Sascha Bischoff <Sascha.Bischoff@arm.com>

This series introduces support for conditional field encodings in the
sysreg description framework and migrates the vGIC-v3 code to use
generated definitions for ICH_VMCR_EL2, in part as an example of how
the Prefix descriptor can be used. In addition, it fixes an issue with
the tracking of incomplete system register efinitions.

The first patch addresses an issue where next_bit was checked for > 0
instead of >=3D 0 to determine if all 64-bits had been defined. The
result was that the generator didn't catch cases where bit 0 of a
system register was not defined. Thankfully, there were no such cases.

The next patch adds the Prefix descriptor, allowing sysreg definitions
to be prefixed with an optional condition (e.g., GICv3 vs GICv5). The
Prefix/EndPrefix construct enables generation of prefixed field
encodings without affecting legacy definitions which remain
unchanged. This forms the basis for supporting feature-dependent
register layouts.

The third patch adds the generated description for ICH_VMCR_EL2,
including both its GICv3 and GICv5 variants. This register was
previously defined manually in the KVM GICv3 code; moving it into the
sysreg framework ensures consistency and reduces duplication.

Finally, the last patch updates the KVM vGIC-v3 implementation to use
the generated ICH_VMCR_EL2 definitions. This replaces and removes the
hand-written definitions, with no functional change to behaviour.

Together, these patches complete the migration of ICH_VMCR_EL2 to the
sysreg framework and establish the infrastructure needed to describe
registers with multiple field encodings.

Thanks,
Sascha

Sascha Bischoff (4):
  arm64/sysreg: Fix checks for incomplete sysreg definitions
  arm64/sysreg: Support feature-specific fields with 'Prefix' descriptor
  arm64/sysreg: Add ICH_VMCR_EL2
  KVM: arm64: gic-v3: Switch vGIC-v3 to use generated ICH_VMCR_EL2

 arch/arm64/include/asm/sysreg.h      |  21 ----
 arch/arm64/kvm/hyp/vgic-v3-sr.c      |  64 ++++++-------
 arch/arm64/kvm/vgic/vgic-v3-nested.c |   8 +-
 arch/arm64/kvm/vgic/vgic-v3.c        |  42 ++++----
 arch/arm64/tools/gen-sysreg.awk      | 137 ++++++++++++++++++---------
 arch/arm64/tools/sysreg              |  21 ++++
 6 files changed, 162 insertions(+), 131 deletions(-)

----------------------------------------------------------------------

New:  virtio: dwords->qwords
[PATCH 1/3] virtio: dwords->qwords
Author: Michael S. Tsirkin <mst@redhat.com>

A "word" is 16 bit. 64 bit integers like virtio uses are not dwords,
they are actually qwords. Fix up macro names accordingly.

Fixes: e7d4c1c5a546 ("virtio: introduce extended features")
Cc: "Paolo Abeni" <pabeni@redhat.com>
Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
---
 drivers/vhost/net.c               | 10 +++++-----
 drivers/virtio/virtio.c           |  8 ++++----
 drivers/virtio/virtio_debug.c     |  2 +-
 include/linux/virtio.h            |  2 +-
 include/linux/virtio_features.h   | 24 ++++++++++++------------
 include/linux/virtio_pci_modern.h |  8 ++++----
 scripts/lib/kdoc/kdoc_parser.py   |  2 +-
 7 files changed, 28 insertions(+), 28 deletions(-)

----------------------------------------------------------------------

New:  target/i386/kvm: account blackout downtime for kvm-clock and guest TSC
[PATCH 1/1] target/i386/kvm: account blackout downtime for kvm-clock and guest TSC
Author: Dongli Zhang <dongli.zhang@oracle.com>

So far, QEMU/KVM live migration does not account all elapsed blackout
downtimes. For example, if a guest is live-migrated to a file, left idle
for one hour, and then restored from that file to the target host, the
one-hour blackout period will not be reflected in the kvm-clock or guest
TSC.

Typically, the elapsed time between KVM_GET_CLOCK (on the source QEMU) and
KVM_SET_CLOCK (on the target QEMU) is not accounted in the kvm-clock.
Similarly, the elapsed time between reading MSR_IA32_TSC on the source QEMU
and writing it on the target QEMU is not reflected in the guest TSC.

The KVM patchset [1] introduced KVM_VCPU_TSC_CTRL, KVM_CLOCK_REALTIME, and
KVM_CLOCK_HOST_TSC to account the elapsed time during live migration
blackouts in the guest's system counter view.

The core idea is to use the realtime clock (KVM_CLOCK_REALTIME) from both
the source and target hosts as a reference to calculate the elapsed
downtime in nanoseconds and adjust kvm-clock. In addition, these
nanoseconds are converted into TSC cycles using the vCPU's virtual TSC
frequency, and the corresponding elapsed cycles are compensated in the
guest TSC as well (KVM_CLOCK_HOST_TSC and KVM_VCPU_TSC_CTRL).

The following steps are copied from the Linux kernel documentation [2].

From the source VMM process:

1. Invoke the KVM_GET_CLOCK ioctl to record the host TSC (tsc_src),
kvmclock nanoseconds (guest_src), and host CLOCK_REALTIME nanoseconds
(host_src).

2. Read the KVM_VCPU_TSC_OFFSET attribute for every vCPU to record the
guest TSC offset (ofs_src[i]).

3. Invoke the KVM_GET_TSC_KHZ ioctl to record the frequency of the guest's
TSC (freq).

From the destination VMM process:

4. Invoke the KVM_SET_CLOCK ioctl, providing the source nanoseconds from
kvmclock (guest_src) and CLOCK_REALTIME (host_src) in their respective
fields. Ensure that the KVM_CLOCK_REALTIME flag is set in the provided
structure.

KVM will advance the VM's kvmclock to account for elapsed time since
recording the clock values. Note that this will cause problems in the guest
(e.g., timeouts) unless CLOCK_REALTIME is synchronized between the source
and destination, and a reasonably short time passes between the source
pausing the VMs and the destination executing steps 4-7.

5. Invoke the KVM_GET_CLOCK ioctl to record the host TSC (tsc_dest) and
kvmclock nanoseconds (guest_dest).

6. Adjust the guest TSC offsets for every vCPU to account for (1) time
elapsed since recording state and (2) difference in TSCs between the
source and destination machine:

ofs_dst[i] = ofs_src[i] -
    (guest_src - guest_dest) * freq + (tsc_src - tsc_dest)

("ofs[i] + tsc - guest * freq" is the guest TSC value corresponding to a
time of 0 in kvmclock. The above formula ensures that it is the same on
the destination as it was on the source).

7. Write the KVM_VCPU_TSC_OFFSET attribute for every vCPU with the
respective value derived in the previous step.

Introduce 'realtime', 'host_tsc', and 'flags' fields to KVMClockState,
and enable their live migration. Re-use CPUX86State->tsc_offset (currently
used by TCG) for the KVM accelerator.

References:
[1] https://lore.kernel.org/all/20210916181538.968978-8-oupton@google.com/
[2] https://docs.kernel.org/virt/kvm/devices/vcpu.html
[3] https://lore.kernel.org/qemu-devel/2d375ec3-a071-4ae3-b03a-05a823c48016@oracle.com/

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
This patch takes advantage of existing mainline linux kernel features,
excluding WIP features:
https://lore.kernel.org/all/20240522001817.619072-8-dwmw2@infradead.org/

 hw/i386/kvm/clock.c        | 89 +++++++++++++++++++++++++++++++++++++-
 hw/i386/pc.c               |  4 +-
 target/i386/kvm/kvm.c      | 73 +++++++++++++++++++++++++++++++
 target/i386/kvm/kvm_i386.h |  6 +++
 4 files changed, 170 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  LoongArch: KVM: Add AVEC support
[PATCH 1/1] LoongArch: KVM: Add AVEC support
Author: Song Gao <gaosong@loongson.cn>

Add cpu_has_msgint() to check whether the host cpu supported avec,
and restore/save CSR_MSGIS0-CSR_MSGIS3.

Signed-off-by: Song Gao <gaosong@loongson.cn>
---
based-on: LoongArch: KVM: Get VM PMU capability from HW GCFG register

 arch/loongarch/include/asm/kvm_host.h |  4 ++++
 arch/loongarch/include/asm/kvm_vcpu.h |  1 +
 arch/loongarch/include/uapi/asm/kvm.h |  1 +
 arch/loongarch/kvm/interrupt.c        |  3 +++
 arch/loongarch/kvm/vcpu.c             | 19 +++++++++++++++++--
 arch/loongarch/kvm/vm.c               |  4 ++++
 6 files changed, 30 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  vfio: selftests: Split run.sh into separate scripts
[PATCH 01/12] vfio: selftests: Split run.sh into separate scripts
Author: David Matlack <dmatlack@google.com>

Split run.sh into separate scripts (setup.sh, run.sh, cleanup.sh) to
enable multi-device testing, and prepare for VFIO selftests
automatically detecting which devices to use for testing by storing
device metadata on the filesystem.

 - setup.sh takes one or more BDFs as arguments and sets up each device.
   Metadata about each device is stored on the filesystem in the
   directory:

	   ${TMPDIR:-/tmp}/vfio-selftests-devices

   Within this directory is a directory for each BDF, and then files in
   those directories that cleanup.sh uses to cleanup the device.

 - run.sh runs a selftest by passing it the BDFs of all set up devices.

 - cleanup.sh takes zero or more BDFs as arguments and cleans up each
   device. If no BDFs are provided, it cleans up all devices.

This split enables multi-device testing by allowing multiple BDFs to be
set up and passed into tests:

For example:

  $ tools/testing/selftests/vfio/scripts/setup.sh <BDF1> <BDF2>
  $ tools/testing/selftests/vfio/scripts/setup.sh <BDF3>
  $ tools/testing/selftests/vfio/scripts/run.sh echo
  <BDF1> <BDF2> <BDF3>
  $ tools/testing/selftests/vfio/scripts/cleanup.sh

If the future, VFIO selftests can automatically detect set up devices by
inspecting ${TMPDIR:-/tmp}/vfio-selftests-devices. This will avoid the
need for the run.sh script.

Signed-off-by: David Matlack <dmatlack@google.com>
---
 tools/testing/selftests/vfio/run.sh           | 109 ------------------
 .../testing/selftests/vfio/scripts/cleanup.sh |  42 +++++++
 tools/testing/selftests/vfio/scripts/lib.sh   |  42 +++++++
 tools/testing/selftests/vfio/scripts/run.sh   |  16 +++
 tools/testing/selftests/vfio/scripts/setup.sh |  48 ++++++++
 5 files changed, 148 insertions(+), 109 deletions(-)

----------------------------------------------------------------------

New:  vfio: selftests: Support for multi-device tests
[PATCH 00/12] vfio: selftests: Support for multi-device tests
Author: David Matlack <dmatlack@google.com>

This series adds support for tests that use multiple devices, and adds
one new test, vfio_pci_device_init_perf_test, which measures parallel
device initialization time to demonstrate the improvement from commit
e908f58b6beb ("vfio/pci: Separate SR-IOV VF dev_set").

This series also breaks apart the monolithic vfio_util.h and
vfio_pci_device.c into separate files, to account for all the new code.
This required some code motion so the diffstat looks large. The final
layout is more granular and provides a better separation of the IOMMU
code from the device code.

  C files:
    - tools/testing/selftests/vfio/lib/libvfio.c
    - tools/testing/selftests/vfio/lib/iommu.c
    - tools/testing/selftests/vfio/lib/vfio_pci_device.c
    - tools/testing/selftests/vfio/lib/vfio_pci_driver.c

  H files:
   - tools/testing/selftests/vfio/lib/include/libvfio.h
   - tools/testing/selftests/vfio/lib/include/libvfio/assert.h
   - tools/testing/selftests/vfio/lib/include/libvfio/iommu.h
   - tools/testing/selftests/vfio/lib/include/libvfio/vfio_pci_device.h
   - tools/testing/selftests/vfio/lib/include/libvfio/vfio_pci_driver.h

Notably, vfio_util.h is now gone and replaced with libvfio.h.

This series is based on vfio next, and can be found on GitHub:

  https://github.com/dmatlack/linux/tree/vfio/selftests/init_perf_test/v1

Cc: Jason Gunthorpe <jgg@nvidia.com>
Cc: Vipin Sharma <vipinsh@google.com>
Cc: Josh Hilke <jrhilke@google.com>

David Matlack (12):
  vfio: selftests: Split run.sh into separate scripts
  vfio: selftests: Allow passing multiple BDFs on the command line
  vfio: selftests: Rename struct vfio_iommu_mode to iommu_mode
  vfio: selftests: Introduce struct iommu
  vfio: selftests: Support multiple devices in the same
    container/iommufd
  vfio: selftests: Eliminate overly chatty logging
  vfio: selftests: Prefix logs with device BDF where relevant
  vfio: selftests: Rename struct vfio_dma_region to dma_region
  vfio: selftests: Move iommu_*() functions into iommu.c
  vfio: selftests: Rename vfio_util.h to libvfio.h
  vfio: selftests: Split libvfio.h into separate header files
  vfio: selftests: Add vfio_pci_device_init_perf_test

 tools/testing/selftests/vfio/Makefile         |   3 +
 .../selftests/vfio/lib/drivers/dsa/dsa.c      |  36 +--
 .../selftests/vfio/lib/drivers/ioat/ioat.c    |  18 +-
 .../selftests/vfio/lib/include/libvfio.h      |  25 ++
 .../vfio/lib/include/libvfio/assert.h         |  53 ++++
 .../vfio/lib/include/libvfio/iommu.h          |  53 ++++
 .../lib/include/libvfio/vfio_pci_device.h     | 143 +++++++++
 .../lib/include/libvfio/vfio_pci_driver.h     |  98 ++++++
 .../selftests/vfio/lib/include/vfio_util.h    | 295 ------------------
 tools/testing/selftests/vfio/lib/iommu.c      | 219 +++++++++++++
 tools/testing/selftests/vfio/lib/libvfio.c    |  77 +++++
 tools/testing/selftests/vfio/lib/libvfio.mk   |   4 +-
 .../selftests/vfio/lib/vfio_pci_device.c      | 264 ++--------------
 .../selftests/vfio/lib/vfio_pci_driver.c      |  16 +-
 tools/testing/selftests/vfio/run.sh           | 109 -------
 .../testing/selftests/vfio/scripts/cleanup.sh |  42 +++
 tools/testing/selftests/vfio/scripts/lib.sh   |  42 +++
 tools/testing/selftests/vfio/scripts/run.sh   |  16 +
 tools/testing/selftests/vfio/scripts/setup.sh |  48 +++
 .../selftests/vfio/vfio_dma_mapping_test.c    |   4 +-
 .../selftests/vfio/vfio_iommufd_setup_test.c  |   2 +-
 .../vfio/vfio_pci_device_init_perf_test.c     | 163 ++++++++++
 .../selftests/vfio/vfio_pci_device_test.c     |   2 +-
 .../selftests/vfio/vfio_pci_driver_test.c     |   8 +-
 24 files changed, 1051 insertions(+), 689 deletions(-)

----------------------------------------------------------------------

