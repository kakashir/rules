From 65608486b to 2bf7a893e
KVM mailing list update from 65608486b to 2bf7a893e

Top 15 contributor Email domains (Based on Email Body)

     52 linaro.org
     15 google.com
      1 linux.dev
      1 josie.lol
      1 gmail.com

Top 15 contributors (Based on Email Body)

     52  =?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <philmd@linaro.org>
     12  Yosry Ahmed <yosryahmed@google.com>
      3  Jim Mattson <jmattson@google.com>
      1  Yosry Ahmed <yosry.ahmed@linux.dev>
      1  Josephine Pfeiffer <hi@josie.lol>
      1  fuqiang wang <fuqiang.wng@gmail.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  system/ram_addr: Remove unnecessary 'exec/cpu-common.h' header
[PATCH v2 01/18] system/ram_addr: Remove unnecessary 'exec/cpu-common.h' header
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

Nothing in "system/ram_addr.h" requires definitions from
"exec/cpu-common.h", remove it.

Signed-off-by: Philippe Mathieu-Daudé <philmd@linaro.org>
Reviewed-by: Thomas Huth <thuth@redhat.com>
Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
---
 include/system/ram_addr.h | 1 -
 1 file changed, 1 deletion(-)

----------------------------------------------------------------------

New:  system/physmem: Extract API out of 'system/ram_addr.h' header
[PATCH v2 00/18] system/physmem: Extract API out of 'system/ram_addr.h' header
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

Missing review: #12 (new)

Since v2:
- Dropped few patches
- Do not rename @start -> @addr (rth)

Following a previous comment from Richard in [*],
reduce "system/ram_addr.h" size by un-inlining a
lot of huge functions that aren't really justified,
and extract the API to the hew "system/physmem.h"
header, after renaming the functions (removing the
confusing 'cpu_' prefix).

(I plan to eventually merge this myself due to the
likelyness of conflicts).

[*] https://lore.kernel.org/qemu-devel/9151205a-13d3-401e-b403-f9195cdb1a45@linaro.org/

Philippe Mathieu-Daudé (18):
  system/ram_addr: Remove unnecessary 'exec/cpu-common.h' header
  accel/kvm: Include missing 'exec/target_page.h' header
  hw/s390x/s390-stattrib: Include missing 'exec/target_page.h' header
  hw/vfio/listener: Include missing 'exec/target_page.h' header
  target/arm/tcg/mte: Include missing 'exec/target_page.h' header
  hw: Remove unnecessary 'system/ram_addr.h' header
  system/physmem: Un-inline cpu_physical_memory_get_dirty_flag()
  system/physmem: Un-inline cpu_physical_memory_is_clean()
  system/physmem: Un-inline cpu_physical_memory_range_includes_clean()
  system/physmem: Un-inline cpu_physical_memory_set_dirty_flag()
  system/physmem: Un-inline cpu_physical_memory_set_dirty_range()
  system/physmem: Remove _WIN32 #ifdef'ry
  system/physmem: Un-inline cpu_physical_memory_set_dirty_lebitmap()
  system/physmem: Un-inline cpu_physical_memory_dirty_bits_cleared()
  system/physmem: Reduce cpu_physical_memory_clear_dirty_range() scope
  system/physmem: Reduce cpu_physical_memory_sync_dirty_bitmap() scope
  system/physmem: Drop 'cpu_' prefix in Physical Memory API
  system/physmem: Extract API out of 'system/ram_addr.h' header

 MAINTAINERS                       |   1 +
 include/system/physmem.h          |  54 ++++
 include/system/ram_addr.h         | 413 ------------------------------
 accel/kvm/kvm-all.c               |   5 +-
 accel/tcg/cputlb.c                |  13 +-
 hw/ppc/spapr.c                    |   1 -
 hw/ppc/spapr_caps.c               |   1 -
 hw/ppc/spapr_pci.c                |   1 -
 hw/remote/memory.c                |   1 -
 hw/remote/proxy-memory-listener.c |   1 -
 hw/s390x/s390-stattrib-kvm.c      |   2 +-
 hw/s390x/s390-stattrib.c          |   2 +-
 hw/s390x/s390-virtio-ccw.c        |   1 -
 hw/vfio/container-legacy.c        |  10 +-
 hw/vfio/container.c               |   5 +-
 hw/vfio/listener.c                |   2 +-
 hw/vfio/spapr.c                   |   1 -
 hw/virtio/virtio-mem.c            |   1 -
 migration/ram.c                   |  78 +++++-
 system/memory.c                   |   9 +-
 system/physmem.c                  | 322 ++++++++++++++++++++++-
 target/arm/tcg/mte_helper.c       |   5 +-
 system/memory_ldst.c.inc          |   2 +-
 tests/tsan/ignore.tsan            |   4 +-
 24 files changed, 475 insertions(+), 460 deletions(-)

----------------------------------------------------------------------

New:  s390/kvm: Replace sprintf with snprintf for buffer safety
[PATCH] s390/kvm: Replace sprintf with snprintf for buffer safety
Author: Josephine Pfeiffer <hi@josie.lol>

Replace sprintf() with snprintf() when formatting debug names to prevent
potential buffer overflow. The debug_name buffer is 16 bytes, and while
unlikely to overflow with current PIDs, using snprintf() provides proper
bounds checking.

Signed-off-by: Josephine Pfeiffer <hi@josie.lol>
---
 arch/s390/kvm/kvm-s390.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  system/ramblock: Remove obsolete comment
[PATCH v2 1/6] system/ramblock: Remove obsolete comment
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

This comment was added almost 5 years ago in commit 41aa4e9fd84
("ram_addr: Split RAMBlock definition"). Clearly it got ignored:

  $ git grep -l system/ramblock.h
  hw/display/virtio-gpu-udmabuf.c
  hw/hyperv/hv-balloon.c
  hw/virtio/vhost-user.c
  migration/dirtyrate.c
  migration/file.c
  migration/multifd-nocomp.c
  migration/multifd-qatzip.c
  migration/multifd-qpl.c
  migration/multifd-uadk.c
  migration/multifd-zero-page.c
  migration/multifd-zlib.c
  migration/multifd-zstd.c
  migration/multifd.c
  migration/postcopy-ram.c
  system/ram-block-attributes.c
  target/i386/kvm/tdx.c
  tests/qtest/fuzz/generic_fuzz.c

At this point it seems saner to just remove it.

Signed-off-by: Philippe Mathieu-Daudé <philmd@linaro.org>
Reviewed-by: David Hildenbrand <david@redhat.com>
---
 include/system/ramblock.h | 5 -----
 1 file changed, 5 deletions(-)

----------------------------------------------------------------------

New:  system/ramblock: Sanitize header
[PATCH v2 0/6] system/ramblock: Sanitize header
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

Usual API cleanups, here focusing on RAMBlock API:
move few prototypes out of "exec/cpu-common.h" and
"system/ram_addr.h" to "system/ramblock.h".

v2:
- Do not use ram_addr_t for offsets (rth)

Philippe Mathieu-Daudé (6):
  system/ramblock: Remove obsolete comment
  system/ramblock: Move ram_block_is_pmem() declaration
  system/ramblock: Move ram_block_discard_*_range() declarations
  system/ramblock: Use ram_addr_t in ram_block_discard_guest_memfd_range
  system/ramblock: Use ram_addr_t in ram_block_discard_range()
  system/ramblock: Move RAMBlock helpers out of "system/ram_addr.h"

 include/exec/cpu-common.h                 |  3 ---
 include/system/ram_addr.h                 | 13 ---------
 include/system/ramblock.h                 | 27 +++++++++++++++----
 accel/kvm/kvm-all.c                       |  1 +
 hw/hyperv/hv-balloon-our_range_memslots.c |  1 +
 hw/virtio/virtio-balloon.c                |  1 +
 hw/virtio/virtio-mem.c                    |  1 +
 migration/ram.c                           |  3 ++-
 system/physmem.c                          | 33 ++++++++++++-----------
 9 files changed, 45 insertions(+), 38 deletions(-)

----------------------------------------------------------------------

New:  Extend test coverage for nested SVM
[PATCH 00/12] Extend test coverage for nested SVM
Author: Yosry Ahmed <yosry.ahmed@linux.dev>

There are multiple selftests exercising nested VMX that are not specific
to VMX (at least not anymore). Extend their coverage to nested SVM.

Yosry Ahmed (12):
  KVM: selftests: Minor improvements to asserts in
    test_vmx_nested_state()
  KVM: selftests: Extend vmx_set_nested_state_test to cover SVM
  KVM: selftests: Extend vmx_close_while_nested_test to cover SVM
  KVM: selftests: Extend vmx_nested_tsc_scaling_test to cover SVM
  KVM: selftests: Remove invalid CR3 test from vmx_tsc_adjust_test
  KVM: selftests: Extend vmx_tsc_adjust_test to cover SVM
  KVM: selftests: Pass the root HVA directly to nested mapping functions
  KVM: selftests: Use 'leaf' instead of hugepage to describe EPT entries
  KVM: selftests: Move all PTE accesses into nested_create_pte()
  KVM: selftests: Move EPT-specific init outside nested_create_pte()
  KVM: selftests: Refactor generic nested mapping outside VMX code
  KVM: selftests: Extend vmx_dirty_log_test to cover SVM

 tools/testing/selftests/kvm/Makefile.kvm      |  11 +-
 .../selftests/kvm/include/x86/nested_map.h    |  20 ++
 .../selftests/kvm/include/x86/svm_util.h      |  13 ++
 tools/testing/selftests/kvm/include/x86/vmx.h |  13 +-
 .../testing/selftests/kvm/lib/x86/memstress.c |   5 +-
 .../selftests/kvm/lib/x86/nested_map.c        | 150 +++++++++++++++
 tools/testing/selftests/kvm/lib/x86/svm.c     |  70 +++++++
 tools/testing/selftests/kvm/lib/x86/vmx.c     | 180 +++---------------
 ...ested_test.c => close_while_nested_test.c} |  42 +++-
 ...rty_log_test.c => nested_dirty_log_test.c} |  95 ++++++---
 ...adjust_test.c => nested_tsc_adjust_test.c} |  79 ++++----
 ...aling_test.c => nested_tsc_scaling_test.c} |  48 ++++-
 ...d_state_test.c => set_nested_state_test.c} | 132 +++++++++++--
 13 files changed, 609 insertions(+), 249 deletions(-)

----------------------------------------------------------------------

New:  KVM: selftests: Minor improvements to asserts in test_vmx_nested_state()
[PATCH 01/12] KVM: selftests: Minor improvements to asserts in test_vmx_nested_state()
Author: Yosry Ahmed <yosry.ahmed@linux.dev>


Display the address as hex if the asserts for the vmxon_pa and vmcs12_pa
fail, and assert that the flags are 0 as expected.

Signed-off-by: Yosry Ahmed <yosry.ahmed@linux.dev>
---
 .../selftests/kvm/x86/vmx_set_nested_state_test.c      | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  avoid hv timer fallback to sw timer if delay exceeds period
[PATCH] avoid hv timer fallback to sw timer if delay exceeds period
Author: fuqiang wang <fuqiang.wng@gmail.com>

When the guest uses the APIC periodic timer, if the delay exceeds the
period, the delta will be negative. nsec_to_cycles() may then convert this
delta into an absolute value larger than guest_l1_tsc, resulting in a
negative tscdeadline. Since the hv timer supports a maximum bit width of
cpu_preemption_timer_multi + 32, this causes the hv timer setup to fail and
switch to the sw timer.

Moreover, due to the commit 98c25ead5eda ("KVM: VMX: Move preemption timer
<=> hrtimer dance to common x86"), if the guest is using the sw timer
before blocking, it will continue to use the sw timer after being woken up,
and will not switch back to the hv timer until the relevant APIC timer
register is reprogrammed.  Since the periodic timer does not require
frequent APIC timer register programming, the guest may continue to use the
software timer for an extended period.

The reproduction steps and patch verification results at link [1].

[1]: https://github.com/cai-fuqiang/kernel_test/tree/master/period_timer_test

Fixes: 98c25ead5eda ("KVM: VMX: Move preemption timer <=> hrtimer dance to common x86")
Signed-off-by: fuqiang wang <fuqiang.wng@gmail.com>
---
 arch/x86/kvm/lapic.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

Exist: [PATCH v2 01/18] system/ram_addr: Remove unnecessary 'exec/cpu-common.h' header
 Skip: [PATCH 01/25] system/ram_addr: Remove unnecessary 'exec/cpu-common.h' header
Exist: [PATCH v2 00/18] system/physmem: Extract API out of 'system/ram_addr.h' header
 Skip: [PATCH 00/25] system/physmem: Extract API out of 'system/ram_addr.h' header
New:  KVM: x86: Advertise EferLmsleUnsupported to userspace
[PATCH v2 1/2] KVM: x86: Advertise EferLmsleUnsupported to userspace
Author: Jim Mattson <jmattson@google.com>

CPUID.80000008H:EBX.EferLmsleUnsupported[bit 20] is a defeature
bit. When this bit is clear, EFER.LMSLE is supported. When this bit is
set, EFER.LMLSE is unsupported. KVM has never supported EFER.LMSLE, so
it cannot support a 0-setting of this bit.

Pass through the bit in KVM_GET_SUPPORTED_CPUID to advertise the
unavailability of EFER.LMSLE to userspace.

Signed-off-by: Jim Mattson <jmattson@google.com>
---
 v1 -> v2:
   Pass through the bit from hardware, rather than forcing it to be set.

 arch/x86/include/asm/cpufeatures.h | 1 +
 arch/x86/kvm/cpuid.c               | 1 +
 2 files changed, 2 insertions(+)

----------------------------------------------------------------------

New:  KVM: SVM: Handle EferLmsleUnsupported
[PATCH v2 0/2] KVM: SVM: Handle EferLmsleUnsupported
Author: Jim Mattson <jmattson@google.com>

It is no longer the case that EFER.LMSLE is supported by all SVM-capable
processors. AMD enumerates the absence of this feature by CPUID
Fn8000_0008_EBX[EferLmlseUnsupported](bit 20)=1.

Advertise this defeature bit to userspace via KVM_GET_SUPPORTED_CPUID,
and don't allow a guest to set EFER.LMSLE on hardware that doesn't
support the feature.

Jim Mattson (2):
  KVM: x86: Advertise EferLmsleUnsupported to userspace
  KVM: SVM: Disallow EFER.LMSLE when not supported by hardware

 arch/x86/include/asm/cpufeatures.h | 1 +
 arch/x86/kvm/cpuid.c               | 1 +
 arch/x86/kvm/svm/svm.c             | 4 +++-
 3 files changed, 5 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

