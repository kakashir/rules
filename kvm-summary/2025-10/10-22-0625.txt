From 731b1ebaa to 330d5ca8c
KVM mailing list update from 731b1ebaa to 330d5ca8c

Top 15 contributor Email domains (Based on Email Body)

     24 linux.dev
      7 linaro.org
      5 linux.ibm.com
      4 nvidia.com
      2 redhat.com
      2 gmail.com
      1 linux.alibaba.com
      1 kernel.org
      1 jd.com
      1 intel.com
      1 arm.com
      1 andestech.com

Top 15 contributors (Based on Email Body)

     24  Yosry Ahmed <yosry.ahmed@linux.dev>
      7  =?UTF-8?q?Philippe=20Mathieu-Daud=C3=A9?= <philmd@linaro.org>
      5  Harsh Prateek Bora <harshpb@linux.ibm.com>
      4  Ankit Agrawal <ankita@nvidia.com>
      2  "Michael S. Tsirkin" <mst@redhat.com>
      2  fuqiang wang <fuqiang.wng@gmail.com>
      1  wangfuqiang49 <wangfuqiang49@jd.com>
      1  Sascha Bischoff <Sascha.Bischoff@arm.com>
      1  Kai Huang <kai.huang@intel.com>
      1  Hui Min Mina Chou <minachou@andestech.com>
      1  "Gustavo A. R. Silva" <gustavoars@kernel.org>
      1  Fangyu Yu <fangyu.yu@linux.alibaba.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  KVM: Avoid a few dozen -Wflex-array-member-not-at-end
[PATCH][next] KVM: Avoid a few dozen -Wflex-array-member-not-at-end
Author: Gustavo A. R. Silva <gustavoars@kernel.org>

-Wflex-array-member-not-at-end was introduced in GCC-14, and we are
getting ready to enable it, globally.

So, in order to avoid ending up with a flexible-array member in the
middle of multiple other structs, we use the `__struct_group()` helper
to separate the flexible array from the rest of the members in the
flexible structure, and use the tagged `struct kvm_stats_desc_hdr`
instead of `struct kvm_stats_desc`.

So, with these changes, fix 51 instances of the following type of
warning:

49 ./include/linux/kvm_host.h:1923:31: warning: structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]
1 .../include/linux/kvm_host.h:1923:31: warning: structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]
1 +./include/linux/kvm_host.h:1923:31: warning: structure containing a flexible array member is not at the end of another structure [-Wflex-array-member-not-at-end]

Notice that, before and after the changes, struct sizes and member offsets
remain unchanged:

BEFORE

struct kvm_stats_desc {
        __u32                      flags;                /*     0     4 */
        __s16                      exponent;             /*     4     2 */
        __u16                      size;                 /*     6     2 */
        __u32                      offset;               /*     8     4 */
        __u32                      bucket_size;          /*    12     4 */
        char                       name[];               /*    16     0 */

        /* size: 16, cachelines: 1, members: 6 */
        /* last cacheline: 16 bytes */
};

struct _kvm_stats_desc {
        struct kvm_stats_desc      desc;                 /*     0    16 */
        char                       name[48];             /*    16    48 */

        /* size: 64, cachelines: 1, members: 2 */
};

AFTER:

struct kvm_stats_desc {
        union {
                struct {
                        __u32      flags;                /*     0     4 */
                        __s16      exponent;             /*     4     2 */
                        __u16      size;                 /*     6     2 */
                        __u32      offset;               /*     8     4 */
                        __u32      bucket_size;          /*    12     4 */
                };                                       /*     0    16 */
                struct kvm_stats_desc_hdr __hdr;         /*     0    16 */
        };                                               /*     0    16 */
        char                       name[];               /*    16     0 */

        /* size: 16, cachelines: 1, members: 2 */
        /* last cacheline: 16 bytes */
};

struct _kvm_stats_desc {
        struct kvm_stats_desc_hdr  desc;                 /*     0    16 */
        char                       name[48];             /*    16    48 */

        /* size: 64, cachelines: 1, members: 2 */
};


Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
---
 include/uapi/linux/kvm.h | 21 ++++++++++++++++-----
 include/linux/kvm_host.h |  2 +-
 2 files changed, 17 insertions(+), 6 deletions(-)

----------------------------------------------------------------------

New:  avoid hv timer fallback to sw timer if delay exceeds period
[PATCH v2 1/2] avoid hv timer fallback to sw timer if delay exceeds period
Author: fuqiang wang <fuqiang.wng@gmail.com>

When the guest uses the APIC periodic timer, if the next period has already
expired, e.g. due to the period being smaller than the delay in processing
the timer, the delta will be negative.  nsec_to_cycles() may then convert
this delta into an absolute value larger than guest_l1_tsc, resulting in a
negative tscdeadline. Since the hv timer supports a maximum bit width of
cpu_preemption_timer_multi + 32, this causes the hv timer setup to fail and
switch to the sw timer.

Moreover, due to the commit 98c25ead5eda ("KVM: VMX: Move preemption timer
<=> hrtimer dance to common x86"), if the guest is using the sw timer
before blocking, it will continue to use the sw timer after being woken up,
and will not switch back to the hv timer until the relevant APIC timer
register is reprogrammed.  Since the periodic timer does not require
frequent APIC timer register programming, the guest may continue to use the
software timer for an extended period.

Fixes: d8f2f498d9ed ("x86/kvm: fix LAPIC timer drift when guest uses periodic mode")
Signed-off-by: fuqiang wang <fuqiang.wng@gmail.com>
---
 arch/x86/kvm/lapic.c | 22 +++++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: fix some kvm period timer BUG
[PATCH 0/2] KVM: x86: fix some kvm period timer BUG
Author: fuqiang wang <fuqiang.wng@gmail.com>


The following two patches fix some bugs in the x86 KVM periodic timer.

=======
patch 1
=======

The first patch fixes a problem where, if the next period has already
expired, e.g. due to the period being smaller than the delay in processing
the timer, the hv timer will switch to the software timer and never switch
back. 

The reproduction steps and patch verification results at link [1].

=======
patch 2
=======

The second patch fixes an issue where, if the first patch has not been
applied, resuming a virtual machine after it has been suspended for a long
time may trigger a hard lockup. Link [2] also talks about this issue.

Link [2] also talks about this issue, but I don’t think it can actually
reproduce the problem. Because of commit [3], as long as the KVM timer is
running, target_expiration will keep catching up to now (unless every
single delay from timer virtualization is longer than the period, which is
a pretty extreme case). Also, patch 2 is based on the changes in link [2],
but with some differences: In link [2], target_expiration is updated to
"now - period", and I’m not sure why it doesn’t just catch up to now—maybe
I’m missing something? In patch 2, I tentatively set target_expiration to
catch up to now.

The reproduction steps and patch verification results at link [4].

=============================================================
other questions -- Should the two patches be merged into one?
=============================================================

If we end up making target_expiration catch up to now, patch 1 and patch 2
could probably be combined, since we wouldn’t need the delta > 0 check
anymore. But keeping them separate helps clearly show the two different
problems we’re fixing. 

However, the hardlockup issue only occurs when patch 1 is not merged, which
leads to the commit message for the second patch repeatedly mentioning
"...previous patch is merged". I’m not sure if this is appropriate, so I
would like to hear your suggestions.

[1]: https://github.com/cai-fuqiang/kernel_test/tree/master/period_timer_test
[2]: https://lore.kernel.org/kvm/YgahsSubOgFtyorl@fuller.cnet/
[3]: d8f2f498d9ed ("x86/kvm: fix LAPIC timer drift when guest uses periodic mode")
[4]: https://github.com/cai-fuqiang/md/tree/master/case/intel_kvm_period_timer

fuqiang wang (2):
  avoid hv timer fallback to sw timer if delay exceeds period
  fix hardlockup when waking VM after long suspend

 arch/x86/kvm/lapic.c | 30 +++++++++++++++++++++++-------
 1 file changed, 23 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

New:  virtio: clean up features qword/dword terms
[PATCH v2 1/2] virtio: clean up features qword/dword terms
Author: Michael S. Tsirkin <mst@redhat.com>

virtio pci uses word to mean "16 bits". mmio uses it to mean
"32 bits".

To avoid confusion, let's avoid the term in core virtio
altogether. Just say U64 to mean "64 bit".

Fixes: e7d4c1c5a546 ("virtio: introduce extended features")
Cc: "Paolo Abeni" <pabeni@redhat.com>
Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
---
 drivers/vhost/net.c                    | 12 +++++------
 drivers/virtio/virtio.c                | 12 +++++------
 drivers/virtio/virtio_debug.c          | 10 ++++-----
 drivers/virtio/virtio_pci_modern_dev.c |  6 +++---
 include/linux/virtio.h                 |  2 +-
 include/linux/virtio_config.h          |  2 +-
 include/linux/virtio_features.h        | 29 +++++++++++++-------------
 include/linux/virtio_pci_modern.h      |  8 +++----
 scripts/lib/kdoc/kdoc_parser.py        |  2 +-
 9 files changed, 42 insertions(+), 41 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86/mmu: Move the misplaced export of kvm_zap_gfn_range()
[PATCH] KVM: x86/mmu: Move the misplaced export of kvm_zap_gfn_range()
Author: Kai Huang <kai.huang@intel.com>

Currently, the export of kvm_zap_gfn_range() is misplaced, i.e., it's
not placed right after the kvm_zap_gfn_range() function body but after
kvm_mmu_zap_collapsible_spte().  Move it to the right place.

No functional change intended.

Signed-off-by: Kai Huang <kai.huang@intel.com>
---
 arch/x86/kvm/mmu/mmu.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  mm: handle poisoning of pfn without struct pages
[PATCH v3 1/3] mm: handle poisoning of pfn without struct pages
Author: ankita <ankita@nvidia.com>


The kernel MM currently does not handle ECC errors / poison on a memory
region that is not backed by struct pages. If a memory region mapped
using remap_pfn_range() for example, but not added to the kernel, MM
will not have associated struct pages. Add a new mechanism to handle
memory failure on such memory.

Make kernel MM expose a function to allow modules managing the device
memory to register the device memory SPA and the address space associated
it. MM maintains this information as an interval tree. On poison, MM can
search for the range that the poisoned PFN belong and use the address_space
to determine the mapping VMA.

In this implementation, kernel MM follows the following sequence that is
largely similar to the memory_failure() handler for struct page backed
memory:
1. memory_failure() is triggered on reception of a poison error. An
absence of struct page is detected and consequently memory_failure_pfn()
is executed.
2. memory_failure_pfn() collects the processes mapped to the PFN.
3. memory_failure_pfn() sends SIGBUS to all the processes mapping the
poisoned PFN using kill_procs().

Note that there is one primary difference versus the handling of the
poison on struct pages, which is to skip unmapping to the faulty PFN.
This is done to handle the huge PFNMAP support added recently [1] that
enables VM_PFNMAP vmas to map in either PMD level. Otherwise, a poison
to a PFN would need breaking the PMD mapping into PTEs to unmap only
the poisoned PFN. This will have a major performance impact.

Link: https://lore.kernel.org/all/20240826204353.2228736-1-peterx@redhat.com/ [1]

Signed-off-by: Ankit Agrawal <ankita@nvidia.com>
---
 MAINTAINERS                    |   1 +
 include/linux/memory-failure.h |  17 +++++
 include/linux/mm.h             |   1 +
 include/ras/ras_event.h        |   1 +
 mm/Kconfig                     |   1 +
 mm/memory-failure.c            | 128 ++++++++++++++++++++++++++++++++-
 6 files changed, 148 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

New:  mm: Implement ECC handling for pfn with no struct page
[PATCH v3 0/3] mm: Implement ECC handling for pfn with no struct page
Author: ankita <ankita@nvidia.com>


The kernel MM currently handles ECC errors / poison only on memory page
backed by struct page. The handling is currently missing for the PFNMAP
memory that does not have struct pages. The series adds such support.

Implement a new ECC handling for memory without struct pages. Kernel MM
expose registration APIs to allow modules that are managing the device
to register its device memory region. MM then tracks such regions using
interval tree.

The mechanism is largely similar to that of ECC on pfn with struct pages.
If there is an ECC error on a pfn, all the mapping to it are identified
and a SIGBUS is sent to the user space processes owning those mappings.
Note that there is one primary difference versus the handling of the
poison on struct pages, which is to skip unmapping to the poisoned PFN.
This is done to handle the huge PFNMAP support added recently [1] that
enables VM_PFNMAP vmas to map at PMD level. Otherwise, a poison to a PFN
would need breaking the PMD mapping into PTEs to unmap only the poisoned
PFN. This can have a major performance impact.

nvgrace-gpu-vfio-pci module maps the device memory to user VA (Qemu) using
remap_pfn_range without being added to the kernel [2]. These device memory
PFNs are not backed by struct page. So make nvgrace-gpu-vfio-pci module
make use of the mechanism to get poison handling support on the device
memory.

Patch rebased to v6.17-rc7.

Signed-off-by: Ankit Agrawal <ankita@nvidia.com>
---

Link: https://lore.kernel.org/all/20231123003513.24292-1-ankita@nvidia.com/ [v2]

v2 -> v3
- Rebased to v6.17-rc7.
- Skipped the unmapping of PFNMAP during reception of poison. Suggested by
Jason Gunthorpe, Jiaqi Yan, Vikram Sethi (Thanks!)
- Updated the check to prevent multiple registration to the same PFN
range using interval_tree_iter_first. Thanks Shameer Kolothum for the
suggestion.
- Removed the callback function in the nvgrace-gpu requiring tracking of
poisoned PFN as it isn't required anymore.
- Introduced seperate collect_procs_pfn function to collect the list of
processes mapping to the poisoned PFN.

v1 -> v2
- Change poisoned page tracking from bitmap to hashtable.
- Addressed miscellaneous comments in v1.

Link: https://lore.kernel.org/all/20240826204353.2228736-1-peterx@redhat.com/ [1]
Link: https://lore.kernel.org/all/20240220115055.23546-1-ankita@nvidia.com/ [2]

Ankit Agrawal (3):
  mm: handle poisoning of pfn without struct pages
  mm: Change ghes code to allow poison of non-struct pfn
  vfio/nvgrace-gpu: register device memory for poison handling

 MAINTAINERS                         |   1 +
 drivers/acpi/apei/ghes.c            |   6 --
 drivers/vfio/pci/nvgrace-gpu/main.c |  45 +++++++++-
 include/linux/memory-failure.h      |  17 ++++
 include/linux/mm.h                  |   1 +
 include/ras/ras_event.h             |   1 +
 mm/Kconfig                          |   1 +
 mm/memory-failure.c                 | 128 +++++++++++++++++++++++++++-
 8 files changed, 192 insertions(+), 8 deletions(-)

----------------------------------------------------------------------

New:  KVM: arm64: vgic-v3: Trap all if no in-kernel irqchip
[PATCH] KVM: arm64: vgic-v3: Trap all if no in-kernel irqchip
Author: Sascha Bischoff <Sascha.Bischoff@arm.com>

If there is no in-kernel irqchip for a GICv3 host set all of the trap
bits to block all accesses. This fixes the no-vgic-v3 selftest again.

Fixes: 3193287ddffb ("KVM: arm64: gic-v3: Only set ICH_HCR traps for v2-on-=
v3 or v3 guests")
Reported-by: Mark Brown <broonie@kernel.org>
Closes: https://lore.kernel.org/all/23072856-6b8c-41e2-93d1-ea8a240a7079@si=
rena.org.uk
Signed-off-by: Sascha Bischoff <sascha.bischoff@arm.com>
---
 arch/arm64/kvm/vgic/vgic-v3.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

New:  ppc/spapr: remove deprecated machine pseries-3.0
[PATCH v2 01/11] ppc/spapr: remove deprecated machine pseries-3.0
Author: Philippe Mathieu-Daudé <philmd@linaro.org>


pseries-3.0 had been deprecated and due for removal now as per policy.
Also remove legacy irq support which existed for pre pseries-3.1 machines.

Suggested-by: Cédric Le Goater <clg@kaod.org>
Signed-off-by: Harsh Prateek Bora <harshpb@linux.ibm.com>
Reviewed-by: Cédric Le Goater <clg@redhat.com>
Signed-off-by: Philippe Mathieu-Daudé <philmd@linaro.org>
---
 include/hw/ppc/spapr.h     |  1 -
 include/hw/ppc/spapr_irq.h |  1 -
 hw/ppc/spapr.c             | 27 +--------------------------
 hw/ppc/spapr_events.c      |  8 --------
 hw/ppc/spapr_irq.c         | 16 +---------------
 hw/ppc/spapr_pci.c         | 32 ++++----------------------------
 hw/ppc/spapr_vio.c         |  9 ---------
 7 files changed, 6 insertions(+), 88 deletions(-)

----------------------------------------------------------------------

New:  hw/ppc/spapr: Remove deprecated pseries-3.0 -> pseries-4.2 machines
[PATCH v2 00/11] hw/ppc/spapr: Remove deprecated pseries-3.0 -> pseries-4.2 machines
Author: Philippe Mathieu-Daudé <philmd@linaro.org>

v2: Rebased on https://lore.kernel.org/qemu-devel/20251009184057.19973-1-harshpb@linux.ibm.com/

Remove the deprecated pseries-3.0 up to pseries-4.2 machines,
which are older than 6 years. Remove resulting dead code.

Harsh Prateek Bora (5):
  ppc/spapr: remove deprecated machine pseries-3.0
  ppc/spapr: remove deprecated machine pseries-3.1
  ppc/spapr: remove deprecated machine pseries-4.0
  ppc/spapr: remove deprecated machine pseries-4.1
  ppc/spapr: remove deprecated machine pseries-4.2

Philippe Mathieu-Daudé (6):
  hw/ppc/spapr: Remove SpaprMachineClass::nr_xirqs field
  hw/ppc/spapr: Inline spapr_dtb_needed()
  hw/ppc/spapr: Inline few SPAPR_IRQ_* uses
  target/ppc/kvm: Remove kvmppc_get_host_serial() as unused
  target/ppc/kvm: Remove kvmppc_get_host_model() as unused
  hw/ppc/spapr: Remove SpaprMachineClass::phb_placement callback

 include/hw/ppc/spapr.h     |  16 --
 include/hw/ppc/spapr_irq.h |   1 -
 target/ppc/kvm_ppc.h       |  12 --
 hw/ppc/spapr.c             | 299 ++++++++-----------------------------
 hw/ppc/spapr_caps.c        |  12 +-
 hw/ppc/spapr_events.c      |  20 +--
 hw/ppc/spapr_hcall.c       |   5 -
 hw/ppc/spapr_irq.c         |  36 +----
 hw/ppc/spapr_pci.c         |  32 +---
 hw/ppc/spapr_vio.c         |   9 --
 target/ppc/kvm.c           |  11 --
 11 files changed, 77 insertions(+), 376 deletions(-)

----------------------------------------------------------------------

New:  KVM: selftests: Minor improvements to asserts in test_vmx_nested_state()
[PATCH v2 01/23] KVM: selftests: Minor improvements to asserts in test_vmx_nested_state()
Author: Yosry Ahmed <yosry.ahmed@linux.dev>

Display the address as hex if the asserts for the vmxon_pa and vmcs12_pa
fail, and assert that the flags are 0 as expected.

Reviewed-by: Jim Mattson <jmattson@google.com>
Signed-off-by: Yosry Ahmed <yosry.ahmed@linux.dev>
---
 .../selftests/kvm/x86/vmx_set_nested_state_test.c      | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  Extend test coverage for nested SVM
[PATCH v2 00/23] Extend test coverage for nested SVM
Author: Yosry Ahmed <yosry.ahmed@linux.dev>

There are multiple selftests exercising nested VMX that are not specific
to VMX (at least not anymore). Extend their coverage to nested SVM.

This version is significantly different (and longer) than v1 [1], mainly
due to the change of direction to reuse __virt_pg_map() for nested EPT/NPT
mappings instead of extending the existing nested EPT infrastructure. It
also has a lot more fixups and cleanups.

This series depends on two other series:
- "KVM: SVM: GIF and EFER.SVME are independent" [2]
- "KVM: selftests: Add test of SET_NESTED_STATE with 48-bit L2 on 57-bit L1" [3]

The dependency on the former is because set_nested_state_test is now
also a regression test for that fix. The dependency on the latter is
purely to avoid conflicts.

The patch ordering is not perfect, I did some cleanups toward the end
that arguably should have been moved to the beginning, but I had to stop
rebasing and send the patches out at some point:

Block #1 (patch 1 to patch 7):
- Direct successors to the first 6 patches in v1, addressing review
  comments from Jim and collecting his review tags. These patch extend 5
  of the nVMX tests to cover nSVM.

Block #2 (patch 8 to patch 11):
- Miscellaneous fixups and cleanups.

Block #3 (patch 11 to patch 17):
- Moving nested EPT mapping functions to use __virt_pg_map(), patches 11
  to 15 do the prep work, and patch 16 does the switch. Patch 17 is a
  minor cleanup on top (which arguably fits better in block #2).

Block #4 (patch 18 to 23):
- Patches 18 to 22 are prep work to generalize the nested EPT mapping
  code to work with nested NPT, and patch 23 finally extends the nested
  dirty logging test to work with nSVM using the nested NPT
  infrastructure. Patch 19 is admittedly an imposter in this block and
  should have been in block #2.

[1]https://lore.kernel.org/kvm/20251001145816.1414855-1-yosry.ahmed@linux.dev/
[2]https://lore.kernel.org/kvm/20251009223153.3344555-1-jmattson@google.com/
[3]https://lore.kernel.org/kvm/20250917215031.2567566-1-jmattson@google.com/

Yosry Ahmed (23):
  KVM: selftests: Minor improvements to asserts in
    test_vmx_nested_state()
  KVM: selftests: Extend vmx_set_nested_state_test to cover SVM
  KVM: selftests: Extend vmx_close_while_nested_test to cover SVM
  KVM: selftests: Extend vmx_nested_tsc_scaling_test to cover SVM
  KVM: selftests: Move nested invalid CR3 check to its own test
  KVM: selftests: Extend nested_invalid_cr3_test to cover SVM
  KVM: selftests: Extend vmx_tsc_adjust_test to cover SVM
  KVM: selftests: Stop hardcoding PAGE_SIZE in x86 selftests
  KVM: selftests: Remove the unused argument to prepare_eptp()
  KVM: selftests: Stop using __virt_pg_map() directly in tests
  KVM: selftests: Make sure vm->vpages_mapped is always up-to-date
  KVM: selftests: Parameterize the PTE bitmasks for virt mapping
    functions
  KVM: selftests: Pass the root GPA into virt_get_pte()
  KVM: selftests: Pass the root GPA into __virt_pg_map()
  KVM: selftests: Stop setting AD bits on nested EPTs on creation
  KVM: selftests: Use __virt_pg_map() for nested EPTs
  KVM: selftests: Kill eptPageTablePointer
  KVM: selftests: Generalize nested mapping functions
  KVM: selftests: Move nested MMU mapping functions outside of vmx.c
  KVM: selftests: Stop passing a memslot to nested_map_memslot()
  KVM: selftests: Allow kvm_cpu_has_ept() to be called on AMD CPUs
  KVM: selftests: Set the user bit on nested MMU PTEs
  KVM: selftests: Extend vmx_dirty_log_test to cover SVM

 tools/testing/selftests/kvm/Makefile.kvm      |  11 +-
 .../testing/selftests/kvm/include/kvm_util.h  |   1 +
 .../selftests/kvm/include/x86/processor.h     |  34 ++-
 .../selftests/kvm/include/x86/svm_util.h      |   8 +
 tools/testing/selftests/kvm/include/x86/vmx.h |  15 +-
 tools/testing/selftests/kvm/lib/kvm_util.c    |   3 -
 .../testing/selftests/kvm/lib/x86/memstress.c |   6 +-
 .../testing/selftests/kvm/lib/x86/processor.c | 184 +++++++++++---
 tools/testing/selftests/kvm/lib/x86/svm.c     |  19 ++
 tools/testing/selftests/kvm/lib/x86/vmx.c     | 232 +++---------------
 tools/testing/selftests/kvm/mmu_stress_test.c |   6 +-
 ...ested_test.c => close_while_nested_test.c} |  42 +++-
 .../selftests/kvm/x86/hyperv_features.c       |   2 +-
 tools/testing/selftests/kvm/x86/hyperv_ipi.c  |  18 +-
 .../selftests/kvm/x86/hyperv_tlb_flush.c      |   2 +-
 ...rty_log_test.c => nested_dirty_log_test.c} | 102 +++++---
 .../kvm/x86/nested_invalid_cr3_test.c         | 118 +++++++++
 ...adjust_test.c => nested_tsc_adjust_test.c} |  79 +++---
 ...aling_test.c => nested_tsc_scaling_test.c} |  48 +++-
 ...d_state_test.c => set_nested_state_test.c} | 135 +++++++++-
 .../selftests/kvm/x86/sev_smoke_test.c        |   2 +-
 tools/testing/selftests/kvm/x86/state_test.c  |   2 +-
 .../selftests/kvm/x86/userspace_io_test.c     |   2 +-
 23 files changed, 695 insertions(+), 376 deletions(-)

----------------------------------------------------------------------

