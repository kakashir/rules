From a46bd38d7 to da5830ba2
KVM mailing list update from a46bd38d7 to da5830ba2

Top 15 contributor Email domains (Based on Email Body)

      7 bytedance.com
      3 redhat.com
      2 amd.com
      1 nvidia.com
      1 kernel.org
      1 jaguarmicro.com

Top 15 contributors (Based on Email Body)

      6  Li Zhe <lizhe.67@bytedance.com>
      2  Thomas Huth <thuth@redhat.com>
      2  Babu Moger <babu.moger@amd.com>
      1  Xu Lu <luxu.kernel@bytedance.com>
      1  Paolo Bonzini <pbonzini@redhat.com>
      1  Mark Brown <broonie@kernel.org>
      1  Liming Wu <liming.wu@jaguarmicro.com>
      1  Jason Gunthorpe <jgg@nvidia.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  target/i386: Add TSA attack variants TSA-SQ and TSA-L1
[PATCH v2 1/2] target/i386: Add TSA attack variants TSA-SQ and TSA-L1
Author: Babu Moger <babu.moger@amd.com>

Transient Scheduler Attacks (TSA) are new speculative side channel attacks
related to the execution timing of instructions under specific
microarchitectural conditions. In some cases, an attacker may be able to
use this timing information to infer data from other contexts, resulting in
information leakage.

AMD has identified two sub-variants two variants of TSA.
CPUID Fn8000_0021 ECX[1] (TSA_SQ_NO).
	If this bit is 1, the CPU is not vulnerable to TSA-SQ.

CPUID Fn8000_0021 ECX[2] (TSA_L1_NO).
	If this bit is 1, the CPU is not vulnerable to TSA-L1.

Add the new feature word FEAT_8000_0021_ECX and corresponding bits to
detect TSA variants.

Link: https://www.amd.com/content/dam/amd/en/documents/resources/bulletin/technical-guidance-for-mitigating-transient-scheduler-attacks.pdf
Co-developed-by: Borislav Petkov (AMD) <bp@alien8.de>
Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
Signed-off-by: Babu Moger <babu.moger@amd.com>
---
v2: Split the patches into two.
    Not adding the feature bit in CPU model now. Users can add the feature
    bits by using the option "-cpu EPYC-Genoa,+tsa-sq-no,+tsa-l1-no".

v1: https://lore.kernel.org/qemu-devel/20250709104956.GAaG5JVO-74EF96hHO@fat_crate.local/
---
 target/i386/cpu.c | 17 +++++++++++++++++
 target/i386/cpu.h |  6 ++++++
 2 files changed, 23 insertions(+)

----------------------------------------------------------------------

New:  powerpc: Replace the obsolete address of the FSF
[PATCH] powerpc: Replace the obsolete address of the FSF
Author: Thomas Huth <thuth@redhat.com>


The FSF does not reside in the Franklin street anymore. Let's update
the address with the link to their website, as suggested in the latest
revision of the GPL-2.0 license.
(See https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt for example)

Signed-off-by: Thomas Huth <thuth@redhat.com>
---
 arch/powerpc/boot/crtsavres.S            | 5 ++---
 arch/powerpc/include/uapi/asm/eeh.h      | 5 ++---
 arch/powerpc/include/uapi/asm/kvm.h      | 5 ++---
 arch/powerpc/include/uapi/asm/kvm_para.h | 5 ++---
 arch/powerpc/include/uapi/asm/ps3fb.h    | 3 +--
 arch/powerpc/lib/crtsavres.S             | 5 ++---
 arch/powerpc/xmon/ppc.h                  | 5 +++--
 7 files changed, 14 insertions(+), 19 deletions(-)

----------------------------------------------------------------------

New:  KVM: selftests: Add CONFIG_EVENTFD for irqfd selftest
[PATCH] KVM: selftests: Add CONFIG_EVENTFD for irqfd selftest
Author: Mark Brown <broonie@kernel.org>

In 7e9b231c402a ("KVM: selftests: Add a KVM_IRQFD test to verify
uniqueness requirements") we added a test for the newly added irqfd
support but since this feature works with eventfds it won't work unless
the kernel has been built wth eventfd support.  Add CONFIG_EVENTFD to
the list of required options for the KVM selftests.

Signed-off-by: Mark Brown <broonie@kernel.org>
---
 tools/testing/selftests/kvm/config | 1 +
 1 file changed, 1 insertion(+)

----------------------------------------------------------------------

New:  KVM: Documentation: document how KVM is tested
[PATCH] KVM: Documentation: document how KVM is tested
Author: Paolo Bonzini <pbonzini@redhat.com>

Proper testing greatly simplifies both patch development and review,
but it can be unclear what kind of userspace or guest support
should accompany new features. Clarify maintainer expectations
in terms of testing expectations; additionally, list the cases in
which open-source userspace support is pretty much a necessity and
its absence can only be mitigated by selftests.

While these ideas have long been followed implicitly by KVM contributors
and maintainers, formalize them in writing to provide consistent (though
not universal) guidelines.

Suggested-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 Documentation/virt/kvm/review-checklist.rst | 92 +++++++++++++++++++--
 1 file changed, 87 insertions(+), 5 deletions(-)

----------------------------------------------------------------------

New:  mm: introduce num_pages_contiguous()
[PATCH v4 1/5] mm: introduce num_pages_contiguous()
Author: lizhe.67 <lizhe.67@bytedance.com>


Function num_pages_contiguous() determine the number of contiguous
pages starting from the first page in the given array of page pointers.
VFIO will utilize this interface to accelerate the VFIO DMA map process.

Suggested-by: David Hildenbrand <david@redhat.com>
Suggested-by: Jason Gunthorpe <jgg@ziepe.ca>
Signed-off-by: Li Zhe <lizhe.67@bytedance.com>
Acked-by: David Hildenbrand <david@redhat.com>
---
 include/linux/mm.h | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

----------------------------------------------------------------------

New:  vfio/type1: optimize vfio_pin_pages_remote() and vfio_unpin_pages_remote()
[PATCH v4 0/5] vfio/type1: optimize vfio_pin_pages_remote() and vfio_unpin_pages_remote()
Author: lizhe.67 <lizhe.67@bytedance.com>


This patchset is an integration of the two previous patchsets[1][2].

When vfio_pin_pages_remote() is called with a range of addresses that
includes large folios, the function currently performs individual
statistics counting operations for each page. This can lead to significant
performance overheads, especially when dealing with large ranges of pages.

The function vfio_unpin_pages_remote() has a similar issue, where executing
put_pfn() for each pfn brings considerable consumption.

This patchset primarily optimizes the performance of the relevant functions
by batching the less efficient operations mentioned before.

The first two patch optimizes the performance of the function
vfio_pin_pages_remote(), while the remaining patches optimize the
performance of the function vfio_unpin_pages_remote().

The performance test results, based on v6.16-rc4, for completing the 16G
VFIO MAP/UNMAP DMA, obtained through unit test[3] with slight
modifications[4], are as follows.

Base(6.16-rc4):
./vfio-pci-mem-dma-map 0000:03:00.0 16
------- AVERAGE (MADV_HUGEPAGE) --------
VFIO MAP DMA in 0.047 s (340.2 GB/s)
VFIO UNMAP DMA in 0.135 s (118.6 GB/s)
------- AVERAGE (MAP_POPULATE) --------
VFIO MAP DMA in 0.280 s (57.2 GB/s)
VFIO UNMAP DMA in 0.312 s (51.3 GB/s)
------- AVERAGE (HUGETLBFS) --------
VFIO MAP DMA in 0.052 s (310.5 GB/s)
VFIO UNMAP DMA in 0.136 s (117.3 GB/s)

With this patchset:
------- AVERAGE (MADV_HUGEPAGE) --------
VFIO MAP DMA in 0.027 s (600.7 GB/s)
VFIO UNMAP DMA in 0.045 s (357.0 GB/s)
------- AVERAGE (MAP_POPULATE) --------
VFIO MAP DMA in 0.261 s (61.4 GB/s)
VFIO UNMAP DMA in 0.288 s (55.6 GB/s)
------- AVERAGE (HUGETLBFS) --------
VFIO MAP DMA in 0.031 s (516.4 GB/s)
VFIO UNMAP DMA in 0.045 s (353.9 GB/s)

For large folio, we achieve an over 40% performance improvement for VFIO
MAP DMA and an over 66% performance improvement for VFIO DMA UNMAP. For
small folios, the performance test results show a slight improvement with
the performance before optimization.

[1]: https://lore.kernel.org/all/20250529064947.38433-1-lizhe.67@bytedance.com/
[2]: https://lore.kernel.org/all/20250620032344.13382-1-lizhe.67@bytedance.com/#t
[3]: https://github.com/awilliam/tests/blob/vfio-pci-mem-dma-map/vfio-pci-mem-dma-map.c
[4]: https://lore.kernel.org/all/20250610031013.98556-1-lizhe.67@bytedance.com/

Li Zhe (5):
  mm: introduce num_pages_contiguous()
  vfio/type1: optimize vfio_pin_pages_remote()
  vfio/type1: batch vfio_find_vpfn() in function
    vfio_unpin_pages_remote()
  vfio/type1: introduce a new member has_rsvd for struct vfio_dma
  vfio/type1: optimize vfio_unpin_pages_remote()

 drivers/vfio/vfio_iommu_type1.c | 111 ++++++++++++++++++++++++++------
 include/linux/mm.h              |  23 +++++++
 2 files changed, 113 insertions(+), 21 deletions(-)

----------------------------------------------------------------------

