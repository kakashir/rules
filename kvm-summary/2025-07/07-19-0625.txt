From d4e02c8f8 to e7d0c3fcd
KVM mailing list update from d4e02c8f8 to e7d0c3fcd

Top 15 contributor Email domains (Based on Email Body)

     10 kernel.org
      5 redhat.com
      5 linux.intel.com
      1 yandex-team.ru
      1 linutronix.de
      1 intel.com
      1 google.com
      1 baidu.com

Top 15 contributors (Based on Email Body)

      5  Marc Zyngier <maz@kernel.org>
      5  Dapeng Mi <dapeng1.mi@linux.intel.com>
      4  "Naveen N Rao (AMD)" <naveen@kernel.org>
      3  Igor Mammedov <imammedo@redhat.com>
      2  Jason Wang <jasowang@redhat.com>
      1  =?utf-8?q?Thomas_Wei=C3=9Fschuh?= <thomas.weissschuh@linutronix.de>
      1  Sean Christopherson <seanjc@google.com>
      1  Nikolay Kuratov <kniv@yandex-team.ru>
      1  Li RongQing <lirongqing@baidu.com>
      1  Kees Cook <kees@kernel.org>
      1  dongsheng <dongsheng.x.zhang@intel.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  x86: add HPET counter tests
[kvm-unit-tests PATCH v3 0/2] x86: add HPET counter tests
Author: Igor Mammedov <imammedo@redhat.com>

Changelog:
  v3:
     * fix test running long time due to control thread
       also running read test and stalling starting other threads 
     * improve latency accuracy 
     * increase max number of vcpus to 448
       (that's what I had in hands for testing)

previous rev:
  '[PATCH v2] x86: add HPET counter read micro benchmark and enable/disable torture tests'
  https://www.spinics.net/lists/kvm/msg383777.html

Igor Mammedov (2):
  x86: bump number of max cpus to 448
  x86: add HPET counter read micro benchmark and enable/disable torture
    tests

 lib/x86/smp.h        |  2 +-
 x86/Makefile.common  |  2 +
 x86/hpet_read_test.c | 96 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 99 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

New:  x86: bump number of max cpus to 448
[kvm-unit-tests PATCH v3 1/2] x86: bump number of max cpus to 448
Author: Igor Mammedov <imammedo@redhat.com>

Signed-off-by: Igor Mammedov <imammedo@redhat.com>
---
 lib/x86/smp.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: arm64: Userspace GICv3 sysreg access fixes and testing
[PATCH 0/4] KVM: arm64: Userspace GICv3 sysreg access fixes and testing
Author: Marc Zyngier <maz@kernel.org>

As a follow-up to my earlier series at [1], here's a small set of
fixes to address an annoying bug that made ICH_HCR_EL2 unreachable
from userspace -- not something you'd expect.

So the first patch fixes the ordering the the sysreg table, which had
ICH_HCR_EL2 at the wrong spot. The next two ensure that we now check
for the table to be sorted (just like all the other tables). Finally,
the last patch augments the vgic_init selftest to actually check that
we can access these registers

[1] https://lore.kernel.org/r/20250714122634.3334816-1-maz@kernel.org

Marc Zyngier (4):
  KVM: arm64: vgic-v3: Fix ordering of ICH_HCR_EL2
  KVM: arm64: Clarify the check for reset callback in
    check_sysreg_table()
  KVM: arm64: Enforce the sorting of the GICv3 system register table
  KVM: arm64: selftest: vgic-v3: Add basic GICv3 sysreg userspace access
    test

 arch/arm64/kvm/sys_regs.c                     |  20 +-
 arch/arm64/kvm/vgic-sys-reg-v3.c              |   8 +-
 arch/arm64/kvm/vgic/vgic.h                    |   1 +
 tools/testing/selftests/kvm/arm64/vgic_init.c | 219 +++++++++++++++++-
 4 files changed, 237 insertions(+), 11 deletions(-)

----------------------------------------------------------------------

New:  KVM: arm64: vgic-v3: Fix ordering of ICH_HCR_EL2
[PATCH 1/4] KVM: arm64: vgic-v3: Fix ordering of ICH_HCR_EL2
Author: Marc Zyngier <maz@kernel.org>

The sysreg tables are supposed to be sorted so that a binary search
can easily find them. However, ICH_HCR_EL2 is obviously at the wrong
spot.

Move it where it belongs.

Fixes: 9fe9663e47e21 ("KVM: arm64: Expose GICv3 EL2 registers via KVM_DEV_ARM_VGIC_GRP_CPU_SYSREGS")
Signed-off-by: Marc Zyngier <maz@kernel.org>
---
 arch/arm64/kvm/vgic-sys-reg-v3.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  x86/kvm: Reorder PV spinlock checks for dedicated CPU case
[PATCH] x86/kvm: Reorder PV spinlock checks for dedicated CPU case
Author: lirongqing <lirongqing@baidu.com>


When a vCPU has a dedicated physical CPU, typically, the hypervisor
disables the HLT exit too, rendering the KVM_FEATURE_PV_UNHALT feature
unavailable, and virt_spin_lock_key is expected to be disabled in
this configuration, but:

The problematic execution flow caused the enabled virt_spin_lock_key:
- First check PV_UNHALT
- Then check dedicated CPUs

So change the order:
- First check dedicated CPUs
- Then check PV_UNHALT

This ensures virt_spin_lock_key is disable when dedicated physical
CPUs are available and HLT exit is disabled, and this will gives a
pretty performance boost at high contention level

Signed-off-by: Li RongQing <lirongqing@baidu.com>
---
 arch/x86/kernel/kvm.c | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

----------------------------------------------------------------------

New:  KVM: SVM: Fix clearing IRQ window inhibit with nested guests
[RFC PATCH 1/3] KVM: SVM: Fix clearing IRQ window inhibit with nested guests
Author: Naveen N Rao (AMD) <naveen@kernel.org>

Clearing IRQ window inhibit today relies on interrupt window
interception, but that is not always reachable when nested guests are
involved.

If L1 is intercepting IRQs, then interrupt_window_interception() will
never be reached while L2 is active, because the only reason KVM
would set the V_IRQ intercept in vmcb02 would be on behalf of L1, i.e.
because of vmcb12.  svm_clear_vintr() always operates on (at least)
vmcb01, and VMRUN unconditionally sets GIF=1, which means that
enter_svm_guest_mode() will always do svm_clear_vintr() via
svm_set_gif(svm, true). I.e. KVM will keep the VM-wide inhibit set until
control transfers back to L1 *and* an interrupt window is triggered.

If L1 is not intercepting IRQs, KVM may immediately inject L1's ExtINT
into L2 if IRQs are enabled in L2 without taking an interrupt window
interception.

Address this by clearing the IRQ window inhibit when KVM actually
injects an interrupt and there are no further injectable interrupts.
That way, if L1 isn't intercepting IRQs, KVM will drop the inhibit as
soon as an interrupt is injected into L2. And if L1 is intercepting
IRQs, KVM will keep the inhibit until the IRQ is injected into L2. So,
AVIC won't be left inhibited.

---
 arch/x86/kvm/svm/svm.c | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

----------------------------------------------------------------------

New:  KVM: SVM: Fix IRQ window inhibit handling
[RFC PATCH 0/3] KVM: SVM: Fix IRQ window inhibit handling
Author: Naveen N Rao (AMD) <naveen@kernel.org>

Sean, Paolo,
I have attempted to take the changes discussed in the below thread and 
to convert them into a patch series:
http://lkml.kernel.org/r/Z6JoInXNntIoHLQ8@google.com

I have tried to describe the changes, but the nested aspects would 
definitely need a review to ensure correctness and that all aspects are 
covered there.

None of these patches include patch tags since none were provided in the 
discussion. I have proposed patch trailers on the individual patches.  
Please take a look and let me know if that's fine.

I tested this lightly with nested guests as well and it is working fine 
for me.


Thanks,
Naveen


Naveen N Rao (AMD) (3):
  KVM: SVM: Fix clearing IRQ window inhibit with nested guests
  KVM: SVM: Fix IRQ window inhibit handling across multiple vCPUs
  KVM: SVM: Optimize IRQ window inhibit handling

 arch/x86/include/asm/kvm_host.h | 16 +++++++++
 arch/x86/kvm/svm/svm.h          |  1 +
 arch/x86/kvm/svm/svm.c          | 60 ++++++++++++++++++++-------------
 arch/x86/kvm/x86.c              | 45 ++++++++++++++++++++++++-
 4 files changed, 98 insertions(+), 24 deletions(-)

----------------------------------------------------------------------

New:  netvsc: transfer lower device max tso size
[PATCH] netvsc: transfer lower device max tso size
Author: Cindy Lu <lulu@redhat.com>


When netvsc is accelerated by the lower device, we can advertise the
lower device max tso size in order to get better performance.

One example is that when 802.3ad encap is enabled by netvsc, it has a
lower max tso size than 64K. This will lead to software segmentation
of forwarding GSO packet (e.g the one from VM/tap).

This patch help to recover the performance.

Signed-off-by: Jason Wang <jasowang@redhat.com>
Tested-by: Cindy Lu <lulu@redhat.com>
---
 drivers/net/hyperv/netvsc_drv.c |  2 +-
 include/linux/netdevice.h       |  4 ++++
 net/core/dev.c                  | 18 ++++++++++++++++++
 3 files changed, 23 insertions(+), 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: x86/pmu: Correct typo "_COUTNERS" to "_COUNTERS"
[PATCH v2 1/5] KVM: x86/pmu: Correct typo "_COUTNERS" to "_COUNTERS"
Author: Dapeng Mi <dapeng1.mi@linux.intel.com>

Fix typos. "_COUTNERS" -> "_COUNTERS".

Signed-off-by: Dapeng Mi <dapeng1.mi@linux.intel.com>
Tested-by: Yi Lai <yi1.lai@intel.com>
---
 arch/x86/include/asm/kvm_host.h | 8 ++++----
 arch/x86/kvm/vmx/pmu_intel.c    | 6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

New:  Fix PMU kselftests errors on GNR/SRF/CWF
[PATCH v2 0/5] Fix PMU kselftests errors on GNR/SRF/CWF
Author: Dapeng Mi <dapeng1.mi@linux.intel.com>

This patch series fixes KVM PMU kselftests errors encountered on Granite
Rapids (GNR), Sierra Forest (SRF) and Clearwater Forest (CWF).

GNR and SRF starts to support the timed PEBS. Timed PEBS adds a new
"retired latency" field in basic info group to show the timing info and
the PERF_CAPABILITIES[17] called "PEBS_TIMING_INFO" bit is added
to indicated whether timed PEBS is supported. KVM module doesn't need to
do any specific change to support timed PEBS except a perf change adding
PERF_CAP_PEBS_TIMING_INFO flag into PERF_CAP_PEBS_MASK[1]. The patch 2/5
adds timed PEBS support in vmx_pmu_caps_test and fix the error as the
PEBS caps field mismatch.

CWF introduces 5 new architectural events (4 level-1 topdown metrics
events and LBR inserts event). The patch 3/5 adds support for these 5
arch-events and fixes the error that caused by mismatch between HW real
supported arch-events number with NR_INTEL_ARCH_EVENTS.

On Intel Atom platforms, the PMU events "Instruction Retired" or
"Branch Instruction Retired" may be overcounted for some certain
instructions, like FAR CALL/JMP, RETF, IRET, VMENTRY/VMEXIT/VMPTRLD
and complex SGX/SMX/CSTATE instructions/flows[2].

In details, for the Atom platforms before Sierra Forest (including
Sierra Forest), Both 2 events "Instruction Retired" and
"Branch Instruction Retired" would be overcounted on these certain
instructions, but for Clearwater Forest only "Instruction Retired" event
is overcounted on these instructions.

As this overcount issue, pmu_counters_test and pmu_event_filter_test
would fail on the precise event count validation for these 2 events on
Atom platforms.

To work around this Atom platform overcount issue, Patches 4-5/5 looses
the precise count validation separately for pmu_counters_test and
pmu_event_filter_test.

BTW, this patch series doesn't depend on the mediated vPMU support.

Changes:
  * Add error fix for vmx_pmu_caps_test on GNR/SRF (patch 2/5).
  * Opportunistically fix a typo (patch 1/5).

Tests:
  * PMU kselftests (pmu_counters_test/pmu_event_filter_test/
    vmx_pmu_caps_test) passed on Intel SPR/GNR/SRF/CWF platforms.

History:
  * v1: https://lore.kernel.org/all/20250712172522.187414-1-dapeng1.mi@linux.intel.com/

Ref:
  [1] https://lore.kernel.org/all/20250717090302.11316-1-dapeng1.mi@linux.intel.com/
  [2] https://edc.intel.com/content/www/us/en/design/products-and-solutions/processors-and-chipsets/sierra-forest/xeon-6700-series-processor-with-e-cores-specification-update/errata-details

Dapeng Mi (4):
  KVM: x86/pmu: Correct typo "_COUTNERS" to "_COUNTERS"
  KVM: selftests: Add timing_info bit support in vmx_pmu_caps_test
  KVM: Selftests: Validate more arch-events in pmu_counters_test
  KVM: selftests: Relax branches event count check for event_filter test

dongsheng (1):
  KVM: selftests: Relax precise event count validation as overcount
    issue

 arch/x86/include/asm/kvm_host.h               |  8 ++--
 arch/x86/kvm/vmx/pmu_intel.c                  |  6 +--
 tools/testing/selftests/kvm/include/x86/pmu.h | 19 ++++++++
 .../selftests/kvm/include/x86/processor.h     |  7 ++-
 tools/testing/selftests/kvm/lib/x86/pmu.c     | 43 +++++++++++++++++++
 .../selftests/kvm/x86/pmu_counters_test.c     | 39 ++++++++++++++---
 .../selftests/kvm/x86/pmu_event_filter_test.c |  9 +++-
 .../selftests/kvm/x86/vmx_pmu_caps_test.c     |  3 +-
 8 files changed, 117 insertions(+), 17 deletions(-)

----------------------------------------------------------------------

