From 5ec3774f1 to 5ff7953eb
KVM mailing list update from 5ec3774f1 to 5ff7953eb

Top 15 contributor Email domains (Based on Email Body)

      8 intel.com
      6 grsecurity.net
      5 redhat.com
      5 linutronix.de
      5 kernel.org
      3 google.com
      2 raymakers.nl

Top 15 contributors (Based on Email Body)

      8  Adrian Hunter <adrian.hunter@intel.com>
      6  Mathias Krause <minipli@grsecurity.net>
      5  Thomas Huth <thuth@redhat.com>
      5  Kees Cook <kees@kernel.org>
      5  "Ahmed S. Darwish" <darwi@linutronix.de>
      3  David Matlack <dmatlack@google.com>
      2  Thijs Raymakers <thijs@raymakers.nl>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  Revert "KVM: selftests: Override ARCH for x86_64
[PATCH v2 1/2] Revert "KVM: selftests: Override ARCH for x86_64
Author: David Matlack <dmatlack@google.com>

This reverts commit 9af04539d474dda4984ff4909d4568e6123c8cba.

If ARCH is set on the command line then Make will skip the variable
assignment to convert x86_64 to x86. i.e. Revert this commit because it
breaks builds where ARCH=x86_64 is specified on the command line.

Fixes: 9af04539d474 ("KVM: selftests: Override ARCH for x86_64 instead of using ARCH_DIR")
Signed-off-by: David Matlack <dmatlack@google.com>
---
 tools/testing/selftests/kvm/Makefile     |  4 +++-
 tools/testing/selftests/kvm/Makefile.kvm | 26 ++++++++++++------------
 2 files changed, 16 insertions(+), 14 deletions(-)

----------------------------------------------------------------------

New:  KVM: selftests: Use $(SRCARCH) and share definition
[PATCH v2 0/2] KVM: selftests: Use $(SRCARCH) and share definition
Author: David Matlack <dmatlack@google.com>

This series switches the KVM selftests Makefile to use $(SRCARCH)
instead of $(ARCH) to fix a build issue when ARCH=x86_64 is specified on
the command line.

v1: https://lore.kernel.org/kvm/20250430224720.1882145-1-dmatlack@google.com/
 - Split out the revert of commit 9af04539d474 ("KVM: selftests:
   Override ARCH for x86_64 instead of using ARCH_DIR") from the rename
   to SRCARCH

David Matlack (2):
  Revert "KVM: selftests: Override ARCH for x86_64 instead of using
    ARCH_DIR"
  KVM: selftests: Rename $(ARCH_DIR) to $(SRCARCH)

 tools/testing/selftests/kvm/Makefile     |  8 +++++---
 tools/testing/selftests/kvm/Makefile.kvm | 26 ++++++++++++------------
 2 files changed, 18 insertions(+), 16 deletions(-)

----------------------------------------------------------------------

New:  x86/cpuid: Remove transitional <asm/cpuid.h> header
[PATCH v5 1/4] x86/cpuid: Remove transitional <asm/cpuid.h> header
Author: Ahmed S. Darwish <darwi@linutronix.de>

All CPUID call sites were updated at commit:

    968e30006807 ("x86/cpuid: Set <asm/cpuid/api.h> as the main CPUID header")

to include <asm/cpuid/api.h> instead of <asm/cpuid.h>.

The <asm/cpuid.h> header was still retained as a wrapper, just in case
some new code in -next started using it.  Now that everything is merged
to Linus' tree, remove the header.

Signed-off-by: Ahmed S. Darwish <darwi@linutronix.de>
---
 arch/x86/include/asm/cpuid.h | 8 --------
 1 file changed, 8 deletions(-)

----------------------------------------------------------------------

New:  x86: Disentangle <asm/processor.h> dependency on CPUID headers
[PATCH v5 0/4] x86: Disentangle <asm/processor.h> dependency on CPUID headers
Author: Ahmed S. Darwish <darwi@linutronix.de>

Hi,

This series stops <asm/processor.h> from including <asm/cpuid/api.h>
since there is no code at the former which needs the latter.

For this to work, modify all CPUID call sites that implicitly include the
CPUID <asm/cpuid/api.h> header to explicitly include it instead.

Note, this allows the CPUID API header to include <asm/processor.h>
without inducing a circular dependency — which is needed for the upcoming
CPUID model and parser.


Changelog v5
~~~~~~~~~~~~

Fix a left-over call-site (arch/x86/kvm/svm/sev.c) after the alphabetical
reorderings removal.


Changelog v4
~~~~~~~~~~~~

( [PATCH v4 0/4] x86: Disentangle <asm/processor.h> dependency on CPUID headers
  https://lore.kernel.org/lkml/20250723173644.33568-1-darwi@linutronix.de )

Per feedback at:

    https://lore.kernel.org/lkml/aH-dqcMWj3cFDos2@google.com

Remove the two patches doing the include lines alphabetical and section
reorderings.

I leave it to the maintainers to merge this version or v3: highest
priority is to just disentangle the headers dependency, to keep the CPUID
work going.


Changelog v3
~~~~~~~~~~~~

( [PATCH v3 0/6] x86: Disentangle <asm/processor.h> dependency on CPUID headers
  https://lore.kernel.org/lkml/20250722065448.413503-1-darwi@linutronix.de )

* For the KVM CPUID call sites:

    arch/x86/kvm/mmu/mmu.c
    arch/x86/kvm/svm/sev.c
    arch/x86/kvm/svm/svm.c
    arch/x86/kvm/vmx/pmu_intel.c
    arch/x86/kvm/vmx/sgx.c
    arch/x86/kvm/vmx/vmx.c

  Let them explicitly include <asm/cpuid/api.h> instead of letting their
  internal arch/x86/kvm/cpuid.h header does it.  The latter header does
  not need the former, so making it include a itnot just for the sake of
  its call sites was not correct.

* While at it, modify /all/ call sites that use the CPUID API to
  explicitly include <asm/cpuid/api.h>.

  Previous iterations only modified the CPUID call sites which implicitly
  included the CPUID headers through <asm/processor.h>.  Since we're at
  it anyway, there's no reason not to complete the task across the whole
  kernel tree.

  Thus, also convert below arch/x86/ sites:

    arch/x86/kernel/apic/apic.c
    arch/x86/kernel/cpu/sgx/driver.c
    arch/x86/kernel/cpu/vmware.c
    arch/x86/kernel/jailhouse.c
    arch/x86/kernel/kvm.c
    arch/x86/mm/pti.c
    arch/x86/pci/xen.c
    arch/x86/xen/enlighten_hvm.c
    arch/x86/xen/pmu.c
    arch/x86/xen/time.c

  and below drivers/ sites:

    drivers/gpu/drm/gma500/mmu.c
    drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
    drivers/ras/amd/fmpm.c
    drivers/virt/acrn/hsm.c
    drivers/xen/events/events_base.c
    drivers/xen/grant-table.c
    drivers/xen/xenbus/xenbus_xs.c

  to explicitly include the CPUID API header.

* Fix the v2 i386 compilation error:

    https://lore.kernel.org/x86-cpuid/202507150403.hKKg9xjJ-lkp@intel.com

  by making drivers/char/agp/efficeon-agp.c explicitly include the CPUID
  API.

* Make sure that an "i386 allyesconfig" build is successful this time.

* Based on v6.16-rc7.


Changelog v2
~~~~~~~~~~~~

( [PATCH v2 0/6] x86: Disentangle <asm/processor.h> dependency on CPUID headers
  https://lore.kernel.org/lkml/20250709203033.90125-1-darwi@linutronix.de )

Remove the <asm/cpuid/types.h> include from <asm/processor.h> since only
the upcoming CPUID model needed that — not current mainline code.  That
include was kept in v1, by mistake, because this series was originally
part of the CPUID model patch queue.

Due to the CPUID types include remove above, let
arch/x86/kvm/reverse_cpuid.h include <asm/cpuid/types.h> since it
references the CPUID_EAX..EDX macros.  At this series v1, the KVM header
implicitly included such CPUID types header through <asm/cpufeature.h>,
through <asm/processor.h>.

Drop the "x86/cpuid: Rename cpuid_leaf()/cpuid_subleaf() APIs" patch from
this series.  After a second look, it should be part of the CPUID model
PQ instead.


Changelog v1
~~~~~~~~~~~~

( [PATCH v1 0/7] x86: Disentangle <asm/processor.h> dependency on CPUID APIs
  https://lore.kernel.org/lkml/20250612234010.572636-1-darwi@linutronix.de )

This series avoids including the full CPUID API from <asm/processor.h>.
That header only needs the CPUID data types and not the full API.

Let <asm/processor.h> include <asm/cpuid/types.h> instead of
<asm/cpuid/api.h>.

Modify all CPUID call sites which implicitly included the CPUID API
though <asm/processor.h> to explicitly include <asm/cpuid/api.h> instead.

This work prepares for an upcoming v4 of the CPUID model:

    [PATCH v3 00/44] x86: Introduce a centralized CPUID data model
    https://lore.kernel.org/lkml/20250612234010.572636-1-darwi@linutronix.de

where <asm/cpuid/api.h> needs to include <asm/processor.h>, thus creating
a circular dependency if not resolved beforehand…  Patches 1->19 of the
v3 above had parts of this series circular dependency disentanglement.

Per Boris' remarks above, merge the header includes reorderings into two
patches only: one patch for x86 and one for drivers.

The 0-day bot x86-32 compilation error:

    Re: [PATCH v3 41/44] x86/cpu: <asm/processor.h>: Do not include CPUID…
    https://lore.kernel.org/lkml/202506132039.imS2Pflx-lkp@intel.com

is also fixed in this series.

Beside the call sites converted at CPUID model v3 above, this series also
switches below files:

    arch/x86/kernel/cpu/microcode/core.c
    arch/x86/kernel/cpu/microcode/intel.c
    arch/x86/kernel/cpu/mshyperv.c
    drivers/cpufreq/longrun.c
    drivers/cpufreq/powernow-k7.c
    drivers/cpufreq/powernow-k8.c

to explicitly include <asm/cpuid/api.h>.

Based on v6.16-rc5.

Thanks!

8<----

Ahmed S. Darwish (4):
  x86/cpuid: Remove transitional <asm/cpuid.h> header
  ASoC: Intel: avs: Include CPUID header at file scope
  treewide: Explicitly include the x86 CPUID headers
  x86/cpu: <asm/processor.h>: Do not include the CPUID API header

 arch/x86/boot/compressed/pgtable_64.c         |  1 +
 arch/x86/boot/startup/sme.c                   |  1 +
 arch/x86/coco/tdx/tdx.c                       |  1 +
 arch/x86/events/amd/core.c                    |  2 ++
 arch/x86/events/amd/ibs.c                     |  1 +
 arch/x86/events/amd/lbr.c                     |  2 ++
 arch/x86/events/amd/power.c                   |  3 +++
 arch/x86/events/amd/uncore.c                  |  1 +
 arch/x86/events/intel/core.c                  |  1 +
 arch/x86/events/intel/lbr.c                   |  1 +
 arch/x86/events/zhaoxin/core.c                |  1 +
 arch/x86/include/asm/acrn.h                   |  2 ++
 arch/x86/include/asm/cpuid.h                  |  8 ------
 arch/x86/include/asm/microcode.h              |  1 +
 arch/x86/include/asm/processor.h              |  1 -
 arch/x86/include/asm/xen/hypervisor.h         |  1 +
 arch/x86/kernel/apic/apic.c                   |  1 +
 arch/x86/kernel/cpu/amd.c                     |  1 +
 arch/x86/kernel/cpu/centaur.c                 |  1 +
 arch/x86/kernel/cpu/hygon.c                   |  1 +
 arch/x86/kernel/cpu/mce/core.c                |  1 +
 arch/x86/kernel/cpu/mce/inject.c              |  1 +
 arch/x86/kernel/cpu/microcode/amd.c           |  1 +
 arch/x86/kernel/cpu/microcode/core.c          |  1 +
 arch/x86/kernel/cpu/microcode/intel.c         |  1 +
 arch/x86/kernel/cpu/mshyperv.c                |  1 +
 arch/x86/kernel/cpu/resctrl/core.c            |  1 +
 arch/x86/kernel/cpu/resctrl/monitor.c         |  1 +
 arch/x86/kernel/cpu/scattered.c               |  1 +
 arch/x86/kernel/cpu/sgx/driver.c              |  3 +++
 arch/x86/kernel/cpu/sgx/main.c                |  3 +++
 arch/x86/kernel/cpu/topology_amd.c            |  1 +
 arch/x86/kernel/cpu/topology_common.c         |  1 +
 arch/x86/kernel/cpu/topology_ext.c            |  1 +
 arch/x86/kernel/cpu/transmeta.c               |  3 +++
 arch/x86/kernel/cpu/vmware.c                  |  1 +
 arch/x86/kernel/cpu/zhaoxin.c                 |  1 +
 arch/x86/kernel/cpuid.c                       |  1 +
 arch/x86/kernel/jailhouse.c                   |  1 +
 arch/x86/kernel/kvm.c                         |  1 +
 arch/x86/kernel/paravirt.c                    |  1 +
 arch/x86/kvm/mmu/mmu.c                        |  1 +
 arch/x86/kvm/mmu/spte.c                       |  1 +
 arch/x86/kvm/reverse_cpuid.h                  |  2 ++
 arch/x86/kvm/svm/sev.c                        |  1 +
 arch/x86/kvm/svm/svm.c                        |  1 +
 arch/x86/kvm/vmx/pmu_intel.c                  |  1 +
 arch/x86/kvm/vmx/sgx.c                        |  1 +
 arch/x86/kvm/vmx/vmx.c                        |  1 +
 arch/x86/mm/pti.c                             |  1 +
 arch/x86/pci/xen.c                            |  2 +-
 arch/x86/xen/enlighten_hvm.c                  |  1 +
 arch/x86/xen/pmu.c                            |  1 +
 arch/x86/xen/time.c                           |  1 +
 drivers/char/agp/efficeon-agp.c               |  1 +
 drivers/cpufreq/longrun.c                     |  1 +
 drivers/cpufreq/powernow-k7.c                 |  2 +-
 drivers/cpufreq/powernow-k8.c                 |  1 +
 drivers/cpufreq/speedstep-lib.c               |  1 +
 drivers/firmware/efi/libstub/x86-5lvl.c       |  1 +
 drivers/gpu/drm/gma500/mmu.c                  |  2 ++
 drivers/hwmon/fam15h_power.c                  |  1 +
 drivers/hwmon/k10temp.c                       |  2 ++
 drivers/hwmon/k8temp.c                        |  1 +
 .../net/ethernet/stmicro/stmmac/dwmac-intel.c |  1 +
 drivers/ras/amd/fmpm.c                        |  1 +
 drivers/thermal/intel/intel_hfi.c             |  1 +
 drivers/thermal/intel/x86_pkg_temp_thermal.c  |  1 +
 drivers/virt/acrn/hsm.c                       |  1 +
 drivers/xen/events/events_base.c              |  1 +
 drivers/xen/grant-table.c                     |  1 +
 drivers/xen/xenbus/xenbus_xs.c                |  3 +++
 sound/soc/intel/avs/tgl.c                     | 25 ++++++++++++-------
 73 files changed, 102 insertions(+), 20 deletions(-)

----------------------------------------------------------------------

New:  x86: Don't rely on KVM's hypercall patching
[kvm-unit-tests PATCH 1/3] x86: Don't rely on KVM's hypercall patching
Author: Mathias Krause <minipli@grsecurity.net>

Instead of relying on KVM to patch VMCALL into VMMCALL on non-Intel
systems, use the native instruction directly.

Signed-off-by: Mathias Krause <minipli@grsecurity.net>
---
 x86/apic.c   | 5 ++++-
 x86/vmexit.c | 5 ++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  x86 hypercall spring^W summer cleanup
[kvm-unit-tests PATCH 0/3] x86 hypercall spring^W summer cleanup
Author: Mathias Krause <minipli@grsecurity.net>

This little series cleans up the x86 hypercall tests by making them no
longer rely on KVM's hypercall patching to change a non-native
instruction to the native one.

There are attempts[1] to disable KVM's default behaviour regarding
hypercall patching, actually requiring executing the native hypercall
instruction.

The last patch is also a general cleanup of the x86/hypercall test.

Please apply!

Thanks,
Mathias

[1] https://lore.kernel.org/kvm/20250722204316.1186096-1-minipli@grsecurity.net/

Mathias Krause (3):
  x86: Don't rely on KVM's hypercall patching
  x86: Provide a macro for extable handling
  x86/hypercall: Simplify and increase coverage

 lib/x86/desc.h  |   9 ++--
 x86/apic.c      |   5 +-
 x86/hypercall.c | 131 +++++++++++++++++++++++-------------------------
 x86/vmexit.c    |   5 +-
 4 files changed, 77 insertions(+), 73 deletions(-)

----------------------------------------------------------------------

New:  s390x: Fix unreliable panic-loop tests
[kvm-unit-tests PATCH 1/3] s390x: Fix unreliable panic-loop tests
Author: Thomas Huth <thuth@redhat.com>


In our CI, the s390x panic-loop-extint and panic-loop-pgm tests
are sometimes failing. Having a closer look, this seems to be caused
by ncat sometimes complaining about "Connection reset by peer" on stderr,
likely because QEMU terminated (due to the panic) before ncat could
properly tear down the connection. But having some output on stderr is
interpreted as test failure in qemu_fixup_return_code(), so the test is
marked as failed, even though the panic event occurred as expected.

To fix it, drop the usage of ncat here and simply handle the QMP
input and output via normal fifos instead. This has also the advantage
that we do not need an additional program for these tests anymore
that might not be available in the installation.

Signed-off-by: Thomas Huth <thuth@redhat.com>
---
 scripts/arch-run.bash | 21 +++++----------------
 1 file changed, 5 insertions(+), 16 deletions(-)

----------------------------------------------------------------------

New:  Improvements for the s390x panic-loop tests
[kvm-unit-tests PATCH 0/3] Improvements for the s390x panic-loop tests
Author: Thomas Huth <thuth@redhat.com>

The panic-loop tests sometimes fail in our downstream CI. The first
patch fixes this issue. While we're at it, add the tests to the
upstream CI, too (second patch). The third patch is a RFC: Is it ok
to drop our dependecy on "jq" for these tests by replacing it with "grep"?

Thomas Huth (3):
  s390x: Fix unreliable panic-loop tests
  .gitlab-ci.yml: Add the s390x panic-loop tests to the CI
  scripts/arch-run.bash: Drop the dependency on "jq"

 .gitlab-ci.yml        |  2 ++
 scripts/arch-run.bash | 27 +++++----------------------
 2 files changed, 7 insertions(+), 22 deletions(-)

----------------------------------------------------------------------

New:  x86/tdx: Eliminate duplicate code in tdx_clear_page()
[PATCH V6 1/3] x86/tdx: Eliminate duplicate code in tdx_clear_page()
Author: Adrian Hunter <adrian.hunter@intel.com>

tdx_clear_page() and reset_tdx_pages() duplicate the TDX page clearing
logic.  Rename reset_tdx_pages() to tdx_quirk_reset_paddr() and create
tdx_quirk_reset_page() to call tdx_quirk_reset_paddr() and be used in
place of tdx_clear_page().

The new name reflects that, in fact, the clearing is necessary only for
hardware with a certain quirk.  That is dealt with in a subsequent patch
but doing the rename here avoids additional churn.

Note reset_tdx_pages() is slightly different from tdx_clear_page() because,
more appropriately, it uses mb() in place of __mb().  Except when extra
debugging is enabled (kcsan at present), mb() just calls __mb().

Reviewed-by: Kirill A. Shutemov <kas@kernel.org>
Reviewed-by: Binbin Wu <binbin.wu@linux.intel.com>
Reviewed-by: Xiaoyao Li <xiaoyao.li@intel.com>
Acked-by: Kai Huang <kai.huang@intel.com>
Acked-by: Sean Christopherson <seanjc@google.com>
Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
---


Changes in V6:

	Add Sean's Ack

Changes in V5:

	None

Changes in V4:

	Add and use tdx_quirk_reset_page() for KVM (Sean)

Changes in V3:

	Explain "quirk" rename in commit message (Rick)
	Explain mb() change in commit message  (Rick)
	Add Rev'd-by, Ack'd-by tags

Changes in V2:

	Rename reset_tdx_pages() to tdx_quirk_reset_paddr()
	Call tdx_quirk_reset_paddr() directly


 arch/x86/include/asm/tdx.h  |  2 ++
 arch/x86/kvm/vmx/tdx.c      | 25 +++----------------------
 arch/x86/virt/vmx/tdx/tdx.c | 10 ++++++++--
 3 files changed, 13 insertions(+), 24 deletions(-)

----------------------------------------------------------------------

New:  x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
[PATCH V6 0/3] x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
Author: Adrian Hunter <adrian.hunter@intel.com>

Hi

Here are 3 small self-explanatory patches related to clearing TDX private
pages.

Patch 1 and 2 are minor tidy-ups.

In patch 3, by skipping the clearing step, shutdown time can improve by
up to 40%.


Changes in V6:

      x86/tdx: Eliminate duplicate code in tdx_clear_page()
	Add Sean's Ack

      x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
	Add Xiaoyao's Rev'd-by

Changes in V5:

      x86/tdx: Tidy reset_pamt functions
	New patch

Changes in V4:

      x86/tdx: Eliminate duplicate code in tdx_clear_page()
	Add and use tdx_quirk_reset_page() for KVM (Sean)

      x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
	Add TDX Module Base spec. version (Rick)
	Add Rick's Rev'd-by

Changes in V3:

      x86/tdx: Eliminate duplicate code in tdx_clear_page()
	Explain "quirk" rename in commit message (Rick)
	Explain mb() change in commit message  (Rick)
	Add Rev'd-by, Ack'd-by tags

      x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
	Remove "flush cache" comments (Rick)
	Update function comment to better relate to "quirk" naming (Rick)
	Add "via MOVDIR64B" to comment (Xiaoyao)
	Add Rev'd-by, Ack'd-by tags

Changes in V2 (as requested by Dave):

      x86/tdx: Eliminate duplicate code in tdx_clear_page()
	Rename reset_tdx_pages() to tdx_quirk_reset_paddr()
	Call tdx_quirk_reset_paddr() directly

      x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
	Improve the comment


Adrian Hunter (3):
      x86/tdx: Eliminate duplicate code in tdx_clear_page()
      x86/tdx: Tidy reset_pamt functions
      x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present

 arch/x86/include/asm/tdx.h  |  2 ++
 arch/x86/kvm/vmx/tdx.c      | 25 +++----------------------
 arch/x86/virt/vmx/tdx/tdx.c | 36 +++++++++++++++++++-----------------
 3 files changed, 24 insertions(+), 39 deletions(-)

----------------------------------------------------------------------

Exist: [PATCH V6 1/3] x86/tdx: Eliminate duplicate code in tdx_clear_page()
 Skip: [PATCH V5 1/3] x86/tdx: Eliminate duplicate code in tdx_clear_page()
Exist: [PATCH V6 0/3] x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
 Skip: [PATCH V5 0/3] x86/tdx: Skip clearing reclaimed pages unless X86_BUG_TDX_PW_MCE is present
New:  KVM: x86: use array_index_nospec with indices that come from guest
[PATCH] KVM: x86: use array_index_nospec with indices that come from guest
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>


min and dest_id are guest-controlled indices. Using array_index_nospec()
after the bounds checks clamps these values to mitigate speculative
execution side-channels.

Signed-off-by: Thijs Raymakers <thijs@raymakers.nl>
Cc: stable <stable@kernel.org>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---
 arch/x86/kvm/lapic.c | 2 ++
 arch/x86/kvm/x86.c   | 7 +++++--
 2 files changed, 7 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  arm64: Handle KCOV __init vs inline mismatches
[PATCH v4 1/4] arm64: Handle KCOV __init vs inline mismatches
Author: Kees Cook <kees@kernel.org>

GCC appears to have kind of fragile inlining heuristics, in the
sense that it can change whether or not it inlines something based on
optimizations. It looks like the kcov instrumentation being added (or in
this case, removed) from a function changes the optimization results,
and some functions marked "inline" are _not_ inlined. In that case,
we end up with __init code calling a function not marked __init, and we
get the build warnings I'm trying to eliminate in the coming patch that
adds __no_sanitize_coverage to __init functions:

WARNING: modpost: vmlinux: section mismatch in reference: acpi_get_enable_method+0x1c (section: .text.unlikely) -> acpi_psci_present (section: .init.text)

This problem is somewhat fragile (though using either __always_inline
or __init will deterministically solve it), but we've tripped over
this before with GCC and the solution has usually been to just use
__always_inline and move on.

For arm64 this requires forcing one ACPI function to be inlined with
__always_inline.

Signed-off-by: Kees Cook <kees@kernel.org>
---
Cc: Will Deacon <will@kernel.org>
Cc: Ard Biesheuvel <ardb@kernel.org>
Cc: Catalin Marinas <catalin.marinas@arm.com>
Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Cc: Gavin Shan <gshan@redhat.com>
Cc: "Russell King (Oracle)" <rmk+kernel@armlinux.org.uk>
Cc: James Morse <james.morse@arm.com>
Cc: Oza Pawandeep <quic_poza@quicinc.com>
Cc: Anshuman Khandual <anshuman.khandual@arm.com>
Cc: <linux-arm-kernel@lists.infradead.org>
---
 arch/arm64/include/asm/acpi.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  stackleak: Support Clang stack depth tracking
[PATCH v4 0/4] stackleak: Support Clang stack depth tracking
Author: Kees Cook <kees@kernel.org>

 v4:
  - rebase on for-next/hardening tree (took subset of v3 patches)
  - improve commit logs for x86 and arm64 changes (Mike, Will, Ard)
 v3: https://lore.kernel.org/lkml/20250717231756.make.423-kees@kernel.org/
 v2: https://lore.kernel.org/lkml/20250523043251.it.550-kees@kernel.org/
 v1: https://lore.kernel.org/lkml/20250507180852.work.231-kees@kernel.org/

Hi,

These are the remaining changes needed to support Clang stack depth
tracking for kstack_erase (nee stackleak).

Thanks!

-Kees

Kees Cook (4):
  arm64: Handle KCOV __init vs inline mismatches
  x86: Handle KCOV __init vs inline mismatches
  init.h: Disable sanitizer coverage for __init and __head
  kstack_erase: Support Clang stack depth tracking

 security/Kconfig.hardening      | 5 ++++-
 scripts/Makefile.kstack_erase   | 6 ++++++
 arch/arm64/include/asm/acpi.h   | 2 +-
 arch/x86/include/asm/acpi.h     | 4 ++--
 arch/x86/include/asm/init.h     | 2 +-
 arch/x86/include/asm/realmode.h | 2 +-
 include/linux/acpi.h            | 4 ++--
 include/linux/bootconfig.h      | 2 +-
 include/linux/efi.h             | 2 +-
 include/linux/init.h            | 4 +++-
 include/linux/memblock.h        | 2 +-
 include/linux/smp.h             | 2 +-
 arch/x86/kernel/kvm.c           | 2 +-
 arch/x86/mm/init_64.c           | 2 +-
 kernel/kexec_handover.c         | 4 ++--
 15 files changed, 28 insertions(+), 17 deletions(-)

----------------------------------------------------------------------

