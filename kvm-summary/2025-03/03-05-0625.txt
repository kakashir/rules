From daad5e1f to b1e55545
KVM mailing list update from daad5e1f to b1e55545

Top 15 contributor Email domains (Based on Email Body)

      8 huawei.com
      7 google.com
      6 intel.com
      5 rivosinc.com
      4 redhat.com
      3 linux.ibm.com
      1 linux.alibaba.com

Top 15 contributors (Based on Email Body)

      8  Longfang Liu <liulongfang@huawei.com>
      7  Sean Christopherson <seanjc@google.com>
      5  Atish Patra <atishp@rivosinc.com>
      4  Paolo Bonzini <pbonzini@redhat.com>
      3  Yan Zhao <yan.y.zhao@intel.com>
      3  Xiaoyao Li <xiaoyao.li@intel.com>
      2  Claudio Imbrenda <imbrenda@linux.ibm.com>
      1  weizijie <zijie.wei@linux.alibaba.com>
      1  Rorie Reyes <rreyes@linux.ibm.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  x86: apic: Move helpers for querying APIC
[kvm-unit-tests PATCH 1/2] x86: apic: Move helpers for querying APIC
Author: Sean Christopherson <seanjc@google.com>

Expose the helpers to query if an APIC is enabled, and in xAPIC vs. x2APIC
mode, to library code so that the helpers can be used by all tests.

No funtional change intended.

Signed-off-by: Sean Christopherson <seanjc@google.com>
---
 lib/x86/apic.h | 21 +++++++++++++++++++++
 x86/apic.c     | 20 --------------------
 2 files changed, 21 insertions(+), 20 deletions(-)

----------------------------------------------------------------------

New:  x86: nSVM: Fix a bug with nNPT+x2AVIC
[kvm-unit-tests PATCH 0/2] x86: nSVM: Fix a bug with nNPT+x2AVIC
Author: Sean Christopherson <seanjc@google.com>

Fix a bug in the nNPT passthrough APIC (MMIO) test where it runs with
x2APIC enabled.  The test currently passes because KVM provides consistent
behavior when the APIC is accessed via MMIO in x2APIC mode (see
KVM_X86_QUIRK_LAPIC_MMIO_HOLE), and because it runs with an in-kernel PIT,
which inhibits x2AVIC.

But with a split IRQCHIP, i.e. no preconfigured PIT, x2AVIC gets enabled
and the test fails because hardware doesn't provide the exact same behavior
as KVM (returns 0s instead of FFs).

Sean Christopherson (2):
  x86: apic: Move helpers for querying APIC state to library code
  x86: nSVM: Ensure APIC MMIO tests run with APIC in xAPIC mode

 lib/x86/apic.h | 21 +++++++++++++++++++++
 x86/apic.c     | 20 --------------------
 x86/svm_npt.c  | 27 +++++++++++++++++++++++++++
 3 files changed, 48 insertions(+), 20 deletions(-)

----------------------------------------------------------------------

New:  KVM: s390: fix a newly introduced bug
[PATCH v4 0/1] KVM: s390: fix a newly introduced bug
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>

Fix race when making a page secure (hold pte lock again)

This should fix the issues I have seen, which I think/hope are also the same
issues that David found.

v3->v4:
* move and rename s390_wiggle_split_folio() to fix a compile issue when
  KVM is not selected
* removed obsolete reference to __() from comments

v2->v3:
* added check for pte_write() in make_hva_secure() [thanks David]

v1->v2:
* major refactoring
* walk the page tables only once
* when importing, manually fault in pages if needed

Claudio Imbrenda (1):
  KVM: s390: pv: fix race when making a page secure

 arch/s390/include/asm/gmap.h |   1 -
 arch/s390/include/asm/uv.h   |   3 +-
 arch/s390/kernel/uv.c        | 135 +++++++++++++++++++++++++++++++++--
 arch/s390/kvm/gmap.c         | 101 ++------------------------
 arch/s390/kvm/kvm-s390.c     |  25 ++++---
 arch/s390/mm/gmap.c          |  28 --------
 6 files changed, 153 insertions(+), 140 deletions(-)

----------------------------------------------------------------------

New:  KVM: s390: pv: fix race when making a page secure
[PATCH v4 1/1] KVM: s390: pv: fix race when making a page secure
Author: Claudio Imbrenda <imbrenda@linux.ibm.com>

Holding the pte lock for the page that is being converted to secure is
needed to avoid races. A previous commit removed the locking, which
caused issues. Fix by locking the pte again.

Fixes: 5cbe24350b7d ("KVM: s390: move pv gmap functions into kvm")
Reported-by: David Hildenbrand <david@redhat.com>
Signed-off-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
Tested-by: David Hildenbrand <david@redhat.com>
Reviewed-by: David Hildenbrand <david@redhat.com>
---
 arch/s390/include/asm/gmap.h |   1 -
 arch/s390/include/asm/uv.h   |   3 +-
 arch/s390/kernel/uv.c        | 135 +++++++++++++++++++++++++++++++++--
 arch/s390/kvm/gmap.c         | 101 ++------------------------
 arch/s390/kvm/kvm-s390.c     |  25 ++++---
 arch/s390/mm/gmap.c          |  28 --------
 6 files changed, 153 insertions(+), 140 deletions(-)

----------------------------------------------------------------------

New:  migration: update BAR space size
[PATCH v3 1/3] migration: update BAR space size
Author: Longfang Liu <liulongfang@huawei.com>

On the new hardware platform, the live migration configuration region
is moved from VF to PF. The VF's own configuration space is
restored to the complete 64KB, and there is no need to divide the
size of the BAR configuration space equally.

Signed-off-by: Longfang Liu <liulongfang@huawei.com>
---
 .../vfio/pci/hisilicon/hisi_acc_vfio_pci.c    | 41 +++++++++++++++----
 1 file changed, 32 insertions(+), 9 deletions(-)

----------------------------------------------------------------------

New:  update live migration configuration region
[PATCH v3 0/3] update live migration configuration region
Author: Longfang Liu <liulongfang@huawei.com>

On the new hardware platform, the configuration register space
of the live migration function is set on the PF, while on the
old platform, this part is placed on the VF.

Change v2 -> v3
	Put the changes of Pre_Copy into another bugfix patchset.

Change v1 -> v2
	Delete the vf_qm_state read operation in Pre_Copy

Longfang Liu (3):
  migration: update BAR space size
  migration: qm updates BAR configuration
  migration: adapt to new migration configuration

 drivers/crypto/hisilicon/qm.c                 |  28 +++
 .../vfio/pci/hisilicon/hisi_acc_vfio_pci.c    | 206 ++++++++++++------
 .../vfio/pci/hisilicon/hisi_acc_vfio_pci.h    |   7 +
 3 files changed, 179 insertions(+), 62 deletions(-)

----------------------------------------------------------------------

Exist: [PATCH v3 1/3] migration: update BAR space size
 Skip: [PATCH v2 1/3] migration: update BAR space size
Exist: [PATCH v3 0/3] update live migration configuration region
 Skip: [PATCH v2 0/3] update live migration configuration region
New:  KVM: x86: Remove the unreachable case for 0x80000022 leaf in __do_cpuid_func()
[PATCH 1/2] KVM: x86: Remove the unreachable case for 0x80000022 leaf in __do_cpuid_func()
Author: Xiaoyao Li <xiaoyao.li@intel.com>

kvm_cpu_cap_has(X86_FEATURE_PERFMON_V2) must be true when it reaches
to setup value for EBX. Remove the unreachable code.

Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
---
 arch/x86/kvm/cpuid.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Cleanup and fix for reporting CPUID leaf 0x80000022
[PATCH 0/2] KVM: x86: Cleanup and fix for reporting CPUID leaf 0x80000022
Author: Xiaoyao Li <xiaoyao.li@intel.com>

Patch 1 is a cleanup and Patch 2 is a fix. Please see the individual
patch for detail.

Xiaoyao Li (2):
  KVM: x86: Remove the unreachable case for 0x80000022 leaf in
    __do_cpuid_func()
  KVM: x86: Explicitly set eax and ebx to 0 when X86_FEATURE_PERFMON_V2
    cannot be exposed to guest

 arch/x86/kvm/cpuid.c | 10 ++--------
 1 file changed, 2 insertions(+), 8 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: do not allow re-enabling quirks
[PATCH v3 1/6] KVM: x86: do not allow re-enabling quirks
Author: Paolo Bonzini <pbonzini@redhat.com>

Allowing arbitrary re-enabling of quirks puts a limit on what the
quirks themselves can do, since you cannot assume that the quirk
prevents a particular state.  More important, it also prevents
KVM from disabling a quirk at VM creation time, because userspace
can always go back and re-enable that.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 arch/x86/kvm/x86.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  KVM: x86: Introduce quirk KVM_X86_QUIRK_IGNORE_GUEST_PAT
[PATCH v3 0/4] KVM: x86: Introduce quirk KVM_X86_QUIRK_IGNORE_GUEST_PAT
Author: Paolo Bonzini <pbonzini@redhat.com>

This series is my evolution of Yan's patches at
https://patchew.org/linux/20250224070716.31360-1-yan.y.zhao@intel.com/.

The implementation of the quirk is unchanged, but the concepts in kvm_caps
are a bit different.  In particular:

- if a quirk is not applicable to some hardware, it is still included
  in KVM_CAP_DISABLE_QUIRKS2.  This way userspace knows that KVM is
  *aware* of a particular issue - even if disabling it has no effect
  because the quirk is not a problem on a specific hardware, userspace
  may want to know that it can rely on the problematic behavior not
  being present.  Therefore, KVM_X86_QUIRK_EPT_IGNORE_GUEST_PAT is
  simply auto-disabled on TDX machines.

- if instead a quirk cannot be disabled due to limitations, for example
  KVM_X86_QUIRK_EPT_IGNORE_GUEST_PAT if self-snoop is not present on
  the CPU, the quirk is removed completely from kvm_caps.supported_quirks
  and therefore from KVM_CAP_DISABLE_QUIRKS2.

This series does not introduce a way to query always-disabled quirks,
which could be for example KVM_CAP_DISABLED_QUIRKS.  This could be
added if we wanted for example to get rid of hypercall patching; it's
a trivial addition.

The main semantic change with respect to v2 is to prevent re-enabling
quirks that have been disabled with KVM_ENABLE_CAP.  This in turn makes
it possible to just use kvm->arch.disabled_quirks for TDX-enabled

Paolo

Supersedes: <20250301073428.2435768-1-pbonzini@redhat.com>

Paolo Bonzini (3):
  KVM: x86: do not allow re-enabling quirks
  KVM: x86: Allow vendor code to disable quirks
  KVM: x86: remove shadow_memtype_mask

Yan Zhao (3):
  KVM: x86: Introduce supported_quirks to block disabling quirks
  KVM: x86: Introduce Intel specific quirk
    KVM_X86_QUIRK_IGNORE_GUEST_PAT
  KVM: TDX: Always honor guest PAT on TDX enabled guests

 Documentation/virt/kvm/api.rst  | 22 +++++++++++++++++
 arch/x86/include/asm/kvm_host.h |  7 +++++-
 arch/x86/include/uapi/asm/kvm.h |  1 +
 arch/x86/kvm/mmu.h              |  2 +-
 arch/x86/kvm/mmu/mmu.c          | 13 ----------
 arch/x86/kvm/mmu/spte.c         | 19 ++-------------
 arch/x86/kvm/mmu/spte.h         |  1 -
 arch/x86/kvm/svm/svm.c          |  1 +
 arch/x86/kvm/vmx/tdx.c          |  6 +++++
 arch/x86/kvm/vmx/vmx.c          | 43 +++++++++++++++++++++++++++------
 arch/x86/kvm/x86.c              | 13 +++++++---
 arch/x86/kvm/x86.h              |  3 +++
 12 files changed, 87 insertions(+), 44 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Isolate edge vs. level check in userspace
[PATCH v5 1/3] KVM: x86: Isolate edge vs. level check in userspace
Author: Sean Christopherson <seanjc@google.com>

Extract and isolate the trigger mode check in kvm_scan_ioapic_routes() in
anticipation of moving destination matching logic to a common helper (for
userspace vs. in-kernel I/O APIC emulation).

No functional change intended.

Signed-off-by: Sean Christopherson <seanjc@google.com>
---
 arch/x86/kvm/irq_comm.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Optimize "stale" EOI bitmap exiting
[PATCH v5 0/3] KVM: x86: Optimize "stale" EOI bitmap exiting
Author: Sean Christopherson <seanjc@google.com>

Slightly modified version of the patch (now mini-series) to optimize EOI
bitmap exiting for "stale" routes, i.e. for the case where a vCPU has an
in-flight IRQ when the routing changes, and needs one final EOI exit to
deassert the IRQ.

Kai, I dropped your Reviewed-by as the change was non-trivial.

v5:
 - Intercept EOI if and only if the IRQ is level-triggered.
 - Add helper to consolidate logic.
 - Tweak field name.
 - "Reset" field to -1, immediately before scanning routes.

v4: https://lore.kernel.org/all/20250303052227.523411-1-zijie.wei@linux.alibaba.com

Sean Christopherson (2):
  KVM: x86: Isolate edge vs. level check in userspace I/O APIC route
    scanning
  KVM: x86: Add a helper to deduplicate I/O APIC EOI interception logic

weizijie (1):
  KVM: x86: Rescan I/O APIC routes after EOI interception for old
    routing

 arch/x86/include/asm/kvm_host.h |  1 +
 arch/x86/kvm/ioapic.c           |  7 ++-----
 arch/x86/kvm/ioapic.h           |  2 ++
 arch/x86/kvm/irq_comm.c         | 37 ++++++++++++++++++++++++++++-----
 arch/x86/kvm/lapic.c            |  8 +++++++
 arch/x86/kvm/x86.c              |  1 +
 6 files changed, 46 insertions(+), 10 deletions(-)

----------------------------------------------------------------------

New:  RISC-V: KVM: Disable the kernel perf counter during
[PATCH v2 1/4] RISC-V: KVM: Disable the kernel perf counter during
Author: Atish Patra <atishp@rivosinc.com>

The perf event should be marked disabled during the creation as
it is not ready to be scheduled until there is SBI PMU start call
or config matching is called with auto start. Otherwise, event add/start
gets called during perf_event_create_kernel_counter function.
It will be enabled and scheduled to run via perf_event_enable during
either the above mentioned scenario.

Fixes: 0cb74b65d2e5 ("RISC-V: KVM: Implement perf support without sampling")

Reviewed-by: Andrew Jones <ajones@ventanamicro.com>
Signed-off-by: Atish Patra <atishp@rivosinc.com>
---
 arch/riscv/kvm/vcpu_pmu.c | 1 +
 1 file changed, 1 insertion(+)

----------------------------------------------------------------------

New:  RISC-V KVM PMU fix and selftest improvement
[PATCH v2 0/4] RISC-V KVM PMU fix and selftest improvement
Author: Atish Patra <atishp@rivosinc.com>

This series adds a fix for KVM PMU code and improves the pmu selftest
by allowing generating precise number of interrupts. It also provided
another additional option to the overflow test that allows user to
generate custom number of LCOFI interrupts.

Signed-off-by: Atish Patra <atishp@rivosinc.com>
---
Changes in v2:
- Initialized the local overflow irq variable to 0 indicate that it's not a
  allowed value. 
- Moved the introduction of argument option `n` to the last patch. 
- Link to v1: https://lore.kernel.org/r/20250226-kvm_pmu_improve-v1-0-74c058c2bf6d@rivosinc.com

---
Atish Patra (4):
      RISC-V: KVM: Disable the kernel perf counter during configure
      KVM: riscv: selftests: Do not start the counter in the overflow handler
      KVM: riscv: selftests: Change command line option
      KVM: riscv: selftests: Allow number of interrupts to be configurable

 arch/riscv/kvm/vcpu_pmu.c                        |  1 +
 tools/testing/selftests/kvm/riscv/sbi_pmu_test.c | 81 ++++++++++++++++--------
 2 files changed, 57 insertions(+), 25 deletions(-)

----------------------------------------------------------------------

