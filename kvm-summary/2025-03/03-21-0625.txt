From 348d3aa0 to a633dcc5
KVM mailing list update from 348d3aa0 to a633dcc5

Top 15 contributor Email domains (Based on Email Body)

      6 amd.com
      4 google.com
      2 redhat.com
      1 linux.dev
      1 gmail.com

Top 15 contributors (Based on Email Body)

      6  Tom Lendacky <thomas.lendacky@amd.com>
      4  Sean Christopherson <seanjc@google.com>
      1  Yosry Ahmed <yosry.ahmed@linux.dev>
      1  Paolo Bonzini <pbonzini@redhat.com>
      1  Alex Williamson <alex.williamson@redhat.com>
      1  Akshay Behl <akshaybehl231@gmail.com>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  vfio/pci: Virtualize zero INTx PIN if no pdev->irq
[PATCH] vfio/pci: Virtualize zero INTx PIN if no pdev->irq
Author: Alex Williamson <alex.williamson@redhat.com>

Typically pdev->irq is consistent with whether the device itself
supports INTx, where device support is reported via the PIN register.
Therefore the PIN register is often already zero if pdev->irq is zero.

Recently virtualization of the PIN register was expanded to include
the case where the device supports INTx but the platform does not
route the interrupt.  This is reported by a value of IRQ_NOTCONNECTED
on some architectures.  Other architectures just report zero for
pdev->irq.

We already disallow INTx setup if pdev->irq is zero, therefore add
this to the PIN register virtualization criteria so that a consistent
view is provided to userspace through virtualized config space and
ioctls.

Reported-by: Shivaprasad G Bhat <sbhat@linux.ibm.com>
Link: https://lore.kernel.org/all/174231895238.2295.12586708771396482526.stgit@linux.ibm.com/
Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
---

Applies over https://lore.kernel.org/all/20250311230623.1264283-1-alex.williamson@redhat.com/

 drivers/vfio/pci/vfio_pci_config.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  selftests: kvm: revamp MONITOR/MWAIT tests
[PATCH] selftests: kvm: revamp MONITOR/MWAIT tests
Author: Paolo Bonzini <pbonzini@redhat.com>

Run each testcase in a separate VMs to cover more possibilities;
move WRMSR close to MONITOR/MWAIT to test updating CPUID bits
while in the VM.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 .../selftests/kvm/x86/monitor_mwait_test.c    | 108 +++++++++---------
 1 file changed, 57 insertions(+), 51 deletions(-)

----------------------------------------------------------------------

New:  KVM: VMX: Don't send UNBLOCK when starting device
[PATCH v2 1/3] KVM: VMX: Don't send UNBLOCK when starting device
Author: Sean Christopherson <seanjc@google.com>

When starting device assignment, i.e. potential IRQ bypass, don't blast
KVM_REQ_UNBLOCK if APICv is disabled/unsupported.  There is no need to
wake vCPUs if they can never use VT-d posted IRQs (sending UNBLOCK guards
against races being vCPUs blocking and devices starting IRQ bypass).

Opportunistically use kvm_arch_has_irq_bypass() for all relevant checks in
the VMX Posted Interrupt code so that all checks in KVM x86 incorporate
the same information (once AMD/AVIC is given similar treatment).

Cc: Yosry Ahmed <yosry.ahmed@linux.dev>
Signed-off-by: Sean Christopherson <seanjc@google.com>
---
 arch/x86/kvm/vmx/posted_intr.c | 7 +++----
 arch/x86/kvm/x86.c             | 1 +
 2 files changed, 4 insertions(+), 4 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Add a module param for device posted IRQs
[PATCH v2 0/3] KVM: x86: Add a module param for device posted IRQs
Author: Sean Christopherson <seanjc@google.com>

Add a module param, enable_device_posted_irqs, to control and enumerate
KVM support for device posted IRQs.

v2:
 - Add prep patches to use kvm_arch_has_irq_bypass() in vendor code when
   querying support IRQ bypass, a.k.a. device posted IRQs, so as not to
   unexpectedly introduce a (desired) dependency on enable_apicv. [Yosry]
 - Use "&=" when constraining enable_device_posted_irqs based on APICv
   and IOMMU posting support. [Yosry]

v1: https://lore.kernel.org/all/20250315025615.2367411-1-seanjc@google.com


Sean Christopherson (3):
  KVM: VMX: Don't send UNBLOCK when starting device assignment without
    APICv
  KVM: SVM: Don't update IRTEs if APICv/AVIC is disable
  KVM: x86: Add a module param to control and enumerate device posted
    IRQs

 arch/x86/include/asm/kvm_host.h |  1 +
 arch/x86/kvm/svm/avic.c         |  3 +--
 arch/x86/kvm/vmx/posted_intr.c  |  7 +++----
 arch/x86/kvm/x86.c              | 10 +++++++++-
 4 files changed, 14 insertions(+), 7 deletions(-)

----------------------------------------------------------------------

New:  KVM: SVM: Decrypt SEV VMSA in dump_vmcb() if debugging is enabled
[PATCH 1/5] KVM: SVM: Decrypt SEV VMSA in dump_vmcb() if debugging is enabled
Author: Tom Lendacky <thomas.lendacky@amd.com>

An SEV-ES/SEV-SNP VM save area (VMSA) can be decrypted if the guest
policy allows debugging. Update the dump_vmcb() routine to output
some of the SEV VMSA contents if possible. This can be useful for
debug purposes.

Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
---
 arch/x86/kvm/svm/sev.c | 98 ++++++++++++++++++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c | 13 ++++++
 arch/x86/kvm/svm/svm.h | 11 +++++
 3 files changed, 122 insertions(+)

----------------------------------------------------------------------

New:  Provide SEV-ES/SEV-SNP support for decrypting the VMSA
[PATCH 0/5] Provide SEV-ES/SEV-SNP support for decrypting the VMSA
Author: Tom Lendacky <thomas.lendacky@amd.com>

This series adds support for decrypting an SEV-ES/SEV-SNP VMSA in
dump_vmcb() when the guest policy allows debugging.

It also contains some updates to dump_vmcb() to dump additional guest
register state, print the type of guest, print the vCPU id, and adds a
mutex to prevent interleaving of the dump_vmcb() messages when multiple
vCPU threads call dump_vmcb(). These last patches can be dropped if not
desired.

The series is based off of and tested against the KVM tree:
  https://git.kernel.org/pub/scm/virt/kvm/kvm.git next

  e335300095c3 ("Merge tag 'loongarch-kvm-6.15' of git://git...")

Tom Lendacky (5):
  KVM: SVM: Decrypt SEV VMSA in dump_vmcb() if debugging is enabled
  KVM: SVM: Dump guest register state in dump_vmcb()
  KVM: SVM: Add the type of VM for which the VMCB/VMSA is being dumped
  KVM: SVM: Include the vCPU ID when dumping a VMCB
  KVM: SVM: Add a mutex to dump_vmcb() to prevent concurrent output

 arch/x86/kvm/svm/sev.c | 98 ++++++++++++++++++++++++++++++++++++++++++
 arch/x86/kvm/svm/svm.c | 80 +++++++++++++++++++++++++++++++++-
 arch/x86/kvm/svm/svm.h | 11 +++++
 3 files changed, 187 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  KVM: x86: Unify cross-vCPU IBPB
[PATCH] KVM: x86: Unify cross-vCPU IBPB
Author: Yosry Ahmed <yosry.ahmed@linux.dev>

Both SVM and VMX have similar implementation for executing an IBPB
between running different vCPUs on the same CPU to create separate
prediction domains for different vCPUs.

For VMX, when the currently loaded VMCS is changed in
vmx_vcpu_load_vmcs(), an IBPB is executed if there is no 'buddy', which
is the case on vCPU load. The intention is to execute an IBPB when
switching vCPUs, but not when switching the VMCS within the same vCPU.
Executing an IBPB on nested transitions within the same vCPU is handled
separately and conditionally in nested_vmx_vmexit().

For SVM, the current VMCB is tracked on vCPU load and an IBPB is
executed when it is changed. The intention is also to execute an IBPB
when switching vCPUs, although it is possible that in some cases an IBBP
is executed when switching VMCBs for the same vCPU. Executing an IBPB on
nested transitions should be handled separately, and is proposed at [1].

Unify the logic by tracking the last loaded vCPU and execuintg the IBPB
on vCPU change in kvm_arch_vcpu_load() instead. When a vCPU is
destroyed, make sure all references to it are removed from any CPU. This
is similar to how SVM clears the current_vmcb tracking on vCPU
destruction. Remove the current VMCB tracking in SVM as it is no longer
required, as well as the 'buddy' parameter to vmx_vcpu_load_vmcs().

[1]https://lore.kernel.org/lkml/20250221163352.3818347-4-yosry.ahmed@linux.dev/

Signed-off-by: Yosry Ahmed <yosry.ahmed@linux.dev>
---
 arch/x86/kvm/svm/svm.c    | 24 ------------------------
 arch/x86/kvm/svm/svm.h    |  2 --
 arch/x86/kvm/vmx/nested.c |  6 +++---
 arch/x86/kvm/vmx/vmx.c    | 15 ++-------------
 arch/x86/kvm/vmx/vmx.h    |  3 +--
 arch/x86/kvm/x86.c        | 19 ++++++++++++++++++-
 6 files changed, 24 insertions(+), 45 deletions(-)

----------------------------------------------------------------------

