From cbdc6d7fb to 76ce8c511
KVM mailing list update from cbdc6d7fb to 76ce8c511

Top 15 contributor Email domains (Based on Email Body)

     17 google.com
      2 redhat.com
      2 qq.com
      1 intel.com
      1 debian.org
      1 chromium.org

Top 15 contributors (Based on Email Body)

     15  Fuad Tabba <tabba@google.com>
      2  Gerd Hoffmann <kraxel@redhat.com>
      2  Edward Adam Davis <eadavis@qq.com>
      2  Ackerley Tng <ackerleytng@google.com>
      1  Rick Edgecombe <rick.p.edgecombe@intel.com>
      1  Junichi Uekawa <uekawa@chromium.org>
      1  Junichi Uekawa <dancer@debian.org>

===== Patch list in this time period =====


===== Patch Commit Messages ====

New:  x86/tdx: Always inline tdx_tdvpr_pa()
[PATCH] x86/tdx: Always inline tdx_tdvpr_pa()
Author: Rick Edgecombe <rick.p.edgecombe@intel.com>

In some cases tdx_tdvpr_pa() is not fully inlined into tdh_vp_enter(),
which causes the following warning:

  vmlinux.o: warning: objtool: tdh_vp_enter+0x8: call to tdx_tdvpr_pa() leaves .noinstr.text section

tdh_vp_enter() is marked noinstr and so can't accommodate the function
being outlined. Previously this didn't cause issues because the compiler
inlined the function. However, newer Clang compilers are deciding to
outline it.

So mark the function __always_inline to force it to be inlined. This
would leave the similar function tdx_tdr_pa() looking a bit asymmetric
and odd, as it is marked inline but actually doesn't need to be inlined.
So somewhat opportunistically remove the inline from tdx_tdr_pa() so that
it is clear that it does not need to be inlined, unlike tdx_tdvpr_pa().

tdx_tdvpr_pa() uses page_to_phys() which can make further calls to
outlines functions, but not on x86 following commit cba5d9b3e99d
("x86/mm/64: Make SPARSEMEM_VMEMMAP the only memory model").

Fixes: 69e23faf82b4 ("x86/virt/tdx: Add SEAMCALL wrapper to enter/exit TDX guest")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202505240530.5KktQ5mX-lkp@intel.com/
Suggested-by: Sean Christopherson <seanjc@google.com>
Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
Reviewed-by: Kai Huang <kai.huang@intel.com>
---
Previous discussion here:
https://lore.kernel.org/kvm/20250526204523.562665-1-pbonzini@redhat.com/

FWIW, I'm ok with the flatten version of the fix too, but posting this
just to speed things along in case.

And note, for full correctness, this and the flatten fix will depend on
the queued tip commit:
https://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git/commit/?id=cba5d9b3e99d6268d7909a65c2bd78f4d195aead

---
 arch/x86/virt/vmx/tdx/tdx.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

New:  KVM: Rename CONFIG_KVM_PRIVATE_MEM to CONFIG_KVM_GMEM
[PATCH v10 01/16] KVM: Rename CONFIG_KVM_PRIVATE_MEM to CONFIG_KVM_GMEM
Author: Fuad Tabba <tabba@google.com>

The option KVM_PRIVATE_MEM enables guest_memfd in general. Subsequent
patches add shared memory support to guest_memfd. Therefore, rename it
to KVM_GMEM to make its purpose clearer.

Reviewed-by: Gavin Shan <gshan@redhat.com>
Reviewed-by: Ira Weiny <ira.weiny@intel.com>
Co-developed-by: David Hildenbrand <david@redhat.com>
Signed-off-by: David Hildenbrand <david@redhat.com>
Signed-off-by: Fuad Tabba <tabba@google.com>
---
 arch/x86/include/asm/kvm_host.h |  2 +-
 include/linux/kvm_host.h        | 10 +++++-----
 virt/kvm/Kconfig                |  8 ++++----
 virt/kvm/Makefile.kvm           |  2 +-
 virt/kvm/kvm_main.c             |  4 ++--
 virt/kvm/kvm_mm.h               |  4 ++--
 6 files changed, 15 insertions(+), 15 deletions(-)

----------------------------------------------------------------------

New:  KVM: Mapping guest_memfd backed memory at the host
[PATCH v10 00/16] KVM: Mapping guest_memfd backed memory at the host
Author: Fuad Tabba <tabba@google.com>

Main changes since v9 [1]:
- Dropped best-effort validation that the userspace memory address range
  matches the shared memory backed by guest_memfd
- Rework handling faults for shared guest_memfd memory in arm64
- Track in the memslot whether it's backed by guest_memfd with shared
  memory support
- Various fixes based on feedback from v9
- Rebase on Linux 6.15

The purpose of this series is to allow mapping guest_memfd backed memory
at the host. This support enables VMMs like Firecracker to run guests
backed completely by guest_memfd [2]. Combined with Patrick's series for
direct map removal in guest_memfd [3], this would allow running VMs that
offer additional hardening against Spectre-like transient execution
attacks.

This series will also serve as a base for _restricted_ mmap() support
for guest_memfd backed memory at the host for CoCos that allow sharing
guest memory in-place with the host [4].

Patches 1 to 7 are mainly about decoupling the concept of guest memory
being private vs guest memory being backed by guest_memfd. They are
mostly refactoring and renaming.

Patches 8 and 9 add support for in-place shared memory, as well as the
ability to map it by the host as long as it is shared, gated by a new
configuration option, toggled by a new flag, and advertised to userspace
by a new capability (introduced in patch 15).

Patches 10 to 14 add x86 and arm64 support for in-place shared memory.

Patch 15 introduces the capability that advertises support for in-place
shared memory, and updates the documentation.

Patch 16 adds selftests for the new features.

For details on how to test this patch series, and on how to boot a guest
has uses the new features, please refer to v8 [5].

Cheers,
/fuad

[1] https://lore.kernel.org/all/20250513163438.3942405-1-tabba@google.com/
[2] https://github.com/firecracker-microvm/firecracker/tree/feature/secret-hiding
[3] https://lore.kernel.org/all/20250221160728.1584559-1-roypat@amazon.co.uk/
[4] https://lore.kernel.org/all/20250328153133.3504118-1-tabba@google.com/
[5] https://lore.kernel.org/all/20250430165655.605595-1-tabba@google.com/

Ackerley Tng (2):
  KVM: x86/mmu: Handle guest page faults for guest_memfd with shared
    memory
  KVM: x86: Compute max_mapping_level with input from guest_memfd

Fuad Tabba (14):
  KVM: Rename CONFIG_KVM_PRIVATE_MEM to CONFIG_KVM_GMEM
  KVM: Rename CONFIG_KVM_GENERIC_PRIVATE_MEM to
    CONFIG_KVM_GENERIC_GMEM_POPULATE
  KVM: Rename kvm_arch_has_private_mem() to kvm_arch_supports_gmem()
  KVM: x86: Rename kvm->arch.has_private_mem to kvm->arch.supports_gmem
  KVM: Rename kvm_slot_can_be_private() to kvm_slot_has_gmem()
  KVM: Fix comments that refer to slots_lock
  KVM: Fix comment that refers to kvm uapi header path
  KVM: guest_memfd: Allow host to map guest_memfd pages
  KVM: guest_memfd: Track shared memory support in memslot
  KVM: arm64: Refactor user_mem_abort() calculation of force_pte
  KVM: arm64: Handle guest_memfd-backed guest page faults
  KVM: arm64: Enable mapping guest_memfd in arm64
  KVM: Introduce the KVM capability KVM_CAP_GMEM_SHARED_MEM
  KVM: selftests: guest_memfd mmap() test when mapping is allowed

 Documentation/virt/kvm/api.rst                |   9 +
 arch/arm64/include/asm/kvm_host.h             |   5 +
 arch/arm64/kvm/Kconfig                        |   1 +
 arch/arm64/kvm/mmu.c                          | 109 ++++++++++--
 arch/x86/include/asm/kvm_host.h               |  22 ++-
 arch/x86/kvm/Kconfig                          |   4 +-
 arch/x86/kvm/mmu/mmu.c                        | 135 +++++++++------
 arch/x86/kvm/svm/sev.c                        |   4 +-
 arch/x86/kvm/svm/svm.c                        |   4 +-
 arch/x86/kvm/x86.c                            |   4 +-
 include/linux/kvm_host.h                      |  80 +++++++--
 include/uapi/linux/kvm.h                      |   2 +
 tools/testing/selftests/kvm/Makefile.kvm      |   1 +
 .../testing/selftests/kvm/guest_memfd_test.c  | 162 +++++++++++++++---
 virt/kvm/Kconfig                              |  15 +-
 virt/kvm/Makefile.kvm                         |   2 +-
 virt/kvm/guest_memfd.c                        | 101 ++++++++++-
 virt/kvm/kvm_main.c                           |  16 +-
 virt/kvm/kvm_mm.h                             |   4 +-
 19 files changed, 553 insertions(+), 127 deletions(-)

----------------------------------------------------------------------

New:  x86/sev/vc: fix efi runtime instruction emulation
[PATCH 1/2] x86/sev/vc: fix efi runtime instruction emulation
Author: Gerd Hoffmann <kraxel@redhat.com>

In case efi_mm is active go use the userspace instruction decoder which
supports fetching instructions from active_mm.  This is needed to make
instruction emulation work for EFI runtime code, so it can use cpuid
and rdmsr.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 arch/x86/coco/sev/core.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

----------------------------------------------------------------------

New:  Fix comment for virtio-9p
[PATCH] Fix comment for virtio-9p
Author: dancer <dancer@debian.org>


virtio-9p is not a console protocol, it's a file sharing protocol. Seems
like an artifact of old copy-and-paste error.

Fixes: 3ca4f5ca7305 ("virtio: add virtio IDs file")
Signed-off-by: Junichi Uekawa <dancer@debian.org>
---
 include/uapi/linux/virtio_ids.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

----------------------------------------------------------------------

Exist: [PATCH] Fix comment for virtio-9p
 Skip: [PATCH] Fix comment for virtio-9p
